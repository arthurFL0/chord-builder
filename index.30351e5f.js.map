{"mappings":"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","sources":["<anon>","src/index.js","src/info.js","src/acordes.js","node_modules/tonal/dist/index.mjs","node_modules/tonal/index.ts","node_modules/@tonaljs/abc-notation/dist/index.mjs","node_modules/@tonaljs/abc-notation/index.ts","node_modules/@tonaljs/core/dist/index.mjs","node_modules/@tonaljs/core/index.ts","node_modules/@tonaljs/pitch/dist/index.mjs","node_modules/@tonaljs/pitch/index.ts","node_modules/@tonaljs/pitch-distance/dist/index.mjs","node_modules/@tonaljs/pitch-distance/index.ts","node_modules/@tonaljs/pitch-interval/dist/index.mjs","node_modules/@tonaljs/pitch-interval/index.ts","node_modules/@tonaljs/pitch-note/dist/index.mjs","node_modules/@tonaljs/pitch-note/index.ts","node_modules/@tonaljs/array/dist/index.mjs","node_modules/@tonaljs/array/index.ts","node_modules/@tonaljs/chord/dist/index.mjs","node_modules/@tonaljs/chord/index.ts","node_modules/@tonaljs/chord-detect/dist/index.mjs","node_modules/@tonaljs/chord-detect/index.ts","node_modules/@tonaljs/chord-type/dist/index.mjs","node_modules/@tonaljs/chord-type/index.ts","node_modules/@tonaljs/chord-type/data.ts","node_modules/@tonaljs/pcset/dist/index.mjs","node_modules/@tonaljs/pcset/index.ts","node_modules/@tonaljs/collection/dist/index.mjs","node_modules/@tonaljs/collection/index.ts","node_modules/@tonaljs/scale-type/dist/index.mjs","node_modules/@tonaljs/scale-type/index.ts","node_modules/@tonaljs/scale-type/data.ts","node_modules/@tonaljs/duration-value/dist/index.mjs","node_modules/@tonaljs/duration-value/data.ts","node_modules/@tonaljs/duration-value/index.ts","node_modules/@tonaljs/interval/dist/index.mjs","node_modules/@tonaljs/interval/index.ts","node_modules/@tonaljs/key/dist/index.mjs","node_modules/@tonaljs/key/index.ts","node_modules/@tonaljs/note/dist/index.mjs","node_modules/@tonaljs/note/index.ts","node_modules/@tonaljs/midi/dist/index.mjs","node_modules/@tonaljs/midi/index.ts","node_modules/@tonaljs/roman-numeral/dist/index.mjs","node_modules/@tonaljs/roman-numeral/index.ts","node_modules/@tonaljs/mode/dist/index.mjs","node_modules/@tonaljs/mode/index.ts","node_modules/@tonaljs/progression/dist/index.mjs","node_modules/@tonaljs/progression/index.ts","node_modules/@tonaljs/range/dist/index.mjs","node_modules/@tonaljs/range/index.ts","node_modules/@tonaljs/scale/dist/index.mjs","node_modules/@tonaljs/scale/index.ts","node_modules/@tonaljs/time-signature/dist/index.mjs","node_modules/@tonaljs/time-signature/index.ts","node_modules/@tonaljs/voice-leading/dist/index.mjs","node_modules/@tonaljs/voice-leading/index.ts","node_modules/@tonaljs/voicing/dist/index.mjs","node_modules/@tonaljs/voicing/index.ts","node_modules/@tonaljs/voicing-dictionary/dist/index.mjs","node_modules/@tonaljs/voicing-dictionary/index.ts","node_modules/@tonaljs/voicing-dictionary/data.ts"],"sourcesContent":["function $31fcbff186f504bd$export$7b1762f2253f172b() {\n    let p = document.createElement(\"p\");\n    let p2 = document.createElement(\"p\");\n    let h2 = document.createElement(\"h2\");\n    let h2_contato = document.createElement(\"h2\");\n    let sec = document.createElement(\"section\");\n    let linkedin = document.createElement(\"a\");\n    let git = document.createElement(\"a\");\n    let email = document.createElement(\"a\");\n    let linkholder = document.createElement(\"div\");\n    linkholder.classList.add(\"link-holder\");\n    sec.classList.add(\"sec-info\");\n    h2_contato.append(\"Informa\\xe7\\xf5es de contato\");\n    h2.append(\"Sobre o site\");\n    p.append(\"Nesse projeto pessoal de minha autoria voc\\xea pode escolher as posi\\xe7\\xf5es das notas no bra\\xe7o do viol\\xe3o, em formato de cifra, e ent\\xe3o achar o nome do acorde digitado.\");\n    p2.append(\"Foi utilizado o empacotador web Parcel junto com Javascript, CSS, HTML e a biblioteca javascript de teoria musical 'tonal'.\");\n    linkedin.append(\"Linkedin\");\n    git.append(\"Github\");\n    email.append(\"arthurlacerda206@gmail.com\");\n    linkedin.href = \"https://www.linkedin.com/in/arthurfl0\";\n    git.href = \"https://github.com/arthurFL0\";\n    email.href = \"mailto:arthurlacerda206@gmail.com\";\n    linkholder.append(linkedin, git, email);\n    sec.append(h2, p, p2, h2_contato, linkholder);\n    document.querySelector(\".builder-container\").replaceChildren(sec);\n}\n\n\n\nfunction $536c869b7829f0c2$export$11cdf119b9ba7752() {\n    let divContainer = document.createElement(\"div\");\n    divContainer.classList.add(\"container-acordes\");\n    document.querySelector(\".builder-container\").replaceChildren(divContainer);\n    let arrAcordes = JSON.parse(localStorage.getItem(\"acordes\"));\n    if (arrAcordes.length > 0) arrAcordes.forEach((acorde, index)=>{\n        let div = document.createElement(\"div\");\n        let btn = document.createElement(\"button\");\n        btn.append(acorde.nome);\n        btn.classList.add(\"btn-acorde\", \"pointer\");\n        div.classList.add(\"div-acorde\");\n        div.append(btn);\n        divContainer.append(div);\n        btn.addEventListener(\"click\", ()=>{\n            $536c869b7829f0c2$var$renderAcorde(acorde, index);\n        });\n    });\n    else {\n        let div = document.createElement(\"div\");\n        div.classList.add(\"acordes-placeholder\", \"c-default\");\n        let span = document.createElement(\"span\");\n        span.append(\"Crie acordes na tela do construtor e eles aparecer\\xe3o aqui!\");\n        div.append(span);\n        divContainer.append(div);\n    }\n}\nfunction $536c869b7829f0c2$var$renderAcorde(acorde, index) {\n    let divAcorde = document.createElement(\"div\");\n    divAcorde.classList.add(\"acorde-container\");\n    let divInformation = document.createElement(\"div\");\n    divInformation.classList.add(\"div-info\");\n    let divDisplay = document.createElement(\"div\");\n    divDisplay.classList.add(\"div-display\");\n    let divInferior = document.createElement(\"div\");\n    divInferior.classList.add(\"infoAcorde-container\", \"c-default\");\n    divInferior.append(divInformation, divDisplay);\n    let divSuperior = document.createElement(\"div\");\n    divSuperior.classList.add(\"btnAcorde-container\");\n    let btnVoltar = document.createElement(\"button\");\n    btnVoltar.append(\"Voltar\");\n    let btnRemover = document.createElement(\"button\");\n    btnRemover.append(\"Remover Acorde\");\n    btnRemover.classList.add(\"btnRemover\");\n    btnRemover.addEventListener(\"click\", ()=>{\n        $536c869b7829f0c2$var$removerAcorde(index);\n        $536c869b7829f0c2$export$11cdf119b9ba7752();\n    });\n    let divVoltar = document.createElement(\"div\");\n    let tagI = document.createElement(\"i\");\n    divVoltar.classList.add(\"voltar-container\", \"pointer\");\n    tagI.classList.add(\"fa-solid\", \"fa-right-long\", \"fa-rotate-180\");\n    divVoltar.append(tagI, btnVoltar);\n    divVoltar.addEventListener(\"click\", ()=>{\n        $536c869b7829f0c2$export$11cdf119b9ba7752();\n    });\n    divSuperior.append(divVoltar, btnRemover);\n    divAcorde.append(divSuperior);\n    divAcorde.append(divInferior);\n    let nomeAcorde = document.createElement(\"h2\");\n    nomeAcorde.append(acorde.nome);\n    nomeAcorde.classList.add(\"white\");\n    divInformation.append(nomeAcorde);\n    let h3 = document.createElement(\"h3\");\n    h3.append(\"Notas:\");\n    h3.classList.add(\"white\");\n    divInformation.append(h3);\n    acorde.notas.forEach((el, i)=>{\n        let p = document.createElement(\"p\");\n        let txt = `Corda ${i + 1}: ` + (el.nota != undefined ? el.nota : \"Sem nota\");\n        p.classList.add(\"white\");\n        p.append(txt);\n        divInformation.append(p);\n    });\n    $536c869b7829f0c2$var$construirAcorde(divDisplay, acorde);\n    document.querySelector(\".builder-container\").replaceChildren(divAcorde);\n}\nfunction $536c869b7829f0c2$var$construirAcorde(pai, acorde) {\n    let divCasas = document.createElement(\"div\");\n    divCasas.classList.add(\"numeroCasas-container\", \"c-default\", \"padding-t\");\n    let i = 0;\n    while(i < 5){\n        let span = document.createElement(\"span\");\n        span.append(acorde.range + i);\n        divCasas.append(span);\n        i = i + 1;\n    }\n    let div = document.createElement(\"div\");\n    let openNoteContainer = document.createElement(\"div\");\n    openNoteContainer.classList.add(\"openNote-container\");\n    let braco = document.createElement(\"div\");\n    braco.classList.add(\"braco\");\n    acorde.notas.forEach((nota, i)=>{\n        let divOpen = document.createElement(\"div\");\n        divOpen.classList.add(\"openNote-holder\");\n        let span = document.createElement(\"span\");\n        if (nota.casa === 6) span.classList.add(\"openNote-bola\", \"dis-block\");\n        else if (nota.casa === undefined) {\n            span.classList.add(\"openNote-span\");\n            span.append(\"X\");\n        }\n        divOpen.append(span);\n        openNoteContainer.append(divOpen);\n    });\n    (0, $35da740d59af89ba$export$3b0f3781aa3ef7a4)(braco, true, acorde.notas);\n    div.append(braco);\n    div.append(openNoteContainer);\n    pai.append(divCasas, div);\n}\nfunction $536c869b7829f0c2$var$removerAcorde(index) {\n    let arrNovo = JSON.parse(localStorage.getItem(\"acordes\"));\n    arrNovo.splice(index, 1);\n    console.log(arrNovo, \" \", index);\n    localStorage.setItem(\"acordes\", JSON.stringify(arrNovo));\n}\n\n\n// index.ts\n// index.ts\n// index.ts\n// index.ts\nfunction $c1fc50133d2a8115$export$70ce4c42ed4560f3(src) {\n    return src !== null && typeof src === \"object\" && \"name\" in src && typeof src.name === \"string\" ? true : false;\n}\nvar $c1fc50133d2a8115$var$SIZES = [\n    0,\n    2,\n    4,\n    5,\n    7,\n    9,\n    11\n];\nvar $c1fc50133d2a8115$export$65e376726ced75b1 = ({ step: step, alt: alt })=>($c1fc50133d2a8115$var$SIZES[step] + alt + 120) % 12;\nvar $c1fc50133d2a8115$export$ac607276a8fe9f0a = ({ step: step, alt: alt, oct: oct, dir: dir = 1 })=>dir * ($c1fc50133d2a8115$var$SIZES[step] + alt + 12 * (oct === void 0 ? -100 : oct));\nvar $c1fc50133d2a8115$export$f4b3135d43fb03d5 = (pitch2)=>{\n    const h = $c1fc50133d2a8115$export$ac607276a8fe9f0a(pitch2);\n    return pitch2.oct !== void 0 && h >= -12 && h <= 115 ? h + 12 : null;\n};\nfunction $c1fc50133d2a8115$export$3a746b746d570840(pitch2) {\n    return pitch2 !== null && typeof pitch2 === \"object\" && \"step\" in pitch2 && typeof pitch2.step === \"number\" && \"alt\" in pitch2 && typeof pitch2.alt === \"number\" ? true : false;\n}\nvar $c1fc50133d2a8115$var$FIFTHS = [\n    0,\n    2,\n    4,\n    -1,\n    1,\n    3,\n    5\n];\nvar $c1fc50133d2a8115$var$STEPS_TO_OCTS = $c1fc50133d2a8115$var$FIFTHS.map((fifths)=>Math.floor(fifths * 7 / 12));\nfunction $c1fc50133d2a8115$export$741858880c96b18c(pitch2) {\n    const { step: step, alt: alt, oct: oct, dir: dir = 1 } = pitch2;\n    const f = $c1fc50133d2a8115$var$FIFTHS[step] + 7 * alt;\n    if (oct === void 0) return [\n        dir * f\n    ];\n    const o = oct - $c1fc50133d2a8115$var$STEPS_TO_OCTS[step] - 4 * alt;\n    return [\n        dir * f,\n        dir * o\n    ];\n}\nvar $c1fc50133d2a8115$var$FIFTHS_TO_STEPS = [\n    3,\n    0,\n    4,\n    1,\n    5,\n    2,\n    6\n];\nfunction $c1fc50133d2a8115$export$6c9e2d66dea2a302(coord) {\n    const [f, o, dir] = coord;\n    const step = $c1fc50133d2a8115$var$FIFTHS_TO_STEPS[$c1fc50133d2a8115$var$unaltered(f)];\n    const alt = Math.floor((f + 1) / 7);\n    if (o === void 0) return {\n        step: step,\n        alt: alt,\n        dir: dir\n    };\n    const oct = o + 4 * alt + $c1fc50133d2a8115$var$STEPS_TO_OCTS[step];\n    return {\n        step: step,\n        alt: alt,\n        oct: oct,\n        dir: dir\n    };\n}\nfunction $c1fc50133d2a8115$var$unaltered(f) {\n    const i = (f + 1) % 7;\n    return i < 0 ? 7 + i : i;\n}\n\n\n// index.ts\n// index.ts\n\nvar $4e01aabfc377cdb3$var$fillStr = (s, n)=>Array(Math.abs(n) + 1).join(s);\nvar $4e01aabfc377cdb3$var$NoInterval = {\n    empty: true,\n    name: \"\",\n    acc: \"\"\n};\nvar $4e01aabfc377cdb3$var$INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\nvar $4e01aabfc377cdb3$var$INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar $4e01aabfc377cdb3$var$REGEX = new RegExp(\"^\" + $4e01aabfc377cdb3$var$INTERVAL_TONAL_REGEX + \"|\" + $4e01aabfc377cdb3$var$INTERVAL_SHORTHAND_REGEX + \"$\");\nfunction $4e01aabfc377cdb3$export$4eeb042b94fbf5c0(str) {\n    const m = $4e01aabfc377cdb3$var$REGEX.exec(`${str}`);\n    if (m === null) return [\n        \"\",\n        \"\"\n    ];\n    return m[1] ? [\n        m[1],\n        m[2]\n    ] : [\n        m[4],\n        m[3]\n    ];\n}\nvar $4e01aabfc377cdb3$var$cache = {};\nfunction $4e01aabfc377cdb3$export$3174cdbf0a0cbc84(src) {\n    return typeof src === \"string\" ? $4e01aabfc377cdb3$var$cache[src] || ($4e01aabfc377cdb3$var$cache[src] = $4e01aabfc377cdb3$var$parse(src)) : (0, $c1fc50133d2a8115$export$3a746b746d570840)(src) ? $4e01aabfc377cdb3$export$3174cdbf0a0cbc84($4e01aabfc377cdb3$var$pitchName(src)) : (0, $c1fc50133d2a8115$export$70ce4c42ed4560f3)(src) ? $4e01aabfc377cdb3$export$3174cdbf0a0cbc84(src.name) : $4e01aabfc377cdb3$var$NoInterval;\n}\nvar $4e01aabfc377cdb3$var$SIZES = [\n    0,\n    2,\n    4,\n    5,\n    7,\n    9,\n    11\n];\nvar $4e01aabfc377cdb3$var$TYPES = \"PMMPPMM\";\nfunction $4e01aabfc377cdb3$var$parse(str) {\n    const tokens = $4e01aabfc377cdb3$export$4eeb042b94fbf5c0(str);\n    if (tokens[0] === \"\") return $4e01aabfc377cdb3$var$NoInterval;\n    const num = +tokens[0];\n    const q = tokens[1];\n    const step = (Math.abs(num) - 1) % 7;\n    const t = $4e01aabfc377cdb3$var$TYPES[step];\n    if (t === \"M\" && q === \"P\") return $4e01aabfc377cdb3$var$NoInterval;\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n    const name = \"\" + num + q;\n    const dir = num < 0 ? -1 : 1;\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n    const alt = $4e01aabfc377cdb3$var$qToAlt(type, q);\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\n    const semitones = dir * ($4e01aabfc377cdb3$var$SIZES[step] + alt + 12 * oct);\n    const chroma = (dir * ($4e01aabfc377cdb3$var$SIZES[step] + alt) % 12 + 12) % 12;\n    const coord = (0, $c1fc50133d2a8115$export$741858880c96b18c)({\n        step: step,\n        alt: alt,\n        oct: oct,\n        dir: dir\n    });\n    return {\n        empty: false,\n        name: name,\n        num: num,\n        q: q,\n        step: step,\n        alt: alt,\n        dir: dir,\n        type: type,\n        simple: simple,\n        semitones: semitones,\n        chroma: chroma,\n        coord: coord,\n        oct: oct\n    };\n}\nfunction $4e01aabfc377cdb3$export$41be0c142b835bde(coord, forceDescending) {\n    const [f, o = 0] = coord;\n    const isDescending = f * 7 + o * 12 < 0;\n    const ivl = forceDescending || isDescending ? [\n        -f,\n        -o,\n        -1\n    ] : [\n        f,\n        o,\n        1\n    ];\n    return $4e01aabfc377cdb3$export$3174cdbf0a0cbc84((0, $c1fc50133d2a8115$export$6c9e2d66dea2a302)(ivl));\n}\nfunction $4e01aabfc377cdb3$var$qToAlt(type, q) {\n    return q === \"M\" && type === \"majorable\" || q === \"P\" && type === \"perfectable\" ? 0 : q === \"m\" && type === \"majorable\" ? -1 : /^A+$/.test(q) ? q.length : /^d+$/.test(q) ? -1 * (type === \"perfectable\" ? q.length : q.length + 1) : 0;\n}\nfunction $4e01aabfc377cdb3$var$pitchName(props) {\n    const { step: step, alt: alt, oct: oct = 0, dir: dir } = props;\n    if (!dir) return \"\";\n    const calcNum = step + 1 + 7 * oct;\n    const num = calcNum === 0 ? step + 1 : calcNum;\n    const d = dir < 0 ? \"-\" : \"\";\n    const type = $4e01aabfc377cdb3$var$TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n    const name = d + num + $4e01aabfc377cdb3$var$altToQ(type, alt);\n    return name;\n}\nfunction $4e01aabfc377cdb3$var$altToQ(type, alt) {\n    if (alt === 0) return type === \"majorable\" ? \"M\" : \"P\";\n    else if (alt === -1 && type === \"majorable\") return \"m\";\n    else if (alt > 0) return $4e01aabfc377cdb3$var$fillStr(\"A\", alt);\n    else return $4e01aabfc377cdb3$var$fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\n}\n\n\n// index.ts\n\nvar $b16aee3da08f05ac$var$fillStr = (s, n)=>Array(Math.abs(n) + 1).join(s);\nvar $b16aee3da08f05ac$var$NoNote = {\n    empty: true,\n    name: \"\",\n    pc: \"\",\n    acc: \"\"\n};\nvar $b16aee3da08f05ac$var$cache = /* @__PURE__ */ new Map();\nvar $b16aee3da08f05ac$export$4fed1eaee6342c12 = (step)=>\"CDEFGAB\".charAt(step);\nvar $b16aee3da08f05ac$export$fe2c2edbd7417985 = (alt)=>alt < 0 ? $b16aee3da08f05ac$var$fillStr(\"b\", -alt) : $b16aee3da08f05ac$var$fillStr(\"#\", alt);\nvar $b16aee3da08f05ac$export$8f7077a2780017bf = (acc)=>acc[0] === \"b\" ? -acc.length : acc.length;\nfunction $b16aee3da08f05ac$export$a92e4c44d367d0af(src) {\n    const stringSrc = JSON.stringify(src);\n    const cached = $b16aee3da08f05ac$var$cache.get(stringSrc);\n    if (cached) return cached;\n    const value = typeof src === \"string\" ? $b16aee3da08f05ac$var$parse(src) : (0, $c1fc50133d2a8115$export$3a746b746d570840)(src) ? $b16aee3da08f05ac$export$a92e4c44d367d0af($b16aee3da08f05ac$var$pitchName(src)) : (0, $c1fc50133d2a8115$export$70ce4c42ed4560f3)(src) ? $b16aee3da08f05ac$export$a92e4c44d367d0af(src.name) : $b16aee3da08f05ac$var$NoNote;\n    $b16aee3da08f05ac$var$cache.set(stringSrc, value);\n    return value;\n}\nvar $b16aee3da08f05ac$var$REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\nfunction $b16aee3da08f05ac$export$e13422ef2dcdcd5d(str) {\n    const m = $b16aee3da08f05ac$var$REGEX.exec(str);\n    return [\n        m[1].toUpperCase(),\n        m[2].replace(/x/g, \"##\"),\n        m[3],\n        m[4]\n    ];\n}\nfunction $b16aee3da08f05ac$export$d4bbcd58d1a5389d(noteCoord) {\n    return $b16aee3da08f05ac$export$a92e4c44d367d0af((0, $c1fc50133d2a8115$export$6c9e2d66dea2a302)(noteCoord));\n}\nvar $b16aee3da08f05ac$var$mod = (n, m)=>(n % m + m) % m;\nvar $b16aee3da08f05ac$var$SEMI = [\n    0,\n    2,\n    4,\n    5,\n    7,\n    9,\n    11\n];\nfunction $b16aee3da08f05ac$var$parse(noteName) {\n    const tokens = $b16aee3da08f05ac$export$e13422ef2dcdcd5d(noteName);\n    if (tokens[0] === \"\" || tokens[3] !== \"\") return $b16aee3da08f05ac$var$NoNote;\n    const letter = tokens[0];\n    const acc = tokens[1];\n    const octStr = tokens[2];\n    const step = (letter.charCodeAt(0) + 3) % 7;\n    const alt = $b16aee3da08f05ac$export$8f7077a2780017bf(acc);\n    const oct = octStr.length ? +octStr : void 0;\n    const coord = (0, $c1fc50133d2a8115$export$741858880c96b18c)({\n        step: step,\n        alt: alt,\n        oct: oct\n    });\n    const name = letter + acc + octStr;\n    const pc = letter + acc;\n    const chroma = ($b16aee3da08f05ac$var$SEMI[step] + alt + 120) % 12;\n    const height = oct === void 0 ? $b16aee3da08f05ac$var$mod($b16aee3da08f05ac$var$SEMI[step] + alt, 12) - 1188 : $b16aee3da08f05ac$var$SEMI[step] + alt + 12 * (oct + 1);\n    const midi = height >= 0 && height <= 127 ? height : null;\n    const freq = oct === void 0 ? null : Math.pow(2, (height - 69) / 12) * 440;\n    return {\n        empty: false,\n        acc: acc,\n        alt: alt,\n        chroma: chroma,\n        coord: coord,\n        freq: freq,\n        height: height,\n        letter: letter,\n        midi: midi,\n        name: name,\n        oct: oct,\n        pc: pc,\n        step: step\n    };\n}\nfunction $b16aee3da08f05ac$var$pitchName(props) {\n    const { step: step, alt: alt, oct: oct } = props;\n    const letter = $b16aee3da08f05ac$export$4fed1eaee6342c12(step);\n    if (!letter) return \"\";\n    const pc = letter + $b16aee3da08f05ac$export$fe2c2edbd7417985(alt);\n    return oct || oct === 0 ? pc + oct : pc;\n}\n\n\nfunction $498eab776f7de6b3$export$9cb09a71b7d66923(noteName, intervalName) {\n    const note = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(noteName);\n    const intervalCoord = Array.isArray(intervalName) ? intervalName : (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(intervalName).coord;\n    if (note.empty || !intervalCoord || intervalCoord.length < 2) return \"\";\n    const noteCoord = note.coord;\n    const tr = noteCoord.length === 1 ? [\n        noteCoord[0] + intervalCoord[0]\n    ] : [\n        noteCoord[0] + intervalCoord[0],\n        noteCoord[1] + intervalCoord[1]\n    ];\n    return (0, $b16aee3da08f05ac$export$d4bbcd58d1a5389d)(tr).name;\n}\nfunction $498eab776f7de6b3$export$96bb437d3e6675d(intervals, tonic) {\n    const len = intervals.length;\n    return (normalized)=>{\n        if (!tonic) return \"\";\n        const index = normalized < 0 ? (len - -normalized % len) % len : normalized % len;\n        const octaves = Math.floor(normalized / len);\n        const root = $498eab776f7de6b3$export$9cb09a71b7d66923(tonic, [\n            0,\n            octaves\n        ]);\n        return $498eab776f7de6b3$export$9cb09a71b7d66923(root, intervals[index]);\n    };\n}\nfunction $498eab776f7de6b3$export$9f17032d917177de(fromNote, toNote) {\n    const from = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(fromNote);\n    const to = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(toNote);\n    if (from.empty || to.empty) return \"\";\n    const fcoord = from.coord;\n    const tcoord = to.coord;\n    const fifths = tcoord[0] - fcoord[0];\n    const octs = fcoord.length === 2 && tcoord.length === 2 ? tcoord[1] - fcoord[1] : -Math.floor(fifths * 7 / 12);\n    const forceDescending = to.height === from.height && to.midi !== null && from.midi !== null && from.step > to.step;\n    return (0, $4e01aabfc377cdb3$export$41be0c142b835bde)([\n        fifths,\n        octs\n    ], forceDescending).name;\n}\n\n\n\n\nvar $6afb6a04609a1abf$export$e27d9bf39c74b076 = (s, n)=>Array(Math.abs(n) + 1).join(s);\nfunction $6afb6a04609a1abf$export$b680e6b2c82f8c2f(original, alternative, fn) {\n    return function(...args) {\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\n        return fn.apply(this, args);\n    };\n}\nvar $6afb6a04609a1abf$export$745137f0b0c9a0b3 = $6afb6a04609a1abf$export$b680e6b2c82f8c2f(\"isNamed\", \"isNamedPitch\", (0, $c1fc50133d2a8115$export$70ce4c42ed4560f3));\n\n\nvar $a60c20066a20f256$var$fillStr = (character, times)=>Array(times + 1).join(character);\nvar $a60c20066a20f256$var$REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\nfunction $a60c20066a20f256$export$660b2ee2d4fb4eff(str) {\n    const m = $a60c20066a20f256$var$REGEX.exec(str);\n    if (!m) return [\n        \"\",\n        \"\",\n        \"\"\n    ];\n    return [\n        m[1],\n        m[2],\n        m[3]\n    ];\n}\nfunction $a60c20066a20f256$export$51dc27a5ec2b16c0(str) {\n    const [acc, letter, oct] = $a60c20066a20f256$export$660b2ee2d4fb4eff(str);\n    if (letter === \"\") return \"\";\n    let o = 4;\n    for(let i = 0; i < oct.length; i++)o += oct.charAt(i) === \",\" ? -1 : 1;\n    const a = acc[0] === \"_\" ? acc.replace(/_/g, \"b\") : acc[0] === \"^\" ? acc.replace(/\\^/g, \"#\") : \"\";\n    return letter.charCodeAt(0) > 96 ? letter.toUpperCase() + a + (o + 1) : letter + a + o;\n}\nfunction $a60c20066a20f256$export$583e55d9afced5e7(str) {\n    const n = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(str);\n    if (n.empty || !n.oct && n.oct !== 0) return \"\";\n    const { letter: letter, acc: acc, oct: oct } = n;\n    const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\n    const l = oct > 4 ? letter.toLowerCase() : letter;\n    const o = oct === 5 ? \"\" : oct > 4 ? $a60c20066a20f256$var$fillStr(\"'\", oct - 5) : $a60c20066a20f256$var$fillStr(\",\", 4 - oct);\n    return a + l + o;\n}\nfunction $a60c20066a20f256$export$9cb09a71b7d66923(note2, interval) {\n    return $a60c20066a20f256$export$583e55d9afced5e7((0, $498eab776f7de6b3$export$9cb09a71b7d66923)($a60c20066a20f256$export$51dc27a5ec2b16c0(note2), interval));\n}\nfunction $a60c20066a20f256$export$9f17032d917177de(from, to) {\n    return (0, $498eab776f7de6b3$export$9f17032d917177de)($a60c20066a20f256$export$51dc27a5ec2b16c0(from), $a60c20066a20f256$export$51dc27a5ec2b16c0(to));\n}\nvar $a60c20066a20f256$export$2e2bcd8739ae039 = {\n    abcToScientificNotation: $a60c20066a20f256$export$51dc27a5ec2b16c0,\n    scientificToAbcNotation: $a60c20066a20f256$export$583e55d9afced5e7,\n    tokenize: $a60c20066a20f256$export$660b2ee2d4fb4eff,\n    transpose: $a60c20066a20f256$export$9cb09a71b7d66923,\n    distance: $a60c20066a20f256$export$9f17032d917177de\n};\n\n\n// index.ts\n\nvar $5a80ecd22a0121bb$var$isArray = Array.isArray;\nfunction $5a80ecd22a0121bb$var$ascR(b, n) {\n    const a = [];\n    for(; n--; a[n] = n + b);\n    return a;\n}\nfunction $5a80ecd22a0121bb$var$descR(b, n) {\n    const a = [];\n    for(; n--; a[n] = b - n);\n    return a;\n}\nfunction $5a80ecd22a0121bb$export$d02631cccf789723(from, to) {\n    return from < to ? $5a80ecd22a0121bb$var$ascR(from, to - from + 1) : $5a80ecd22a0121bb$var$descR(from, from - to + 1);\n}\nfunction $5a80ecd22a0121bb$export$bb628a54ab399bc9(times, arr) {\n    const len = arr.length;\n    const n = (times % len + len) % len;\n    return arr.slice(n, len).concat(arr.slice(0, n));\n}\nfunction $5a80ecd22a0121bb$export$8e16b83750b44988(arr) {\n    return arr.filter((n)=>n === 0 || n);\n}\nfunction $5a80ecd22a0121bb$export$1d144f8b53617496(notes) {\n    const valid = notes.map((n)=>(0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(n)).filter((n)=>!n.empty);\n    return valid.sort((a, b)=>a.height - b.height).map((n)=>n.name);\n}\nfunction $5a80ecd22a0121bb$export$2a4e7add890e53e3(arr) {\n    return $5a80ecd22a0121bb$export$1d144f8b53617496(arr).filter((n, i, a)=>i === 0 || n !== a[i - 1]);\n}\nfunction $5a80ecd22a0121bb$export$448332262467e042(arr, rnd = Math.random) {\n    let i;\n    let t;\n    let m = arr.length;\n    while(m){\n        i = Math.floor(rnd() * m--);\n        t = arr[m];\n        arr[m] = arr[i];\n        arr[i] = t;\n    }\n    return arr;\n}\nfunction $5a80ecd22a0121bb$export$4567adbe5dd91621(arr) {\n    if (arr.length === 0) return [\n        []\n    ];\n    return $5a80ecd22a0121bb$export$4567adbe5dd91621(arr.slice(1)).reduce((acc, perm)=>{\n        return acc.concat(arr.map((e, pos)=>{\n            const newPerm = perm.slice();\n            newPerm.splice(pos, 0, arr[0]);\n            return newPerm;\n        }));\n    }, []);\n}\n\n\n// index.ts\n// index.ts\n// index.ts\n\n// index.ts\n// index.ts\nfunction $0d7cd0cdab616457$var$ascR(b, n) {\n    const a = [];\n    for(; n--; a[n] = n + b);\n    return a;\n}\nfunction $0d7cd0cdab616457$var$descR(b, n) {\n    const a = [];\n    for(; n--; a[n] = b - n);\n    return a;\n}\nfunction $0d7cd0cdab616457$export$d02631cccf789723(from, to) {\n    return from < to ? $0d7cd0cdab616457$var$ascR(from, to - from + 1) : $0d7cd0cdab616457$var$descR(from, from - to + 1);\n}\nfunction $0d7cd0cdab616457$export$bb628a54ab399bc9(times, arr) {\n    const len = arr.length;\n    const n = (times % len + len) % len;\n    return arr.slice(n, len).concat(arr.slice(0, n));\n}\nfunction $0d7cd0cdab616457$export$8e16b83750b44988(arr) {\n    return arr.filter((n)=>n === 0 || n);\n}\nfunction $0d7cd0cdab616457$export$448332262467e042(arr, rnd = Math.random) {\n    let i;\n    let t;\n    let m = arr.length;\n    while(m){\n        i = Math.floor(rnd() * m--);\n        t = arr[m];\n        arr[m] = arr[i];\n        arr[i] = t;\n    }\n    return arr;\n}\nfunction $0d7cd0cdab616457$export$4567adbe5dd91621(arr) {\n    if (arr.length === 0) return [\n        []\n    ];\n    return $0d7cd0cdab616457$export$4567adbe5dd91621(arr.slice(1)).reduce((acc, perm)=>{\n        return acc.concat(arr.map((e, pos)=>{\n            const newPerm = perm.slice();\n            newPerm.splice(pos, 0, arr[0]);\n            return newPerm;\n        }));\n    }, []);\n}\nvar $0d7cd0cdab616457$export$2e2bcd8739ae039 = {\n    compact: $0d7cd0cdab616457$export$8e16b83750b44988,\n    permutations: $0d7cd0cdab616457$export$4567adbe5dd91621,\n    range: $0d7cd0cdab616457$export$d02631cccf789723,\n    rotate: $0d7cd0cdab616457$export$bb628a54ab399bc9,\n    shuffle: $0d7cd0cdab616457$export$448332262467e042\n};\n\n\n\nvar $37ea67a5744539d1$export$b31835771c1cc4b0 = {\n    empty: true,\n    name: \"\",\n    setNum: 0,\n    chroma: \"000000000000\",\n    normalized: \"000000000000\",\n    intervals: []\n};\nvar $37ea67a5744539d1$var$setNumToChroma = (num2)=>Number(num2).toString(2);\nvar $37ea67a5744539d1$var$chromaToNumber = (chroma2)=>parseInt(chroma2, 2);\nvar $37ea67a5744539d1$var$REGEX = /^[01]{12}$/;\nfunction $37ea67a5744539d1$export$607555f22891e149(set) {\n    return $37ea67a5744539d1$var$REGEX.test(set);\n}\nvar $37ea67a5744539d1$var$isPcsetNum = (set)=>typeof set === \"number\" && set >= 0 && set <= 4095;\nvar $37ea67a5744539d1$var$isPcset = (set)=>set && $37ea67a5744539d1$export$607555f22891e149(set.chroma);\nvar $37ea67a5744539d1$var$cache = {\n    [$37ea67a5744539d1$export$b31835771c1cc4b0.chroma]: $37ea67a5744539d1$export$b31835771c1cc4b0\n};\nfunction $37ea67a5744539d1$export$3988ae62b71be9a3(src) {\n    const chroma2 = $37ea67a5744539d1$export$607555f22891e149(src) ? src : $37ea67a5744539d1$var$isPcsetNum(src) ? $37ea67a5744539d1$var$setNumToChroma(src) : Array.isArray(src) ? $37ea67a5744539d1$var$listToChroma(src) : $37ea67a5744539d1$var$isPcset(src) ? src.chroma : $37ea67a5744539d1$export$b31835771c1cc4b0.chroma;\n    return $37ea67a5744539d1$var$cache[chroma2] = $37ea67a5744539d1$var$cache[chroma2] || $37ea67a5744539d1$var$chromaToPcset(chroma2);\n}\nvar $37ea67a5744539d1$export$34757280087519e4 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"Pcset.pcset\", \"Pcset.get\", $37ea67a5744539d1$export$3988ae62b71be9a3);\nvar $37ea67a5744539d1$export$65e376726ced75b1 = (set)=>$37ea67a5744539d1$export$3988ae62b71be9a3(set).chroma;\nvar $37ea67a5744539d1$var$intervals = (set)=>$37ea67a5744539d1$export$3988ae62b71be9a3(set).intervals;\nvar $37ea67a5744539d1$var$num = (set)=>$37ea67a5744539d1$export$3988ae62b71be9a3(set).setNum;\nvar $37ea67a5744539d1$var$IVLS = [\n    \"1P\",\n    \"2m\",\n    \"2M\",\n    \"3m\",\n    \"3M\",\n    \"4P\",\n    \"5d\",\n    \"5P\",\n    \"6m\",\n    \"6M\",\n    \"7m\",\n    \"7M\"\n];\nfunction $37ea67a5744539d1$export$d2c8ed5314ca8436(chroma2) {\n    const intervals2 = [];\n    for(let i = 0; i < 12; i++)if (chroma2.charAt(i) === \"1\") intervals2.push($37ea67a5744539d1$var$IVLS[i]);\n    return intervals2;\n}\nfunction $37ea67a5744539d1$export$633e11f887c2fdc0() {\n    return (0, $0d7cd0cdab616457$export$d02631cccf789723)(2048, 4095).map($37ea67a5744539d1$var$setNumToChroma);\n}\nfunction $37ea67a5744539d1$export$4a6bdc0a840be00(set, normalize = true) {\n    const pcs = $37ea67a5744539d1$export$3988ae62b71be9a3(set);\n    const binary = pcs.chroma.split(\"\");\n    return (0, $0d7cd0cdab616457$export$8e16b83750b44988)(binary.map((_, i)=>{\n        const r = (0, $0d7cd0cdab616457$export$bb628a54ab399bc9)(i, binary);\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }));\n}\nfunction $37ea67a5744539d1$export$248d38f6296296c5(s1, s2) {\n    return $37ea67a5744539d1$export$3988ae62b71be9a3(s1).setNum === $37ea67a5744539d1$export$3988ae62b71be9a3(s2).setNum;\n}\nfunction $37ea67a5744539d1$export$2b09cdc61b8a3240(set) {\n    const s = $37ea67a5744539d1$export$3988ae62b71be9a3(set).setNum;\n    return (notes)=>{\n        const o = $37ea67a5744539d1$export$3988ae62b71be9a3(notes).setNum;\n        return s && s !== o && (o & s) === o;\n    };\n}\nfunction $37ea67a5744539d1$export$22c04563e192ea02(set) {\n    const s = $37ea67a5744539d1$export$3988ae62b71be9a3(set).setNum;\n    return (notes)=>{\n        const o = $37ea67a5744539d1$export$3988ae62b71be9a3(notes).setNum;\n        return s && s !== o && (o | s) === o;\n    };\n}\nfunction $37ea67a5744539d1$export$acd3ad1acd1348bc(set) {\n    const s = $37ea67a5744539d1$export$3988ae62b71be9a3(set);\n    return (noteName)=>{\n        const n = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(noteName);\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n    };\n}\nvar $37ea67a5744539d1$export$ee2e0f811dca1807 = $37ea67a5744539d1$export$acd3ad1acd1348bc;\nfunction $37ea67a5744539d1$export$3dea766d36a8935f(set) {\n    const isIncluded = $37ea67a5744539d1$export$acd3ad1acd1348bc(set);\n    return (notes)=>{\n        return notes.filter(isIncluded);\n    };\n}\nvar $37ea67a5744539d1$export$2e2bcd8739ae039 = {\n    get: $37ea67a5744539d1$export$3988ae62b71be9a3,\n    chroma: $37ea67a5744539d1$export$65e376726ced75b1,\n    num: $37ea67a5744539d1$var$num,\n    intervals: $37ea67a5744539d1$var$intervals,\n    chromas: $37ea67a5744539d1$export$633e11f887c2fdc0,\n    isSupersetOf: $37ea67a5744539d1$export$22c04563e192ea02,\n    isSubsetOf: $37ea67a5744539d1$export$2b09cdc61b8a3240,\n    isNoteIncludedIn: $37ea67a5744539d1$export$acd3ad1acd1348bc,\n    isEqual: $37ea67a5744539d1$export$248d38f6296296c5,\n    filter: $37ea67a5744539d1$export$3dea766d36a8935f,\n    modes: $37ea67a5744539d1$export$4a6bdc0a840be00,\n    pcset: $37ea67a5744539d1$export$34757280087519e4\n};\nfunction $37ea67a5744539d1$var$chromaRotations(chroma2) {\n    const binary = chroma2.split(\"\");\n    return binary.map((_, i)=>(0, $0d7cd0cdab616457$export$bb628a54ab399bc9)(i, binary).join(\"\"));\n}\nfunction $37ea67a5744539d1$var$chromaToPcset(chroma2) {\n    const setNum = $37ea67a5744539d1$var$chromaToNumber(chroma2);\n    const normalizedNum = $37ea67a5744539d1$var$chromaRotations(chroma2).map($37ea67a5744539d1$var$chromaToNumber).filter((n)=>n >= 2048).sort()[0];\n    const normalized = $37ea67a5744539d1$var$setNumToChroma(normalizedNum);\n    const intervals2 = $37ea67a5744539d1$export$d2c8ed5314ca8436(chroma2);\n    return {\n        empty: false,\n        name: \"\",\n        setNum: setNum,\n        chroma: chroma2,\n        normalized: normalized,\n        intervals: intervals2\n    };\n}\nfunction $37ea67a5744539d1$var$listToChroma(set) {\n    if (set.length === 0) return $37ea67a5744539d1$export$b31835771c1cc4b0.chroma;\n    let pitch;\n    const binary = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    for(let i = 0; i < set.length; i++){\n        pitch = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(set[i]);\n        if (pitch.empty) pitch = (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(set[i]);\n        if (!pitch.empty) binary[pitch.chroma] = 1;\n    }\n    return binary.join(\"\");\n}\n\n\n// data.ts\nvar $5facd99e7fcea85e$var$CHORDS = [\n    // ==Major==\n    [\n        \"1P 3M 5P\",\n        \"major\",\n        \"M ^  maj\"\n    ],\n    [\n        \"1P 3M 5P 7M\",\n        \"major seventh\",\n        \"maj7 \\u0394 ma7 M7 Maj7 ^7\"\n    ],\n    [\n        \"1P 3M 5P 7M 9M\",\n        \"major ninth\",\n        \"maj9 \\u03949 ^9\"\n    ],\n    [\n        \"1P 3M 5P 7M 9M 13M\",\n        \"major thirteenth\",\n        \"maj13 Maj13 ^13\"\n    ],\n    [\n        \"1P 3M 5P 6M\",\n        \"sixth\",\n        \"6 add6 add13 M6\"\n    ],\n    [\n        \"1P 3M 5P 6M 9M\",\n        \"sixth added ninth\",\n        \"6add9 6/9 69 M69\"\n    ],\n    [\n        \"1P 3M 6m 7M\",\n        \"major seventh flat sixth\",\n        \"M7b6 ^7b6\"\n    ],\n    [\n        \"1P 3M 5P 7M 11A\",\n        \"major seventh sharp eleventh\",\n        \"maj#4 \\u0394#4 \\u0394#11 M7#11 ^7#11 maj7#11\"\n    ],\n    // ==Minor==\n    // '''Normal'''\n    [\n        \"1P 3m 5P\",\n        \"minor\",\n        \"m min -\"\n    ],\n    [\n        \"1P 3m 5P 7m\",\n        \"minor seventh\",\n        \"m7 min7 mi7 -7\"\n    ],\n    [\n        \"1P 3m 5P 7M\",\n        \"minor/major seventh\",\n        \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -\\u03947 m\\u0394 -^7 -maj7\"\n    ],\n    [\n        \"1P 3m 5P 6M\",\n        \"minor sixth\",\n        \"m6 -6\"\n    ],\n    [\n        \"1P 3m 5P 7m 9M\",\n        \"minor ninth\",\n        \"m9 -9\"\n    ],\n    [\n        \"1P 3m 5P 7M 9M\",\n        \"minor/major ninth\",\n        \"mM9 mMaj9 -^9\"\n    ],\n    [\n        \"1P 3m 5P 7m 9M 11P\",\n        \"minor eleventh\",\n        \"m11 -11\"\n    ],\n    [\n        \"1P 3m 5P 7m 9M 13M\",\n        \"minor thirteenth\",\n        \"m13 -13\"\n    ],\n    // '''Diminished'''\n    [\n        \"1P 3m 5d\",\n        \"diminished\",\n        \"dim \\xb0 o\"\n    ],\n    [\n        \"1P 3m 5d 7d\",\n        \"diminished seventh\",\n        \"dim7 \\xb07 o7\"\n    ],\n    [\n        \"1P 3m 5d 7m\",\n        \"half-diminished\",\n        \"m7b5 \\xf8 -7b5 h7 h\"\n    ],\n    // ==Dominant/Seventh==\n    // '''Normal'''\n    [\n        \"1P 3M 5P 7m\",\n        \"dominant seventh\",\n        \"7 dom\"\n    ],\n    [\n        \"1P 3M 5P 7m 9M\",\n        \"dominant ninth\",\n        \"9\"\n    ],\n    [\n        \"1P 3M 5P 7m 9M 13M\",\n        \"dominant thirteenth\",\n        \"13\"\n    ],\n    [\n        \"1P 3M 5P 7m 11A\",\n        \"lydian dominant seventh\",\n        \"7#11 7#4\"\n    ],\n    // '''Altered'''\n    [\n        \"1P 3M 5P 7m 9m\",\n        \"dominant flat ninth\",\n        \"7b9\"\n    ],\n    [\n        \"1P 3M 5P 7m 9A\",\n        \"dominant sharp ninth\",\n        \"7#9\"\n    ],\n    [\n        \"1P 3M 7m 9m\",\n        \"altered\",\n        \"alt7\"\n    ],\n    // '''Suspended'''\n    [\n        \"1P 4P 5P\",\n        \"suspended fourth\",\n        \"sus4 sus\"\n    ],\n    [\n        \"1P 2M 5P\",\n        \"suspended second\",\n        \"sus2\"\n    ],\n    [\n        \"1P 4P 5P 7m\",\n        \"suspended fourth seventh\",\n        \"7sus4 7sus\"\n    ],\n    [\n        \"1P 5P 7m 9M 11P\",\n        \"eleventh\",\n        \"11\"\n    ],\n    [\n        \"1P 4P 5P 7m 9m\",\n        \"suspended fourth flat ninth\",\n        \"b9sus phryg 7b9sus 7b9sus4\"\n    ],\n    // ==Other==\n    [\n        \"1P 5P\",\n        \"fifth\",\n        \"5\"\n    ],\n    [\n        \"1P 3M 5A\",\n        \"augmented\",\n        \"aug + +5 ^#5\"\n    ],\n    [\n        \"1P 3m 5A\",\n        \"minor augmented\",\n        \"m#5 -#5 m+\"\n    ],\n    [\n        \"1P 3M 5A 7M\",\n        \"augmented seventh\",\n        \"maj7#5 maj7+5 +maj7 ^7#5\"\n    ],\n    [\n        \"1P 3M 5P 7M 9M 11A\",\n        \"major sharp eleventh (lydian)\",\n        \"maj9#11 \\u03949#11 ^9#11\"\n    ],\n    // ==Legacy==\n    [\n        \"1P 2M 4P 5P\",\n        \"\",\n        \"sus24 sus4add9\"\n    ],\n    [\n        \"1P 3M 5A 7M 9M\",\n        \"\",\n        \"maj9#5 Maj9#5\"\n    ],\n    [\n        \"1P 3M 5A 7m\",\n        \"\",\n        \"7#5 +7 7+ 7aug aug7\"\n    ],\n    [\n        \"1P 3M 5A 7m 9A\",\n        \"\",\n        \"7#5#9 7#9#5 7alt\"\n    ],\n    [\n        \"1P 3M 5A 7m 9M\",\n        \"\",\n        \"9#5 9+\"\n    ],\n    [\n        \"1P 3M 5A 7m 9M 11A\",\n        \"\",\n        \"9#5#11\"\n    ],\n    [\n        \"1P 3M 5A 7m 9m\",\n        \"\",\n        \"7#5b9 7b9#5\"\n    ],\n    [\n        \"1P 3M 5A 7m 9m 11A\",\n        \"\",\n        \"7#5b9#11\"\n    ],\n    [\n        \"1P 3M 5A 9A\",\n        \"\",\n        \"+add#9\"\n    ],\n    [\n        \"1P 3M 5A 9M\",\n        \"\",\n        \"M#5add9 +add9\"\n    ],\n    [\n        \"1P 3M 5P 6M 11A\",\n        \"\",\n        \"M6#11 M6b5 6#11 6b5\"\n    ],\n    [\n        \"1P 3M 5P 6M 7M 9M\",\n        \"\",\n        \"M7add13\"\n    ],\n    [\n        \"1P 3M 5P 6M 9M 11A\",\n        \"\",\n        \"69#11\"\n    ],\n    [\n        \"1P 3m 5P 6M 9M\",\n        \"\",\n        \"m69 -69\"\n    ],\n    [\n        \"1P 3M 5P 6m 7m\",\n        \"\",\n        \"7b6\"\n    ],\n    [\n        \"1P 3M 5P 7M 9A 11A\",\n        \"\",\n        \"maj7#9#11\"\n    ],\n    [\n        \"1P 3M 5P 7M 9M 11A 13M\",\n        \"\",\n        \"M13#11 maj13#11 M13+4 M13#4\"\n    ],\n    [\n        \"1P 3M 5P 7M 9m\",\n        \"\",\n        \"M7b9\"\n    ],\n    [\n        \"1P 3M 5P 7m 11A 13m\",\n        \"\",\n        \"7#11b13 7b5b13\"\n    ],\n    [\n        \"1P 3M 5P 7m 13M\",\n        \"\",\n        \"7add6 67 7add13\"\n    ],\n    [\n        \"1P 3M 5P 7m 9A 11A\",\n        \"\",\n        \"7#9#11 7b5#9 7#9b5\"\n    ],\n    [\n        \"1P 3M 5P 7m 9A 11A 13M\",\n        \"\",\n        \"13#9#11\"\n    ],\n    [\n        \"1P 3M 5P 7m 9A 11A 13m\",\n        \"\",\n        \"7#9#11b13\"\n    ],\n    [\n        \"1P 3M 5P 7m 9A 13M\",\n        \"\",\n        \"13#9\"\n    ],\n    [\n        \"1P 3M 5P 7m 9A 13m\",\n        \"\",\n        \"7#9b13\"\n    ],\n    [\n        \"1P 3M 5P 7m 9M 11A\",\n        \"\",\n        \"9#11 9+4 9#4\"\n    ],\n    [\n        \"1P 3M 5P 7m 9M 11A 13M\",\n        \"\",\n        \"13#11 13+4 13#4\"\n    ],\n    [\n        \"1P 3M 5P 7m 9M 11A 13m\",\n        \"\",\n        \"9#11b13 9b5b13\"\n    ],\n    [\n        \"1P 3M 5P 7m 9m 11A\",\n        \"\",\n        \"7b9#11 7b5b9 7b9b5\"\n    ],\n    [\n        \"1P 3M 5P 7m 9m 11A 13M\",\n        \"\",\n        \"13b9#11\"\n    ],\n    [\n        \"1P 3M 5P 7m 9m 11A 13m\",\n        \"\",\n        \"7b9b13#11 7b9#11b13 7b5b9b13\"\n    ],\n    [\n        \"1P 3M 5P 7m 9m 13M\",\n        \"\",\n        \"13b9\"\n    ],\n    [\n        \"1P 3M 5P 7m 9m 13m\",\n        \"\",\n        \"7b9b13\"\n    ],\n    [\n        \"1P 3M 5P 7m 9m 9A\",\n        \"\",\n        \"7b9#9\"\n    ],\n    [\n        \"1P 3M 5P 9M\",\n        \"\",\n        \"Madd9 2 add9 add2\"\n    ],\n    [\n        \"1P 3M 5P 9m\",\n        \"\",\n        \"Maddb9\"\n    ],\n    [\n        \"1P 3M 5d\",\n        \"\",\n        \"Mb5\"\n    ],\n    [\n        \"1P 3M 5d 6M 7m 9M\",\n        \"\",\n        \"13b5\"\n    ],\n    [\n        \"1P 3M 5d 7M\",\n        \"\",\n        \"M7b5\"\n    ],\n    [\n        \"1P 3M 5d 7M 9M\",\n        \"\",\n        \"M9b5\"\n    ],\n    [\n        \"1P 3M 5d 7m\",\n        \"\",\n        \"7b5\"\n    ],\n    [\n        \"1P 3M 5d 7m 9M\",\n        \"\",\n        \"9b5\"\n    ],\n    [\n        \"1P 3M 7m\",\n        \"\",\n        \"7no5\"\n    ],\n    [\n        \"1P 3M 7m 13m\",\n        \"\",\n        \"7b13\"\n    ],\n    [\n        \"1P 3M 7m 9M\",\n        \"\",\n        \"9no5\"\n    ],\n    [\n        \"1P 3M 7m 9M 13M\",\n        \"\",\n        \"13no5\"\n    ],\n    [\n        \"1P 3M 7m 9M 13m\",\n        \"\",\n        \"9b13\"\n    ],\n    [\n        \"1P 3m 4P 5P\",\n        \"\",\n        \"madd4\"\n    ],\n    [\n        \"1P 3m 5P 6m 7M\",\n        \"\",\n        \"mMaj7b6\"\n    ],\n    [\n        \"1P 3m 5P 6m 7M 9M\",\n        \"\",\n        \"mMaj9b6\"\n    ],\n    [\n        \"1P 3m 5P 7m 11P\",\n        \"\",\n        \"m7add11 m7add4\"\n    ],\n    [\n        \"1P 3m 5P 9M\",\n        \"\",\n        \"madd9\"\n    ],\n    [\n        \"1P 3m 5d 6M 7M\",\n        \"\",\n        \"o7M7\"\n    ],\n    [\n        \"1P 3m 5d 7M\",\n        \"\",\n        \"oM7\"\n    ],\n    [\n        \"1P 3m 6m 7M\",\n        \"\",\n        \"mb6M7\"\n    ],\n    [\n        \"1P 3m 6m 7m\",\n        \"\",\n        \"m7#5\"\n    ],\n    [\n        \"1P 3m 6m 7m 9M\",\n        \"\",\n        \"m9#5\"\n    ],\n    [\n        \"1P 3m 5A 7m 9M 11P\",\n        \"\",\n        \"m11A\"\n    ],\n    [\n        \"1P 3m 6m 9m\",\n        \"\",\n        \"mb6b9\"\n    ],\n    [\n        \"1P 2M 3m 5d 7m\",\n        \"\",\n        \"m9b5\"\n    ],\n    [\n        \"1P 4P 5A 7M\",\n        \"\",\n        \"M7#5sus4\"\n    ],\n    [\n        \"1P 4P 5A 7M 9M\",\n        \"\",\n        \"M9#5sus4\"\n    ],\n    [\n        \"1P 4P 5A 7m\",\n        \"\",\n        \"7#5sus4\"\n    ],\n    [\n        \"1P 4P 5P 7M\",\n        \"\",\n        \"M7sus4\"\n    ],\n    [\n        \"1P 4P 5P 7M 9M\",\n        \"\",\n        \"M9sus4\"\n    ],\n    [\n        \"1P 4P 5P 7m 9M\",\n        \"\",\n        \"9sus4 9sus\"\n    ],\n    [\n        \"1P 4P 5P 7m 9M 13M\",\n        \"\",\n        \"13sus4 13sus\"\n    ],\n    [\n        \"1P 4P 5P 7m 9m 13m\",\n        \"\",\n        \"7sus4b9b13 7b9b13sus4\"\n    ],\n    [\n        \"1P 4P 7m 10m\",\n        \"\",\n        \"4 quartal\"\n    ],\n    [\n        \"1P 5P 7m 9m 11P\",\n        \"\",\n        \"11b9\"\n    ]\n];\nvar $5facd99e7fcea85e$var$data_default = $5facd99e7fcea85e$var$CHORDS;\n// index.ts\nvar $5facd99e7fcea85e$var$NoChordType = {\n    ...(0, $37ea67a5744539d1$export$b31835771c1cc4b0),\n    name: \"\",\n    quality: \"Unknown\",\n    intervals: [],\n    aliases: []\n};\nvar $5facd99e7fcea85e$var$dictionary = [];\nvar $5facd99e7fcea85e$var$index = {};\nfunction $5facd99e7fcea85e$export$3988ae62b71be9a3(type) {\n    return $5facd99e7fcea85e$var$index[type] || $5facd99e7fcea85e$var$NoChordType;\n}\nvar $5facd99e7fcea85e$export$17fc6add839315a9 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"ChordType.chordType\", \"ChordType.get\", $5facd99e7fcea85e$export$3988ae62b71be9a3);\nfunction $5facd99e7fcea85e$export$e4b2ac9215619f8d() {\n    return $5facd99e7fcea85e$var$dictionary.map((chord)=>chord.name).filter((x)=>x);\n}\nfunction $5facd99e7fcea85e$export$47616e9f7f5fe113() {\n    return $5facd99e7fcea85e$var$dictionary.map((chord)=>chord.aliases[0]).filter((x)=>x);\n}\nfunction $5facd99e7fcea85e$export$ed97f33186d4b816() {\n    return Object.keys($5facd99e7fcea85e$var$index);\n}\nfunction $5facd99e7fcea85e$export$84bf76cd7afc7469() {\n    return $5facd99e7fcea85e$var$dictionary.slice();\n}\nvar $5facd99e7fcea85e$export$3e9f948b41964866 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"ChordType.entries\", \"ChordType.all\", $5facd99e7fcea85e$export$84bf76cd7afc7469);\nfunction $5facd99e7fcea85e$export$1cfc7aad5cb1833b() {\n    $5facd99e7fcea85e$var$dictionary = [];\n    $5facd99e7fcea85e$var$index = {};\n}\nfunction $5facd99e7fcea85e$export$e16d8520af44a096(intervals, aliases, fullName) {\n    const quality = $5facd99e7fcea85e$var$getQuality(intervals);\n    const chord = {\n        ...(0, $37ea67a5744539d1$export$3988ae62b71be9a3)(intervals),\n        name: fullName || \"\",\n        quality: quality,\n        intervals: intervals,\n        aliases: aliases\n    };\n    $5facd99e7fcea85e$var$dictionary.push(chord);\n    if (chord.name) $5facd99e7fcea85e$var$index[chord.name] = chord;\n    $5facd99e7fcea85e$var$index[chord.setNum] = chord;\n    $5facd99e7fcea85e$var$index[chord.chroma] = chord;\n    chord.aliases.forEach((alias)=>$5facd99e7fcea85e$export$44968e33aef80f19(chord, alias));\n}\nfunction $5facd99e7fcea85e$export$44968e33aef80f19(chord, alias) {\n    $5facd99e7fcea85e$var$index[alias] = chord;\n}\nfunction $5facd99e7fcea85e$var$getQuality(intervals) {\n    const has = (interval)=>intervals.indexOf(interval) !== -1;\n    return has(\"5A\") ? \"Augmented\" : has(\"3M\") ? \"Major\" : has(\"5d\") ? \"Diminished\" : has(\"3m\") ? \"Minor\" : \"Unknown\";\n}\n$5facd99e7fcea85e$var$data_default.forEach(([ivls, fullName, names2])=>$5facd99e7fcea85e$export$e16d8520af44a096(ivls.split(\" \"), names2.split(\" \"), fullName));\n$5facd99e7fcea85e$var$dictionary.sort((a, b)=>a.setNum - b.setNum);\nvar $5facd99e7fcea85e$export$2e2bcd8739ae039 = {\n    names: $5facd99e7fcea85e$export$e4b2ac9215619f8d,\n    symbols: $5facd99e7fcea85e$export$47616e9f7f5fe113,\n    get: $5facd99e7fcea85e$export$3988ae62b71be9a3,\n    all: $5facd99e7fcea85e$export$84bf76cd7afc7469,\n    add: $5facd99e7fcea85e$export$e16d8520af44a096,\n    removeAll: $5facd99e7fcea85e$export$1cfc7aad5cb1833b,\n    keys: $5facd99e7fcea85e$export$ed97f33186d4b816,\n    entries: // deprecated\n    $5facd99e7fcea85e$export$3e9f948b41964866,\n    chordType: $5facd99e7fcea85e$export$17fc6add839315a9\n};\n\n\n\n\nvar $c8ac599462e7da5f$var$namedSet = (notes)=>{\n    const pcToName = notes.reduce((record, n)=>{\n        const chroma = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(n).chroma;\n        if (chroma !== void 0) record[chroma] = record[chroma] || (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(n).name;\n        return record;\n    }, {});\n    return (chroma)=>pcToName[chroma];\n};\nfunction $c8ac599462e7da5f$export$17b446b869dad473(source, options = {}) {\n    const notes = source.map((n)=>(0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(n).pc).filter((x)=>x);\n    if ((0, $b16aee3da08f05ac$export$a92e4c44d367d0af).length === 0) return [];\n    const found = $c8ac599462e7da5f$var$findMatches(notes, 1, options);\n    return found.filter((chord)=>chord.weight).sort((a, b)=>b.weight - a.weight).map((chord)=>chord.name);\n}\nvar $c8ac599462e7da5f$var$BITMASK = {\n    // 3m 000100000000\n    // 3M 000010000000\n    anyThirds: 384,\n    // 5P 000000010000\n    perfectFifth: 16,\n    // 5d 000000100000\n    // 5A 000000001000\n    nonPerfectFifths: 40,\n    anySeventh: 3\n};\nvar $c8ac599462e7da5f$var$testChromaNumber = (bitmask)=>(chromaNumber)=>Boolean(chromaNumber & bitmask);\nvar $c8ac599462e7da5f$var$hasAnyThird = $c8ac599462e7da5f$var$testChromaNumber($c8ac599462e7da5f$var$BITMASK.anyThirds);\nvar $c8ac599462e7da5f$var$hasPerfectFifth = $c8ac599462e7da5f$var$testChromaNumber($c8ac599462e7da5f$var$BITMASK.perfectFifth);\nvar $c8ac599462e7da5f$var$hasAnySeventh = $c8ac599462e7da5f$var$testChromaNumber($c8ac599462e7da5f$var$BITMASK.anySeventh);\nvar $c8ac599462e7da5f$var$hasNonPerfectFifth = $c8ac599462e7da5f$var$testChromaNumber($c8ac599462e7da5f$var$BITMASK.nonPerfectFifths);\nfunction $c8ac599462e7da5f$var$hasAnyThirdAndPerfectFifthAndAnySeventh(chordType) {\n    const chromaNumber = parseInt(chordType.chroma, 2);\n    return $c8ac599462e7da5f$var$hasAnyThird(chromaNumber) && $c8ac599462e7da5f$var$hasPerfectFifth(chromaNumber) && $c8ac599462e7da5f$var$hasAnySeventh(chromaNumber);\n}\nfunction $c8ac599462e7da5f$var$withPerfectFifth(chroma) {\n    const chromaNumber = parseInt(chroma, 2);\n    return $c8ac599462e7da5f$var$hasNonPerfectFifth(chromaNumber) ? chroma : (chromaNumber | 16).toString(2);\n}\nfunction $c8ac599462e7da5f$var$findMatches(notes, weight, options) {\n    const tonic = notes[0];\n    const tonicChroma = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(tonic).chroma;\n    const noteName = $c8ac599462e7da5f$var$namedSet(notes);\n    const allModes = (0, $37ea67a5744539d1$export$4a6bdc0a840be00)(notes, false);\n    const found = [];\n    allModes.forEach((mode, index)=>{\n        const modeWithPerfectFifth = options.assumePerfectFifth && $c8ac599462e7da5f$var$withPerfectFifth(mode);\n        const chordTypes = (0, $5facd99e7fcea85e$export$84bf76cd7afc7469)().filter((chordType)=>{\n            if (options.assumePerfectFifth && $c8ac599462e7da5f$var$hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)) return chordType.chroma === modeWithPerfectFifth;\n            return chordType.chroma === mode;\n        });\n        chordTypes.forEach((chordType)=>{\n            const chordName = chordType.aliases[0];\n            const baseNote = noteName(index);\n            const isInversion = index !== tonicChroma;\n            if (isInversion) found.push({\n                weight: 0.5 * weight,\n                name: `${baseNote}${chordName}/${tonic}`\n            });\n            else found.push({\n                weight: 1 * weight,\n                name: `${baseNote}${chordName}`\n            });\n        });\n    });\n    return found;\n}\nvar $c8ac599462e7da5f$export$2e2bcd8739ae039 = {\n    detect: $c8ac599462e7da5f$export$17b446b869dad473\n};\n\n\n\n\n\n// index.ts\n\n\n// data.ts\nvar $98c1e925844fb606$var$SCALES = [\n    [\n        \"1P 2M 3M 5P 6M\",\n        \"major pentatonic\",\n        \"pentatonic\"\n    ],\n    [\n        \"1P 2M 3M 4P 5P 6M 7M\",\n        \"major\",\n        \"ionian\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 6m 7m\",\n        \"minor\",\n        \"aeolian\"\n    ],\n    [\n        \"1P 2M 3m 3M 5P 6M\",\n        \"major blues\"\n    ],\n    [\n        \"1P 3m 4P 5d 5P 7m\",\n        \"minor blues\",\n        \"blues\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 6M 7M\",\n        \"melodic minor\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 6m 7M\",\n        \"harmonic minor\"\n    ],\n    [\n        \"1P 2M 3M 4P 5P 6M 7m 7M\",\n        \"bebop\"\n    ],\n    [\n        \"1P 2M 3m 4P 5d 6m 6M 7M\",\n        \"diminished\",\n        \"whole-half diminished\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 6M 7m\",\n        \"dorian\"\n    ],\n    [\n        \"1P 2M 3M 4A 5P 6M 7M\",\n        \"lydian\"\n    ],\n    [\n        \"1P 2M 3M 4P 5P 6M 7m\",\n        \"mixolydian\",\n        \"dominant\"\n    ],\n    [\n        \"1P 2m 3m 4P 5P 6m 7m\",\n        \"phrygian\"\n    ],\n    [\n        \"1P 2m 3m 4P 5d 6m 7m\",\n        \"locrian\"\n    ],\n    [\n        \"1P 3M 4P 5P 7M\",\n        \"ionian pentatonic\"\n    ],\n    [\n        \"1P 3M 4P 5P 7m\",\n        \"mixolydian pentatonic\",\n        \"indian\"\n    ],\n    [\n        \"1P 2M 4P 5P 6M\",\n        \"ritusen\"\n    ],\n    [\n        \"1P 2M 4P 5P 7m\",\n        \"egyptian\"\n    ],\n    [\n        \"1P 3M 4P 5d 7m\",\n        \"neopolitan major pentatonic\"\n    ],\n    [\n        \"1P 3m 4P 5P 6m\",\n        \"vietnamese 1\"\n    ],\n    [\n        \"1P 2m 3m 5P 6m\",\n        \"pelog\"\n    ],\n    [\n        \"1P 2m 4P 5P 6m\",\n        \"kumoijoshi\"\n    ],\n    [\n        \"1P 2M 3m 5P 6m\",\n        \"hirajoshi\"\n    ],\n    [\n        \"1P 2m 4P 5d 7m\",\n        \"iwato\"\n    ],\n    [\n        \"1P 2m 4P 5P 7m\",\n        \"in-sen\"\n    ],\n    [\n        \"1P 3M 4A 5P 7M\",\n        \"lydian pentatonic\",\n        \"chinese\"\n    ],\n    [\n        \"1P 3m 4P 6m 7m\",\n        \"malkos raga\"\n    ],\n    [\n        \"1P 3m 4P 5d 7m\",\n        \"locrian pentatonic\",\n        \"minor seven flat five pentatonic\"\n    ],\n    [\n        \"1P 3m 4P 5P 7m\",\n        \"minor pentatonic\",\n        \"vietnamese 2\"\n    ],\n    [\n        \"1P 3m 4P 5P 6M\",\n        \"minor six pentatonic\"\n    ],\n    [\n        \"1P 2M 3m 5P 6M\",\n        \"flat three pentatonic\",\n        \"kumoi\"\n    ],\n    [\n        \"1P 2M 3M 5P 6m\",\n        \"flat six pentatonic\"\n    ],\n    [\n        \"1P 2m 3M 5P 6M\",\n        \"scriabin\"\n    ],\n    [\n        \"1P 3M 5d 6m 7m\",\n        \"whole tone pentatonic\"\n    ],\n    [\n        \"1P 3M 4A 5A 7M\",\n        \"lydian #5P pentatonic\"\n    ],\n    [\n        \"1P 3M 4A 5P 7m\",\n        \"lydian dominant pentatonic\"\n    ],\n    [\n        \"1P 3m 4P 5P 7M\",\n        \"minor #7M pentatonic\"\n    ],\n    [\n        \"1P 3m 4d 5d 7m\",\n        \"super locrian pentatonic\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 7M\",\n        \"minor hexatonic\"\n    ],\n    [\n        \"1P 2A 3M 5P 5A 7M\",\n        \"augmented\"\n    ],\n    [\n        \"1P 2M 4P 5P 6M 7m\",\n        \"piongio\"\n    ],\n    [\n        \"1P 2m 3M 4A 6M 7m\",\n        \"prometheus neopolitan\"\n    ],\n    [\n        \"1P 2M 3M 4A 6M 7m\",\n        \"prometheus\"\n    ],\n    [\n        \"1P 2m 3M 5d 6m 7m\",\n        \"mystery #1\"\n    ],\n    [\n        \"1P 2m 3M 4P 5A 6M\",\n        \"six tone symmetric\"\n    ],\n    [\n        \"1P 2M 3M 4A 5A 6A\",\n        \"whole tone\",\n        \"messiaen's mode #1\"\n    ],\n    [\n        \"1P 2m 4P 4A 5P 7M\",\n        \"messiaen's mode #5\"\n    ],\n    [\n        \"1P 2M 3M 4P 5d 6m 7m\",\n        \"locrian major\",\n        \"arabian\"\n    ],\n    [\n        \"1P 2m 3M 4A 5P 6m 7M\",\n        \"double harmonic lydian\"\n    ],\n    [\n        \"1P 2m 2A 3M 4A 6m 7m\",\n        \"altered\",\n        \"super locrian\",\n        \"diminished whole tone\",\n        \"pomeroy\"\n    ],\n    [\n        \"1P 2M 3m 4P 5d 6m 7m\",\n        \"locrian #2\",\n        \"half-diminished\",\n        \"aeolian b5\"\n    ],\n    [\n        \"1P 2M 3M 4P 5P 6m 7m\",\n        \"mixolydian b6\",\n        \"melodic minor fifth mode\",\n        \"hindu\"\n    ],\n    [\n        \"1P 2M 3M 4A 5P 6M 7m\",\n        \"lydian dominant\",\n        \"lydian b7\",\n        \"overtone\"\n    ],\n    [\n        \"1P 2M 3M 4A 5A 6M 7M\",\n        \"lydian augmented\"\n    ],\n    [\n        \"1P 2m 3m 4P 5P 6M 7m\",\n        \"dorian b2\",\n        \"phrygian #6\",\n        \"melodic minor second mode\"\n    ],\n    [\n        \"1P 2m 3m 4d 5d 6m 7d\",\n        \"ultralocrian\",\n        \"superlocrian bb7\",\n        \"superlocrian diminished\"\n    ],\n    [\n        \"1P 2m 3m 4P 5d 6M 7m\",\n        \"locrian 6\",\n        \"locrian natural 6\",\n        \"locrian sharp 6\"\n    ],\n    [\n        \"1P 2A 3M 4P 5P 5A 7M\",\n        \"augmented heptatonic\"\n    ],\n    [\n        \"1P 2M 3m 4A 5P 6M 7m\",\n        \"dorian #4\",\n        \"ukrainian dorian\",\n        \"romanian minor\",\n        \"altered dorian\"\n    ],\n    [\n        \"1P 2M 3m 4A 5P 6M 7M\",\n        \"lydian diminished\"\n    ],\n    [\n        \"1P 2M 3M 4A 5A 7m 7M\",\n        \"leading whole tone\"\n    ],\n    [\n        \"1P 2M 3M 4A 5P 6m 7m\",\n        \"lydian minor\"\n    ],\n    [\n        \"1P 2m 3M 4P 5P 6m 7m\",\n        \"phrygian dominant\",\n        \"spanish\",\n        \"phrygian major\"\n    ],\n    [\n        \"1P 2m 3m 4P 5P 6m 7M\",\n        \"balinese\"\n    ],\n    [\n        \"1P 2m 3m 4P 5P 6M 7M\",\n        \"neopolitan major\"\n    ],\n    [\n        \"1P 2M 3M 4P 5P 6m 7M\",\n        \"harmonic major\"\n    ],\n    [\n        \"1P 2m 3M 4P 5P 6m 7M\",\n        \"double harmonic major\",\n        \"gypsy\"\n    ],\n    [\n        \"1P 2M 3m 4A 5P 6m 7M\",\n        \"hungarian minor\"\n    ],\n    [\n        \"1P 2A 3M 4A 5P 6M 7m\",\n        \"hungarian major\"\n    ],\n    [\n        \"1P 2m 3M 4P 5d 6M 7m\",\n        \"oriental\"\n    ],\n    [\n        \"1P 2m 3m 3M 4A 5P 7m\",\n        \"flamenco\"\n    ],\n    [\n        \"1P 2m 3m 4A 5P 6m 7M\",\n        \"todi raga\"\n    ],\n    [\n        \"1P 2m 3M 4P 5d 6m 7M\",\n        \"persian\"\n    ],\n    [\n        \"1P 2m 3M 5d 6m 7m 7M\",\n        \"enigmatic\"\n    ],\n    [\n        \"1P 2M 3M 4P 5A 6M 7M\",\n        \"major augmented\",\n        \"major #5\",\n        \"ionian augmented\",\n        \"ionian #5\"\n    ],\n    [\n        \"1P 2A 3M 4A 5P 6M 7M\",\n        \"lydian #9\"\n    ],\n    [\n        \"1P 2m 2M 4P 4A 5P 6m 7M\",\n        \"messiaen's mode #4\"\n    ],\n    [\n        \"1P 2m 3M 4P 4A 5P 6m 7M\",\n        \"purvi raga\"\n    ],\n    [\n        \"1P 2m 3m 3M 4P 5P 6m 7m\",\n        \"spanish heptatonic\"\n    ],\n    [\n        \"1P 2M 3m 3M 4P 5P 6M 7m\",\n        \"bebop minor\"\n    ],\n    [\n        \"1P 2M 3M 4P 5P 5A 6M 7M\",\n        \"bebop major\"\n    ],\n    [\n        \"1P 2m 3m 4P 5d 5P 6m 7m\",\n        \"bebop locrian\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 6m 7m 7M\",\n        \"minor bebop\"\n    ],\n    [\n        \"1P 2M 3M 4P 5d 5P 6M 7M\",\n        \"ichikosucho\"\n    ],\n    [\n        \"1P 2M 3m 4P 5P 6m 6M 7M\",\n        \"minor six diminished\"\n    ],\n    [\n        \"1P 2m 3m 3M 4A 5P 6M 7m\",\n        \"half-whole diminished\",\n        \"dominant diminished\",\n        \"messiaen's mode #2\"\n    ],\n    [\n        \"1P 3m 3M 4P 5P 6M 7m 7M\",\n        \"kafi raga\"\n    ],\n    [\n        \"1P 2M 3M 4P 4A 5A 6A 7M\",\n        \"messiaen's mode #6\"\n    ],\n    [\n        \"1P 2M 3m 3M 4P 5d 5P 6M 7m\",\n        \"composite blues\"\n    ],\n    [\n        \"1P 2M 3m 3M 4A 5P 6m 7m 7M\",\n        \"messiaen's mode #3\"\n    ],\n    [\n        \"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\",\n        \"messiaen's mode #7\"\n    ],\n    [\n        \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\",\n        \"chromatic\"\n    ]\n];\nvar $98c1e925844fb606$var$data_default = $98c1e925844fb606$var$SCALES;\n// index.ts\nvar $98c1e925844fb606$export$799dbe5d40c297df = {\n    ...(0, $37ea67a5744539d1$export$b31835771c1cc4b0),\n    intervals: [],\n    aliases: []\n};\nvar $98c1e925844fb606$var$dictionary = [];\nvar $98c1e925844fb606$var$index = {};\nfunction $98c1e925844fb606$export$e4b2ac9215619f8d() {\n    return $98c1e925844fb606$var$dictionary.map((scale)=>scale.name);\n}\nfunction $98c1e925844fb606$export$3988ae62b71be9a3(type) {\n    return $98c1e925844fb606$var$index[type] || $98c1e925844fb606$export$799dbe5d40c297df;\n}\nvar $98c1e925844fb606$export$360f83db950721c5 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"ScaleDictionary.scaleType\", \"ScaleType.get\", $98c1e925844fb606$export$3988ae62b71be9a3);\nfunction $98c1e925844fb606$export$84bf76cd7afc7469() {\n    return $98c1e925844fb606$var$dictionary.slice();\n}\nvar $98c1e925844fb606$export$3e9f948b41964866 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"ScaleDictionary.entries\", \"ScaleType.all\", $98c1e925844fb606$export$84bf76cd7afc7469);\nfunction $98c1e925844fb606$export$ed97f33186d4b816() {\n    return Object.keys($98c1e925844fb606$var$index);\n}\nfunction $98c1e925844fb606$export$1cfc7aad5cb1833b() {\n    $98c1e925844fb606$var$dictionary = [];\n    $98c1e925844fb606$var$index = {};\n}\nfunction $98c1e925844fb606$export$e16d8520af44a096(intervals, name, aliases = []) {\n    const scale = {\n        ...(0, $37ea67a5744539d1$export$3988ae62b71be9a3)(intervals),\n        name: name,\n        intervals: intervals,\n        aliases: aliases\n    };\n    $98c1e925844fb606$var$dictionary.push(scale);\n    $98c1e925844fb606$var$index[scale.name] = scale;\n    $98c1e925844fb606$var$index[scale.setNum] = scale;\n    $98c1e925844fb606$var$index[scale.chroma] = scale;\n    scale.aliases.forEach((alias)=>$98c1e925844fb606$export$44968e33aef80f19(scale, alias));\n    return scale;\n}\nfunction $98c1e925844fb606$export$44968e33aef80f19(scale, alias) {\n    $98c1e925844fb606$var$index[alias] = scale;\n}\n$98c1e925844fb606$var$data_default.forEach(([ivls, name, ...aliases])=>$98c1e925844fb606$export$e16d8520af44a096(ivls.split(\" \"), name, aliases));\nvar $98c1e925844fb606$export$2e2bcd8739ae039 = {\n    names: $98c1e925844fb606$export$e4b2ac9215619f8d,\n    get: $98c1e925844fb606$export$3988ae62b71be9a3,\n    all: $98c1e925844fb606$export$84bf76cd7afc7469,\n    add: $98c1e925844fb606$export$e16d8520af44a096,\n    removeAll: $98c1e925844fb606$export$1cfc7aad5cb1833b,\n    keys: $98c1e925844fb606$export$ed97f33186d4b816,\n    entries: $98c1e925844fb606$export$3e9f948b41964866,\n    scaleType: $98c1e925844fb606$export$360f83db950721c5\n};\n\n\nvar $f81c1a5b3e66f6db$var$NoChord = {\n    empty: true,\n    name: \"\",\n    symbol: \"\",\n    root: \"\",\n    rootDegree: 0,\n    type: \"\",\n    tonic: null,\n    setNum: NaN,\n    quality: \"Unknown\",\n    chroma: \"\",\n    normalized: \"\",\n    aliases: [],\n    notes: [],\n    intervals: []\n};\nfunction $f81c1a5b3e66f6db$export$660b2ee2d4fb4eff(name) {\n    const [letter, acc, oct, type] = (0, $b16aee3da08f05ac$export$e13422ef2dcdcd5d)(name);\n    if (letter === \"\") return [\n        \"\",\n        name\n    ];\n    if (letter === \"A\" && type === \"ug\") return [\n        \"\",\n        \"aug\"\n    ];\n    return [\n        letter + acc,\n        oct + type\n    ];\n}\nfunction $f81c1a5b3e66f6db$export$3988ae62b71be9a3(src) {\n    if (src === \"\") return $f81c1a5b3e66f6db$var$NoChord;\n    if (Array.isArray(src) && src.length === 2) return $f81c1a5b3e66f6db$export$300a0543e7b0d2ac(src[1], src[0]);\n    else {\n        const [tonic, type] = $f81c1a5b3e66f6db$export$660b2ee2d4fb4eff(src);\n        const chord2 = $f81c1a5b3e66f6db$export$300a0543e7b0d2ac(type, tonic);\n        return chord2.empty ? $f81c1a5b3e66f6db$export$300a0543e7b0d2ac(src) : chord2;\n    }\n}\nfunction $f81c1a5b3e66f6db$export$300a0543e7b0d2ac(typeName, optionalTonic, optionalRoot) {\n    const type = (0, $5facd99e7fcea85e$export$3988ae62b71be9a3)(typeName);\n    const tonic = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(optionalTonic || \"\");\n    const root = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(optionalRoot || \"\");\n    if (type.empty || optionalTonic && tonic.empty || optionalRoot && root.empty) return $f81c1a5b3e66f6db$var$NoChord;\n    const rootInterval = (0, $498eab776f7de6b3$export$9f17032d917177de)(tonic.pc, root.pc);\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\n    if (!root.empty && !rootDegree) return $f81c1a5b3e66f6db$var$NoChord;\n    const intervals = Array.from(type.intervals);\n    for(let i = 1; i < rootDegree; i++){\n        const num = intervals[0][0];\n        const quality = intervals[0][1];\n        const newNum = parseInt(num, 10) + 7;\n        intervals.push(`${newNum}${quality}`);\n        intervals.shift();\n    }\n    const notes = tonic.empty ? [] : intervals.map((i)=>(0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, i));\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc}`;\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"}`;\n    return {\n        ...type,\n        name: name,\n        symbol: symbol,\n        type: type.name,\n        root: root.name,\n        intervals: intervals,\n        rootDegree: rootDegree,\n        tonic: tonic.name,\n        notes: notes\n    };\n}\nvar $f81c1a5b3e66f6db$export$2f59edec6dc7ae8d = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"Chord.chord\", \"Chord.get\", $f81c1a5b3e66f6db$export$3988ae62b71be9a3);\nfunction $f81c1a5b3e66f6db$export$9cb09a71b7d66923(chordName, interval) {\n    const [tonic, type] = $f81c1a5b3e66f6db$export$660b2ee2d4fb4eff(chordName);\n    if (!tonic) return chordName;\n    return (0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, interval) + type;\n}\nfunction $f81c1a5b3e66f6db$export$8275719bd2e76c56(name) {\n    const s = $f81c1a5b3e66f6db$export$3988ae62b71be9a3(name);\n    const isChordIncluded = (0, $37ea67a5744539d1$export$22c04563e192ea02)(s.chroma);\n    return (0, $98c1e925844fb606$export$84bf76cd7afc7469)().filter((scale)=>isChordIncluded(scale.chroma)).map((scale)=>scale.name);\n}\nfunction $f81c1a5b3e66f6db$export$44d74886d11a5ca2(chordName) {\n    const s = $f81c1a5b3e66f6db$export$3988ae62b71be9a3(chordName);\n    const isSuperset = (0, $37ea67a5744539d1$export$22c04563e192ea02)(s.chroma);\n    return (0, $5facd99e7fcea85e$export$84bf76cd7afc7469)().filter((chord2)=>isSuperset(chord2.chroma)).map((chord2)=>s.tonic + chord2.aliases[0]);\n}\nfunction $f81c1a5b3e66f6db$export$447808b60b7559bd(chordName) {\n    const s = $f81c1a5b3e66f6db$export$3988ae62b71be9a3(chordName);\n    const isSubset = (0, $37ea67a5744539d1$export$2b09cdc61b8a3240)(s.chroma);\n    return (0, $5facd99e7fcea85e$export$84bf76cd7afc7469)().filter((chord2)=>isSubset(chord2.chroma)).map((chord2)=>s.tonic + chord2.aliases[0]);\n}\nfunction $f81c1a5b3e66f6db$export$41fc368e1a942b97(chordName) {\n    const { intervals: intervals, tonic: tonic } = $f81c1a5b3e66f6db$export$3988ae62b71be9a3(chordName);\n    const transpose2 = (0, $498eab776f7de6b3$export$96bb437d3e6675d)(intervals, tonic);\n    return (degree)=>degree ? transpose2(degree > 0 ? degree - 1 : degree) : \"\";\n}\nfunction $f81c1a5b3e66f6db$export$be3f796aed065412(chordName) {\n    const { intervals: intervals, tonic: tonic } = $f81c1a5b3e66f6db$export$3988ae62b71be9a3(chordName);\n    return (0, $498eab776f7de6b3$export$96bb437d3e6675d)(intervals, tonic);\n}\nvar $f81c1a5b3e66f6db$export$2e2bcd8739ae039 = {\n    getChord: $f81c1a5b3e66f6db$export$300a0543e7b0d2ac,\n    get: $f81c1a5b3e66f6db$export$3988ae62b71be9a3,\n    detect: $c8ac599462e7da5f$export$17b446b869dad473,\n    chordScales: $f81c1a5b3e66f6db$export$8275719bd2e76c56,\n    extended: $f81c1a5b3e66f6db$export$44d74886d11a5ca2,\n    reduced: $f81c1a5b3e66f6db$export$447808b60b7559bd,\n    tokenize: $f81c1a5b3e66f6db$export$660b2ee2d4fb4eff,\n    transpose: $f81c1a5b3e66f6db$export$9cb09a71b7d66923,\n    degrees: $f81c1a5b3e66f6db$export$41fc368e1a942b97,\n    steps: $f81c1a5b3e66f6db$export$be3f796aed065412,\n    chord: // deprecate\n    $f81c1a5b3e66f6db$export$2f59edec6dc7ae8d\n};\n\n\n\n\n\n// data.ts\nvar $7bd229a179f92add$var$DATA = [\n    [\n        0.125,\n        \"dl\",\n        [\n            \"large\",\n            \"duplex longa\",\n            \"maxima\",\n            \"octuple\",\n            \"octuple whole\"\n        ]\n    ],\n    [\n        0.25,\n        \"l\",\n        [\n            \"long\",\n            \"longa\"\n        ]\n    ],\n    [\n        0.5,\n        \"d\",\n        [\n            \"double whole\",\n            \"double\",\n            \"breve\"\n        ]\n    ],\n    [\n        1,\n        \"w\",\n        [\n            \"whole\",\n            \"semibreve\"\n        ]\n    ],\n    [\n        2,\n        \"h\",\n        [\n            \"half\",\n            \"minim\"\n        ]\n    ],\n    [\n        4,\n        \"q\",\n        [\n            \"quarter\",\n            \"crotchet\"\n        ]\n    ],\n    [\n        8,\n        \"e\",\n        [\n            \"eighth\",\n            \"quaver\"\n        ]\n    ],\n    [\n        16,\n        \"s\",\n        [\n            \"sixteenth\",\n            \"semiquaver\"\n        ]\n    ],\n    [\n        32,\n        \"t\",\n        [\n            \"thirty-second\",\n            \"demisemiquaver\"\n        ]\n    ],\n    [\n        64,\n        \"sf\",\n        [\n            \"sixty-fourth\",\n            \"hemidemisemiquaver\"\n        ]\n    ],\n    [\n        128,\n        \"h\",\n        [\n            \"hundred twenty-eighth\"\n        ]\n    ],\n    [\n        256,\n        \"th\",\n        [\n            \"two hundred fifty-sixth\"\n        ]\n    ]\n];\nvar $7bd229a179f92add$var$data_default = $7bd229a179f92add$var$DATA;\n// index.ts\nvar $7bd229a179f92add$var$VALUES = [];\n$7bd229a179f92add$var$data_default.forEach(([denominator, shorthand, names2])=>$7bd229a179f92add$var$add(denominator, shorthand, names2));\nvar $7bd229a179f92add$var$NoDuration = {\n    empty: true,\n    name: \"\",\n    value: 0,\n    fraction: [\n        0,\n        0\n    ],\n    shorthand: \"\",\n    dots: \"\",\n    names: []\n};\nfunction $7bd229a179f92add$export$e4b2ac9215619f8d() {\n    return $7bd229a179f92add$var$VALUES.reduce((names2, duration)=>{\n        duration.names.forEach((name)=>names2.push(name));\n        return names2;\n    }, []);\n}\nfunction $7bd229a179f92add$export$648f2124b45d7105() {\n    return $7bd229a179f92add$var$VALUES.map((dur)=>dur.shorthand);\n}\nvar $7bd229a179f92add$var$REGEX = /^([^.]+)(\\.*)$/;\nfunction $7bd229a179f92add$export$3988ae62b71be9a3(name) {\n    const [_, simple, dots] = $7bd229a179f92add$var$REGEX.exec(name) || [];\n    const base = $7bd229a179f92add$var$VALUES.find((dur)=>dur.shorthand === simple || dur.names.includes(simple));\n    if (!base) return $7bd229a179f92add$var$NoDuration;\n    const fraction2 = $7bd229a179f92add$var$calcDots(base.fraction, dots.length);\n    const value2 = fraction2[0] / fraction2[1];\n    return {\n        ...base,\n        name: name,\n        dots: dots,\n        value: value2,\n        fraction: fraction2\n    };\n}\nvar $7bd229a179f92add$export$2ab9a8f9f1186f14 = (name)=>$7bd229a179f92add$export$3988ae62b71be9a3(name).value;\nvar $7bd229a179f92add$export$7f34ce79760854f7 = (name)=>$7bd229a179f92add$export$3988ae62b71be9a3(name).fraction;\nvar $7bd229a179f92add$export$2e2bcd8739ae039 = {\n    names: $7bd229a179f92add$export$e4b2ac9215619f8d,\n    shorthands: $7bd229a179f92add$export$648f2124b45d7105,\n    get: $7bd229a179f92add$export$3988ae62b71be9a3,\n    value: $7bd229a179f92add$export$2ab9a8f9f1186f14,\n    fraction: $7bd229a179f92add$export$7f34ce79760854f7\n};\nfunction $7bd229a179f92add$var$add(denominator, shorthand, names2) {\n    $7bd229a179f92add$var$VALUES.push({\n        empty: false,\n        dots: \"\",\n        name: \"\",\n        value: 1 / denominator,\n        fraction: denominator < 1 ? [\n            1 / denominator,\n            1\n        ] : [\n            1,\n            denominator\n        ],\n        shorthand: shorthand,\n        names: names2\n    });\n}\nfunction $7bd229a179f92add$var$calcDots(fraction2, dots) {\n    const pow = Math.pow(2, dots);\n    let numerator = fraction2[0] * pow;\n    let denominator = fraction2[1] * pow;\n    const base = numerator;\n    for(let i = 0; i < dots; i++)numerator += base / Math.pow(2, i + 1);\n    while(numerator % 2 === 0 && denominator % 2 === 0){\n        numerator /= 2;\n        denominator /= 2;\n    }\n    return [\n        numerator,\n        denominator\n    ];\n}\n\n\n// index.ts\n\nfunction $4b0d2415abde5810$export$e4b2ac9215619f8d() {\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\nvar $4b0d2415abde5810$export$3988ae62b71be9a3 = (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84);\nvar $4b0d2415abde5810$export$a8ff84c12d48cfa6 = (name2)=>(0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(name2).name;\nvar $4b0d2415abde5810$export$e36da636a01ffefa = (name2)=>(0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(name2).semitones;\nvar $4b0d2415abde5810$export$a1999145e4dc1468 = (name2)=>(0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(name2).q;\nvar $4b0d2415abde5810$export$61cc6a0be4938a2a = (name2)=>(0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(name2).num;\nfunction $4b0d2415abde5810$export$798b53621063651(name2) {\n    const i = (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(name2);\n    return i.empty ? \"\" : i.simple + i.q;\n}\nfunction $4b0d2415abde5810$export$6897c284b6f9f4dc(name2) {\n    const i = (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(name2);\n    if (i.empty) return \"\";\n    const step = (7 - i.step) % 7;\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n    return (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)({\n        step: step,\n        alt: alt,\n        oct: i.oct,\n        dir: i.dir\n    }).name;\n}\nvar $4b0d2415abde5810$var$IN = [\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7\n];\nvar $4b0d2415abde5810$var$IQ = \"P m M m M P d P m M m M\".split(\" \");\nfunction $4b0d2415abde5810$export$5c8051842873a5a3(semitones2) {\n    const d = semitones2 < 0 ? -1 : 1;\n    const n = Math.abs(semitones2);\n    const c = n % 12;\n    const o = Math.floor(n / 12);\n    return d * ($4b0d2415abde5810$var$IN[c] + 7 * o) + $4b0d2415abde5810$var$IQ[c];\n}\nvar $4b0d2415abde5810$export$9f17032d917177de = (0, $498eab776f7de6b3$export$9f17032d917177de);\nvar $4b0d2415abde5810$export$e16d8520af44a096 = $4b0d2415abde5810$var$combinator((a, b)=>[\n        a[0] + b[0],\n        a[1] + b[1]\n    ]);\nvar $4b0d2415abde5810$export$7e94865d7b880c63 = (interval)=>(other)=>$4b0d2415abde5810$export$e16d8520af44a096(interval, other);\nvar $4b0d2415abde5810$export$17f62d5a607df485 = $4b0d2415abde5810$var$combinator((a, b)=>[\n        a[0] - b[0],\n        a[1] - b[1]\n    ]);\nfunction $4b0d2415abde5810$export$c458777fb4e1fde(interval, fifths) {\n    const ivl = $4b0d2415abde5810$export$3988ae62b71be9a3(interval);\n    if (ivl.empty) return \"\";\n    const [nFifths, nOcts, dir] = ivl.coord;\n    return (0, $4e01aabfc377cdb3$export$41be0c142b835bde)([\n        nFifths + fifths,\n        nOcts,\n        dir\n    ]).name;\n}\nvar $4b0d2415abde5810$export$2e2bcd8739ae039 = {\n    names: $4b0d2415abde5810$export$e4b2ac9215619f8d,\n    get: $4b0d2415abde5810$export$3988ae62b71be9a3,\n    name: $4b0d2415abde5810$export$a8ff84c12d48cfa6,\n    num: $4b0d2415abde5810$export$61cc6a0be4938a2a,\n    semitones: $4b0d2415abde5810$export$e36da636a01ffefa,\n    quality: $4b0d2415abde5810$export$a1999145e4dc1468,\n    fromSemitones: $4b0d2415abde5810$export$5c8051842873a5a3,\n    distance: $4b0d2415abde5810$export$9f17032d917177de,\n    invert: $4b0d2415abde5810$export$6897c284b6f9f4dc,\n    simplify: $4b0d2415abde5810$export$798b53621063651,\n    add: $4b0d2415abde5810$export$e16d8520af44a096,\n    addTo: $4b0d2415abde5810$export$7e94865d7b880c63,\n    substract: $4b0d2415abde5810$export$17f62d5a607df485,\n    transposeFifths: $4b0d2415abde5810$export$c458777fb4e1fde\n};\nfunction $4b0d2415abde5810$var$combinator(fn) {\n    return (a, b)=>{\n        const coordA = (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(a).coord;\n        const coordB = (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(b).coord;\n        if (coordA && coordB) {\n            const coord = fn(coordA, coordB);\n            return (0, $4e01aabfc377cdb3$export$41be0c142b835bde)(coord).name;\n        }\n    };\n}\n\n\n// index.ts\n\n// index.ts\n\n// index.ts\n\nfunction $690087a1c13c7e3a$export$b54942607181e884(arg) {\n    return +arg >= 0 && +arg <= 127;\n}\nfunction $690087a1c13c7e3a$export$2a741832e0386ba(note) {\n    if ($690087a1c13c7e3a$export$b54942607181e884(note)) return +note;\n    const n = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(note);\n    return n.empty ? null : n.midi;\n}\nfunction $690087a1c13c7e3a$export$720ade5756761fb2(midi, tuning = 440) {\n    return Math.pow(2, (midi - 69) / 12) * tuning;\n}\nvar $690087a1c13c7e3a$var$L2 = Math.log(2);\nvar $690087a1c13c7e3a$var$L440 = Math.log(440);\nfunction $690087a1c13c7e3a$export$d8a1dfb1aed8c184(freq) {\n    const v = 12 * (Math.log(freq) - $690087a1c13c7e3a$var$L440) / $690087a1c13c7e3a$var$L2 + 69;\n    return Math.round(v * 100) / 100;\n}\nvar $690087a1c13c7e3a$var$SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nvar $690087a1c13c7e3a$var$FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\nfunction $690087a1c13c7e3a$export$7e7b29fd85fbefb6(midi, options = {}) {\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n    midi = Math.round(midi);\n    const pcs = options.sharps === true ? $690087a1c13c7e3a$var$SHARPS : $690087a1c13c7e3a$var$FLATS;\n    const pc = pcs[midi % 12];\n    if (options.pitchClass) return pc;\n    const o = Math.floor(midi / 12) - 1;\n    return pc + o;\n}\nfunction $690087a1c13c7e3a$export$65e376726ced75b1(midi) {\n    return midi % 12;\n}\nfunction $690087a1c13c7e3a$var$pcsetFromChroma(chroma2) {\n    return chroma2.split(\"\").reduce((pcset2, val, index)=>{\n        if (index < 12 && val === \"1\") pcset2.push(index);\n        return pcset2;\n    }, []);\n}\nfunction $690087a1c13c7e3a$var$pcsetFromMidi(midi) {\n    return midi.map($690087a1c13c7e3a$export$65e376726ced75b1).sort((a, b)=>a - b).filter((n, i, a)=>i === 0 || n !== a[i - 1]);\n}\nfunction $690087a1c13c7e3a$export$34757280087519e4(notes) {\n    return Array.isArray(notes) ? $690087a1c13c7e3a$var$pcsetFromMidi(notes) : $690087a1c13c7e3a$var$pcsetFromChroma(notes);\n}\nfunction $690087a1c13c7e3a$export$f384e449993f77e0(notes) {\n    const set = $690087a1c13c7e3a$export$34757280087519e4(notes);\n    return (midi)=>{\n        const ch = $690087a1c13c7e3a$export$65e376726ced75b1(midi);\n        for(let i = 0; i < 12; i++){\n            if (set.includes(ch + i)) return midi + i;\n            if (set.includes(ch - i)) return midi - i;\n        }\n        return void 0;\n    };\n}\nfunction $690087a1c13c7e3a$export$eb92ddb00c32db41(notes, tonic) {\n    const set = $690087a1c13c7e3a$export$34757280087519e4(notes);\n    const len = set.length;\n    return (step)=>{\n        const index = step < 0 ? (len - -step % len) % len : step % len;\n        const octaves = Math.floor(step / len);\n        return set[index] + octaves * 12 + tonic;\n    };\n}\nfunction $690087a1c13c7e3a$export$3302827fdefde34d(notes, tonic) {\n    const steps = $690087a1c13c7e3a$export$eb92ddb00c32db41(notes, tonic);\n    return (degree)=>{\n        if (degree === 0) return void 0;\n        return steps(degree > 0 ? degree - 1 : degree);\n    };\n}\nvar $690087a1c13c7e3a$export$2e2bcd8739ae039 = {\n    chroma: $690087a1c13c7e3a$export$65e376726ced75b1,\n    freqToMidi: $690087a1c13c7e3a$export$d8a1dfb1aed8c184,\n    isMidi: $690087a1c13c7e3a$export$b54942607181e884,\n    midiToFreq: $690087a1c13c7e3a$export$720ade5756761fb2,\n    midiToNoteName: $690087a1c13c7e3a$export$7e7b29fd85fbefb6,\n    pcsetNearest: $690087a1c13c7e3a$export$f384e449993f77e0,\n    pcset: $690087a1c13c7e3a$export$34757280087519e4,\n    pcsetDegrees: $690087a1c13c7e3a$export$3302827fdefde34d,\n    pcsetSteps: $690087a1c13c7e3a$export$eb92ddb00c32db41,\n    toMidi: $690087a1c13c7e3a$export$2a741832e0386ba\n};\n\n\nvar $fb522e20fe91ebd8$var$NAMES = [\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"A\",\n    \"B\"\n];\nvar $fb522e20fe91ebd8$var$toName = (n)=>n.name;\nvar $fb522e20fe91ebd8$var$onlyNotes = (array)=>array.map((0, $b16aee3da08f05ac$export$a92e4c44d367d0af)).filter((n)=>!n.empty);\nfunction $fb522e20fe91ebd8$export$e4b2ac9215619f8d(array) {\n    if (array === void 0) return $fb522e20fe91ebd8$var$NAMES.slice();\n    else if (!Array.isArray(array)) return [];\n    else return $fb522e20fe91ebd8$var$onlyNotes(array).map($fb522e20fe91ebd8$var$toName);\n}\nvar $fb522e20fe91ebd8$export$3988ae62b71be9a3 = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af);\nvar $fb522e20fe91ebd8$export$a8ff84c12d48cfa6 = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).name;\nvar $fb522e20fe91ebd8$export$6a0d76e9328e90c6 = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).pc;\nvar $fb522e20fe91ebd8$export$247fbb51fd948fd9 = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).acc;\nvar $fb522e20fe91ebd8$export$b50136c97e7d5ebf = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).oct;\nvar $fb522e20fe91ebd8$export$f4b3135d43fb03d5 = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).midi;\nvar $fb522e20fe91ebd8$export$8b37c28a89a20fdc = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).freq;\nvar $fb522e20fe91ebd8$export$65e376726ced75b1 = (note)=>$fb522e20fe91ebd8$export$3988ae62b71be9a3(note).chroma;\nfunction $fb522e20fe91ebd8$export$b7b28d8262b5f469(midi2) {\n    return (0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)(midi2);\n}\nfunction $fb522e20fe91ebd8$export$8b46ea0b45c98b81(freq2) {\n    return (0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)((0, $690087a1c13c7e3a$export$d8a1dfb1aed8c184)(freq2));\n}\nfunction $fb522e20fe91ebd8$export$964c72f0e0cd34cf(freq2) {\n    return (0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)((0, $690087a1c13c7e3a$export$d8a1dfb1aed8c184)(freq2), {\n        sharps: true\n    });\n}\nfunction $fb522e20fe91ebd8$export$d4c3dec1e6dea13f(midi2) {\n    return (0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)(midi2, {\n        sharps: true\n    });\n}\nvar $fb522e20fe91ebd8$export$9cb09a71b7d66923 = (0, $498eab776f7de6b3$export$9cb09a71b7d66923);\nvar $fb522e20fe91ebd8$export$72451b88a72ad9c2 = (0, $498eab776f7de6b3$export$9cb09a71b7d66923);\nvar $fb522e20fe91ebd8$export$6c59dde81502ecb3 = (interval)=>(note)=>$fb522e20fe91ebd8$export$9cb09a71b7d66923(note, interval);\nvar $fb522e20fe91ebd8$export$7bb7544f6e7e02b5 = $fb522e20fe91ebd8$export$6c59dde81502ecb3;\nvar $fb522e20fe91ebd8$export$1ddad39ccf93d6d1 = (note)=>(interval)=>$fb522e20fe91ebd8$export$9cb09a71b7d66923(note, interval);\nvar $fb522e20fe91ebd8$export$979d73cbf0b25a9c = $fb522e20fe91ebd8$export$1ddad39ccf93d6d1;\nfunction $fb522e20fe91ebd8$export$c458777fb4e1fde(noteName, fifths) {\n    return $fb522e20fe91ebd8$export$9cb09a71b7d66923(noteName, [\n        fifths,\n        0\n    ]);\n}\nvar $fb522e20fe91ebd8$export$5412deef76c39753 = $fb522e20fe91ebd8$export$c458777fb4e1fde;\nfunction $fb522e20fe91ebd8$export$da15bfad0b647d29(noteName, octaves) {\n    return $fb522e20fe91ebd8$export$9cb09a71b7d66923(noteName, [\n        0,\n        octaves\n    ]);\n}\nvar $fb522e20fe91ebd8$export$fcb633242ef15540 = (a, b)=>a.height - b.height;\nvar $fb522e20fe91ebd8$export$4fa3190a997c3d8f = (a, b)=>b.height - a.height;\nfunction $fb522e20fe91ebd8$export$e9efbb73ed0e3d9f(notes, comparator) {\n    comparator = comparator || $fb522e20fe91ebd8$export$fcb633242ef15540;\n    return $fb522e20fe91ebd8$var$onlyNotes(notes).sort(comparator).map($fb522e20fe91ebd8$var$toName);\n}\nfunction $fb522e20fe91ebd8$export$65290542b01f7f88(notes) {\n    return $fb522e20fe91ebd8$export$e9efbb73ed0e3d9f(notes, $fb522e20fe91ebd8$export$fcb633242ef15540).filter((n, i, a)=>i === 0 || n !== a[i - 1]);\n}\nvar $fb522e20fe91ebd8$export$798b53621063651 = (noteName)=>{\n    const note = $fb522e20fe91ebd8$export$3988ae62b71be9a3(noteName);\n    if (note.empty) return \"\";\n    return (0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)(note.midi || note.chroma, {\n        sharps: note.alt > 0,\n        pitchClass: note.midi === null\n    });\n};\nfunction $fb522e20fe91ebd8$export$25596f5ac1eb56e4(noteName, destName) {\n    const src = $fb522e20fe91ebd8$export$3988ae62b71be9a3(noteName);\n    if (src.empty) return \"\";\n    const dest = $fb522e20fe91ebd8$export$3988ae62b71be9a3(destName || (0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true\n    }));\n    if (dest.empty || dest.chroma !== src.chroma) return \"\";\n    if (src.oct === void 0) return dest.pc;\n    const srcChroma = src.chroma - src.alt;\n    const destChroma = dest.chroma - dest.alt;\n    const destOctOffset = srcChroma > 11 || destChroma < 0 ? -1 : srcChroma < 0 || destChroma > 11 ? 1 : 0;\n    const destOct = src.oct + destOctOffset;\n    return dest.pc + destOct;\n}\nvar $fb522e20fe91ebd8$export$2e2bcd8739ae039 = {\n    names: $fb522e20fe91ebd8$export$e4b2ac9215619f8d,\n    get: $fb522e20fe91ebd8$export$3988ae62b71be9a3,\n    name: $fb522e20fe91ebd8$export$a8ff84c12d48cfa6,\n    pitchClass: $fb522e20fe91ebd8$export$6a0d76e9328e90c6,\n    accidentals: $fb522e20fe91ebd8$export$247fbb51fd948fd9,\n    octave: $fb522e20fe91ebd8$export$b50136c97e7d5ebf,\n    midi: $fb522e20fe91ebd8$export$f4b3135d43fb03d5,\n    ascending: $fb522e20fe91ebd8$export$fcb633242ef15540,\n    descending: $fb522e20fe91ebd8$export$4fa3190a997c3d8f,\n    sortedNames: $fb522e20fe91ebd8$export$e9efbb73ed0e3d9f,\n    sortedUniqNames: $fb522e20fe91ebd8$export$65290542b01f7f88,\n    fromMidi: $fb522e20fe91ebd8$export$b7b28d8262b5f469,\n    fromMidiSharps: $fb522e20fe91ebd8$export$d4c3dec1e6dea13f,\n    freq: $fb522e20fe91ebd8$export$8b37c28a89a20fdc,\n    fromFreq: $fb522e20fe91ebd8$export$8b46ea0b45c98b81,\n    fromFreqSharps: $fb522e20fe91ebd8$export$964c72f0e0cd34cf,\n    chroma: $fb522e20fe91ebd8$export$65e376726ced75b1,\n    transpose: $fb522e20fe91ebd8$export$9cb09a71b7d66923,\n    tr: $fb522e20fe91ebd8$export$72451b88a72ad9c2,\n    transposeBy: $fb522e20fe91ebd8$export$6c59dde81502ecb3,\n    trBy: $fb522e20fe91ebd8$export$7bb7544f6e7e02b5,\n    transposeFrom: $fb522e20fe91ebd8$export$1ddad39ccf93d6d1,\n    trFrom: $fb522e20fe91ebd8$export$979d73cbf0b25a9c,\n    transposeFifths: $fb522e20fe91ebd8$export$c458777fb4e1fde,\n    transposeOctaves: $fb522e20fe91ebd8$export$da15bfad0b647d29,\n    trFifths: $fb522e20fe91ebd8$export$5412deef76c39753,\n    simplify: $fb522e20fe91ebd8$export$798b53621063651,\n    enharmonic: $fb522e20fe91ebd8$export$25596f5ac1eb56e4\n};\n\n\n// index.ts\n\nvar $e8ecee31aa3e3634$var$NoRomanNumeral = {\n    empty: true,\n    name: \"\",\n    chordType: \"\"\n};\nvar $e8ecee31aa3e3634$var$cache = {};\nfunction $e8ecee31aa3e3634$export$3988ae62b71be9a3(src) {\n    return typeof src === \"string\" ? $e8ecee31aa3e3634$var$cache[src] || ($e8ecee31aa3e3634$var$cache[src] = $e8ecee31aa3e3634$var$parse(src)) : typeof src === \"number\" ? $e8ecee31aa3e3634$export$3988ae62b71be9a3($e8ecee31aa3e3634$var$NAMES[src] || \"\") : (0, $c1fc50133d2a8115$export$3a746b746d570840)(src) ? $e8ecee31aa3e3634$var$fromPitch(src) : (0, $6afb6a04609a1abf$export$745137f0b0c9a0b3)(src) ? $e8ecee31aa3e3634$export$3988ae62b71be9a3(src.name) : $e8ecee31aa3e3634$var$NoRomanNumeral;\n}\nvar $e8ecee31aa3e3634$var$romanNumeral = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", $e8ecee31aa3e3634$export$3988ae62b71be9a3);\nfunction $e8ecee31aa3e3634$export$e4b2ac9215619f8d(major = true) {\n    return (major ? $e8ecee31aa3e3634$var$NAMES : $e8ecee31aa3e3634$var$NAMES_MINOR).slice();\n}\nfunction $e8ecee31aa3e3634$var$fromPitch(pitch) {\n    return $e8ecee31aa3e3634$export$3988ae62b71be9a3((0, $b16aee3da08f05ac$export$fe2c2edbd7417985)(pitch.alt) + $e8ecee31aa3e3634$var$NAMES[pitch.step]);\n}\nvar $e8ecee31aa3e3634$var$REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\nfunction $e8ecee31aa3e3634$export$660b2ee2d4fb4eff(str) {\n    return $e8ecee31aa3e3634$var$REGEX.exec(str) || [\n        \"\",\n        \"\",\n        \"\",\n        \"\"\n    ];\n}\nvar $e8ecee31aa3e3634$var$ROMANS = \"I II III IV V VI VII\";\nvar $e8ecee31aa3e3634$var$NAMES = $e8ecee31aa3e3634$var$ROMANS.split(\" \");\nvar $e8ecee31aa3e3634$var$NAMES_MINOR = $e8ecee31aa3e3634$var$ROMANS.toLowerCase().split(\" \");\nfunction $e8ecee31aa3e3634$var$parse(src) {\n    const [name, acc, roman, chordType] = $e8ecee31aa3e3634$export$660b2ee2d4fb4eff(src);\n    if (!roman) return $e8ecee31aa3e3634$var$NoRomanNumeral;\n    const upperRoman = roman.toUpperCase();\n    const step = $e8ecee31aa3e3634$var$NAMES.indexOf(upperRoman);\n    const alt = (0, $b16aee3da08f05ac$export$8f7077a2780017bf)(acc);\n    const dir = 1;\n    return {\n        empty: false,\n        name: name,\n        roman: roman,\n        interval: (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)({\n            step: step,\n            alt: alt,\n            dir: dir\n        }).name,\n        acc: acc,\n        chordType: chordType,\n        alt: alt,\n        step: step,\n        major: roman === upperRoman,\n        oct: 0,\n        dir: dir\n    };\n}\nvar $e8ecee31aa3e3634$export$2e2bcd8739ae039 = {\n    names: $e8ecee31aa3e3634$export$e4b2ac9215619f8d,\n    get: $e8ecee31aa3e3634$export$3988ae62b71be9a3,\n    romanNumeral: $e8ecee31aa3e3634$var$romanNumeral\n};\n\n\nvar $a1b4698f8fe59d53$var$Empty = Object.freeze([]);\nvar $a1b4698f8fe59d53$var$NoKey = {\n    type: \"major\",\n    tonic: \"\",\n    alteration: 0,\n    keySignature: \"\"\n};\nvar $a1b4698f8fe59d53$var$NoKeyScale = {\n    tonic: \"\",\n    grades: $a1b4698f8fe59d53$var$Empty,\n    intervals: $a1b4698f8fe59d53$var$Empty,\n    scale: $a1b4698f8fe59d53$var$Empty,\n    triads: $a1b4698f8fe59d53$var$Empty,\n    chords: $a1b4698f8fe59d53$var$Empty,\n    chordsHarmonicFunction: $a1b4698f8fe59d53$var$Empty,\n    chordScales: $a1b4698f8fe59d53$var$Empty\n};\nvar $a1b4698f8fe59d53$var$NoMajorKey = {\n    ...$a1b4698f8fe59d53$var$NoKey,\n    ...$a1b4698f8fe59d53$var$NoKeyScale,\n    type: \"major\",\n    minorRelative: \"\",\n    scale: $a1b4698f8fe59d53$var$Empty,\n    secondaryDominants: $a1b4698f8fe59d53$var$Empty,\n    secondaryDominantsMinorRelative: $a1b4698f8fe59d53$var$Empty,\n    substituteDominants: $a1b4698f8fe59d53$var$Empty,\n    substituteDominantsMinorRelative: $a1b4698f8fe59d53$var$Empty\n};\nvar $a1b4698f8fe59d53$var$NoMinorKey = {\n    ...$a1b4698f8fe59d53$var$NoKey,\n    type: \"minor\",\n    relativeMajor: \"\",\n    natural: $a1b4698f8fe59d53$var$NoKeyScale,\n    harmonic: $a1b4698f8fe59d53$var$NoKeyScale,\n    melodic: $a1b4698f8fe59d53$var$NoKeyScale\n};\nvar $a1b4698f8fe59d53$var$mapScaleToType = (scale, list, sep = \"\")=>list.map((type, i)=>`${scale[i]}${sep}${type}`);\nfunction $a1b4698f8fe59d53$var$keyScale(grades, triads, chords, harmonicFunctions, chordScales) {\n    return (tonic)=>{\n        const intervals = grades.map((gr)=>(0, $e8ecee31aa3e3634$export$3988ae62b71be9a3)(gr).interval || \"\");\n        const scale = intervals.map((interval)=>(0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, interval));\n        return {\n            tonic: tonic,\n            grades: grades,\n            intervals: intervals,\n            scale: scale,\n            triads: $a1b4698f8fe59d53$var$mapScaleToType(scale, triads),\n            chords: $a1b4698f8fe59d53$var$mapScaleToType(scale, chords),\n            chordsHarmonicFunction: harmonicFunctions.slice(),\n            chordScales: $a1b4698f8fe59d53$var$mapScaleToType(scale, chordScales, \" \")\n        };\n    };\n}\nvar $a1b4698f8fe59d53$var$distInFifths = (from, to)=>{\n    const f = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(from);\n    const t = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(to);\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\nvar $a1b4698f8fe59d53$var$MajorScale = $a1b4698f8fe59d53$var$keyScale(\"I II III IV V VI VII\".split(\" \"), \" m m   m dim\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\nvar $a1b4698f8fe59d53$var$NaturalScale = $a1b4698f8fe59d53$var$keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m dim  m m  \".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\nvar $a1b4698f8fe59d53$var$HarmonicScale = $a1b4698f8fe59d53$var$keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"m dim aug m   dim\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\nvar $a1b4698f8fe59d53$var$MelodicScale = $a1b4698f8fe59d53$var$keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m m aug   dim dim\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D  \".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\nfunction $a1b4698f8fe59d53$export$d48f63383d800bd(tonic) {\n    const pc = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(tonic).pc;\n    if (!pc) return $a1b4698f8fe59d53$var$NoMajorKey;\n    const keyScale2 = $a1b4698f8fe59d53$var$MajorScale(pc);\n    const alteration = $a1b4698f8fe59d53$var$distInFifths(\"C\", pc);\n    const romanInTonic = (src)=>{\n        const r = (0, $e8ecee31aa3e3634$export$3988ae62b71be9a3)(src);\n        if (r.empty) return \"\";\n        return (0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, r.interval) + r.chordType;\n    };\n    return {\n        ...keyScale2,\n        type: \"major\",\n        minorRelative: (0, $498eab776f7de6b3$export$9cb09a71b7d66923)(pc, \"-3m\"),\n        alteration: alteration,\n        keySignature: (0, $b16aee3da08f05ac$export$fe2c2edbd7417985)(alteration),\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\".split(\" \").map(romanInTonic),\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\".split(\" \").map(romanInTonic),\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\".split(\" \").map(romanInTonic)\n    };\n}\nfunction $a1b4698f8fe59d53$export$4172d894a27c3abe(tnc) {\n    const pc = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(tnc).pc;\n    if (!pc) return $a1b4698f8fe59d53$var$NoMinorKey;\n    const alteration = $a1b4698f8fe59d53$var$distInFifths(\"C\", pc) - 3;\n    return {\n        type: \"minor\",\n        tonic: pc,\n        relativeMajor: (0, $498eab776f7de6b3$export$9cb09a71b7d66923)(pc, \"3m\"),\n        alteration: alteration,\n        keySignature: (0, $b16aee3da08f05ac$export$fe2c2edbd7417985)(alteration),\n        natural: $a1b4698f8fe59d53$var$NaturalScale(pc),\n        harmonic: $a1b4698f8fe59d53$var$HarmonicScale(pc),\n        melodic: $a1b4698f8fe59d53$var$MelodicScale(pc)\n    };\n}\nfunction $a1b4698f8fe59d53$export$7a525a3a811fc6f9(sig) {\n    if (typeof sig === \"number\") return (0, $fb522e20fe91ebd8$export$c458777fb4e1fde)(\"C\", sig);\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) return (0, $fb522e20fe91ebd8$export$c458777fb4e1fde)(\"C\", (0, $b16aee3da08f05ac$export$8f7077a2780017bf)(sig));\n    return null;\n}\nvar $a1b4698f8fe59d53$export$2e2bcd8739ae039 = {\n    majorKey: $a1b4698f8fe59d53$export$d48f63383d800bd,\n    majorTonicFromKeySignature: $a1b4698f8fe59d53$export$7a525a3a811fc6f9,\n    minorKey: $a1b4698f8fe59d53$export$4172d894a27c3abe\n};\n\n\n\n// index.ts\n\n\n\n\n\nvar $5011c5099ae685ec$var$MODES = [\n    [\n        0,\n        2773,\n        0,\n        \"ionian\",\n        \"\",\n        \"Maj7\",\n        \"major\"\n    ],\n    [\n        1,\n        2902,\n        2,\n        \"dorian\",\n        \"m\",\n        \"m7\"\n    ],\n    [\n        2,\n        3418,\n        4,\n        \"phrygian\",\n        \"m\",\n        \"m7\"\n    ],\n    [\n        3,\n        2741,\n        -1,\n        \"lydian\",\n        \"\",\n        \"Maj7\"\n    ],\n    [\n        4,\n        2774,\n        1,\n        \"mixolydian\",\n        \"\",\n        \"7\"\n    ],\n    [\n        5,\n        2906,\n        3,\n        \"aeolian\",\n        \"m\",\n        \"m7\",\n        \"minor\"\n    ],\n    [\n        6,\n        3434,\n        5,\n        \"locrian\",\n        \"dim\",\n        \"m7b5\"\n    ]\n];\nvar $5011c5099ae685ec$var$NoMode = {\n    ...(0, $37ea67a5744539d1$export$b31835771c1cc4b0),\n    name: \"\",\n    alt: 0,\n    modeNum: NaN,\n    triad: \"\",\n    seventh: \"\",\n    aliases: []\n};\nvar $5011c5099ae685ec$var$modes = $5011c5099ae685ec$var$MODES.map($5011c5099ae685ec$var$toMode);\nvar $5011c5099ae685ec$var$index = {};\n$5011c5099ae685ec$var$modes.forEach((mode2)=>{\n    $5011c5099ae685ec$var$index[mode2.name] = mode2;\n    mode2.aliases.forEach((alias)=>{\n        $5011c5099ae685ec$var$index[alias] = mode2;\n    });\n});\nfunction $5011c5099ae685ec$export$3988ae62b71be9a3(name) {\n    return typeof name === \"string\" ? $5011c5099ae685ec$var$index[name.toLowerCase()] || $5011c5099ae685ec$var$NoMode : name && name.name ? $5011c5099ae685ec$export$3988ae62b71be9a3(name.name) : $5011c5099ae685ec$var$NoMode;\n}\nvar $5011c5099ae685ec$export$549ff81930776885 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"Mode.mode\", \"Mode.get\", $5011c5099ae685ec$export$3988ae62b71be9a3);\nfunction $5011c5099ae685ec$export$84bf76cd7afc7469() {\n    return $5011c5099ae685ec$var$modes.slice();\n}\nvar $5011c5099ae685ec$export$3e9f948b41964866 = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"Mode.mode\", \"Mode.all\", $5011c5099ae685ec$export$84bf76cd7afc7469);\nfunction $5011c5099ae685ec$export$e4b2ac9215619f8d() {\n    return $5011c5099ae685ec$var$modes.map((mode2)=>mode2.name);\n}\nfunction $5011c5099ae685ec$var$toMode(mode2) {\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode2;\n    const aliases = alias ? [\n        alias\n    ] : [];\n    const chroma = Number(setNum).toString(2);\n    const intervals = (0, $98c1e925844fb606$export$3988ae62b71be9a3)(name).intervals;\n    return {\n        empty: false,\n        intervals: intervals,\n        modeNum: modeNum,\n        chroma: chroma,\n        normalized: chroma,\n        name: name,\n        setNum: setNum,\n        alt: alt,\n        triad: triad,\n        seventh: seventh,\n        aliases: aliases\n    };\n}\nfunction $5011c5099ae685ec$export$fff9cb9cb797a870(modeName, tonic) {\n    return $5011c5099ae685ec$export$3988ae62b71be9a3(modeName).intervals.map((ivl)=>(0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, ivl));\n}\nfunction $5011c5099ae685ec$var$chords(chords2) {\n    return (modeName, tonic)=>{\n        const mode2 = $5011c5099ae685ec$export$3988ae62b71be9a3(modeName);\n        if (mode2.empty) return [];\n        const triads2 = (0, $0d7cd0cdab616457$export$bb628a54ab399bc9)(mode2.modeNum, chords2);\n        const tonics = mode2.intervals.map((i)=>(0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, i));\n        return triads2.map((triad, i)=>tonics[i] + triad);\n    };\n}\nvar $5011c5099ae685ec$export$a70797fc9302c9a3 = $5011c5099ae685ec$var$chords($5011c5099ae685ec$var$MODES.map((x)=>x[4]));\nvar $5011c5099ae685ec$export$e68a1c7defff4f5f = $5011c5099ae685ec$var$chords($5011c5099ae685ec$var$MODES.map((x)=>x[5]));\nfunction $5011c5099ae685ec$export$9f17032d917177de(destination, source) {\n    const from = $5011c5099ae685ec$export$3988ae62b71be9a3(source);\n    const to = $5011c5099ae685ec$export$3988ae62b71be9a3(destination);\n    if (from.empty || to.empty) return \"\";\n    return (0, $4b0d2415abde5810$export$798b53621063651)((0, $4b0d2415abde5810$export$c458777fb4e1fde)(\"1P\", to.alt - from.alt));\n}\nfunction $5011c5099ae685ec$export$d9149c603ac44e46(destination, source, tonic) {\n    return (0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, $5011c5099ae685ec$export$9f17032d917177de(destination, source));\n}\nvar $5011c5099ae685ec$export$2e2bcd8739ae039 = {\n    get: $5011c5099ae685ec$export$3988ae62b71be9a3,\n    names: $5011c5099ae685ec$export$e4b2ac9215619f8d,\n    all: $5011c5099ae685ec$export$84bf76cd7afc7469,\n    distance: $5011c5099ae685ec$export$9f17032d917177de,\n    relativeTonic: $5011c5099ae685ec$export$d9149c603ac44e46,\n    notes: $5011c5099ae685ec$export$fff9cb9cb797a870,\n    triads: $5011c5099ae685ec$export$a70797fc9302c9a3,\n    seventhChords: $5011c5099ae685ec$export$e68a1c7defff4f5f,\n    entries: $5011c5099ae685ec$export$3e9f948b41964866,\n    mode: $5011c5099ae685ec$export$549ff81930776885\n};\n\n\n\n\n// index.ts\n\n\n\nfunction $94b958d9bf45f500$export$de0ed9b99d8c2026(tonic, chords) {\n    const romanNumerals = chords.map((0, $e8ecee31aa3e3634$export$3988ae62b71be9a3));\n    return romanNumerals.map((rn)=>(0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, (0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(rn)) + rn.chordType);\n}\nfunction $94b958d9bf45f500$export$e6162391d1469136(tonic, chords) {\n    return chords.map((chord)=>{\n        const [note, chordType] = (0, $f81c1a5b3e66f6db$export$660b2ee2d4fb4eff)(chord);\n        const intervalName = (0, $498eab776f7de6b3$export$9f17032d917177de)(tonic, note);\n        const roman = (0, $e8ecee31aa3e3634$export$3988ae62b71be9a3)((0, $4e01aabfc377cdb3$export$3174cdbf0a0cbc84)(intervalName));\n        return roman.name + chordType;\n    });\n}\nvar $94b958d9bf45f500$export$2e2bcd8739ae039 = {\n    fromRomanNumerals: $94b958d9bf45f500$export$de0ed9b99d8c2026,\n    toRomanNumerals: $94b958d9bf45f500$export$e6162391d1469136\n};\n\n\n// index.ts\n\n\nfunction $eaf30445c003b2c4$export$b7a508fa8dae59fc(notes) {\n    const midi = (0, $0d7cd0cdab616457$export$8e16b83750b44988)(notes.map((note)=>typeof note === \"number\" ? note : (0, $690087a1c13c7e3a$export$2a741832e0386ba)(note)));\n    if (!notes.length || midi.length !== notes.length) return [];\n    return midi.reduce((result, note)=>{\n        const last = result[result.length - 1];\n        return result.concat((0, $0d7cd0cdab616457$export$d02631cccf789723)(last, note).slice(1));\n    }, [\n        midi[0]\n    ]);\n}\nfunction $eaf30445c003b2c4$export$b5a8cfeb040bfcea(notes, options) {\n    return $eaf30445c003b2c4$export$b7a508fa8dae59fc(notes).map((midi)=>(0, $690087a1c13c7e3a$export$7e7b29fd85fbefb6)(midi, options));\n}\nvar $eaf30445c003b2c4$export$2e2bcd8739ae039 = {\n    numeric: $eaf30445c003b2c4$export$b7a508fa8dae59fc,\n    chromatic: $eaf30445c003b2c4$export$b5a8cfeb040bfcea\n};\n\n\n\n// index.ts\n\n\n\n\n\n\nvar $5b22c3b78aa339bc$var$NoScale = {\n    empty: true,\n    name: \"\",\n    type: \"\",\n    tonic: null,\n    setNum: NaN,\n    chroma: \"\",\n    normalized: \"\",\n    aliases: [],\n    notes: [],\n    intervals: []\n};\nfunction $5b22c3b78aa339bc$export$660b2ee2d4fb4eff(name) {\n    if (typeof name !== \"string\") return [\n        \"\",\n        \"\"\n    ];\n    const i = name.indexOf(\" \");\n    const tonic = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(name.substring(0, i));\n    if (tonic.empty) {\n        const n = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(name);\n        return n.empty ? [\n            \"\",\n            name\n        ] : [\n            n.name,\n            \"\"\n        ];\n    }\n    const type = name.substring(tonic.name.length + 1);\n    return [\n        tonic.name,\n        type.length ? type : \"\"\n    ];\n}\nvar $5b22c3b78aa339bc$export$e4b2ac9215619f8d = (0, $98c1e925844fb606$export$e4b2ac9215619f8d);\nfunction $5b22c3b78aa339bc$export$3988ae62b71be9a3(src) {\n    const tokens = Array.isArray(src) ? src : $5b22c3b78aa339bc$export$660b2ee2d4fb4eff(src);\n    const tonic = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(tokens[0]).name;\n    const st = (0, $98c1e925844fb606$export$3988ae62b71be9a3)(tokens[1]);\n    if (st.empty) return $5b22c3b78aa339bc$var$NoScale;\n    const type = st.name;\n    const notes = tonic ? st.intervals.map((i)=>(0, $498eab776f7de6b3$export$9cb09a71b7d66923)(tonic, i)) : [];\n    const name = tonic ? tonic + \" \" + type : type;\n    return {\n        ...st,\n        name: name,\n        type: type,\n        tonic: tonic,\n        notes: notes\n    };\n}\nvar $5b22c3b78aa339bc$export$dcdf75081b88279d = (0, $6afb6a04609a1abf$export$b680e6b2c82f8c2f)(\"Scale.scale\", \"Scale.get\", $5b22c3b78aa339bc$export$3988ae62b71be9a3);\nfunction $5b22c3b78aa339bc$export$17b446b869dad473(notes, options = {}) {\n    const notesChroma = (0, $37ea67a5744539d1$export$65e376726ced75b1)(notes);\n    const tonic = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(options.tonic ?? notes[0] ?? \"\");\n    const tonicChroma = tonic.chroma;\n    if (tonicChroma === void 0) return [];\n    const pitchClasses = notesChroma.split(\"\");\n    pitchClasses[tonicChroma] = \"1\";\n    const scaleChroma = (0, $0d7cd0cdab616457$export$bb628a54ab399bc9)(tonicChroma, pitchClasses).join(\"\");\n    const match = (0, $98c1e925844fb606$export$84bf76cd7afc7469)().find((scaleType)=>scaleType.chroma === scaleChroma);\n    const results = [];\n    if (match) results.push(tonic.name + \" \" + match.name);\n    if (options.match === \"exact\") return results;\n    $5b22c3b78aa339bc$export$44d74886d11a5ca2(scaleChroma).forEach((scaleName)=>{\n        results.push(tonic.name + \" \" + scaleName);\n    });\n    return results;\n}\nfunction $5b22c3b78aa339bc$export$80b44fd4031a15fe(name) {\n    const s = $5b22c3b78aa339bc$export$3988ae62b71be9a3(name);\n    const inScale = (0, $37ea67a5744539d1$export$2b09cdc61b8a3240)(s.chroma);\n    return (0, $5facd99e7fcea85e$export$84bf76cd7afc7469)().filter((chord)=>inScale(chord.chroma)).map((chord)=>chord.aliases[0]);\n}\nfunction $5b22c3b78aa339bc$export$44d74886d11a5ca2(name) {\n    const chroma2 = (0, $37ea67a5744539d1$export$607555f22891e149)(name) ? name : $5b22c3b78aa339bc$export$3988ae62b71be9a3(name).chroma;\n    const isSuperset = (0, $37ea67a5744539d1$export$22c04563e192ea02)(chroma2);\n    return (0, $98c1e925844fb606$export$84bf76cd7afc7469)().filter((scale2)=>isSuperset(scale2.chroma)).map((scale2)=>scale2.name);\n}\nfunction $5b22c3b78aa339bc$export$447808b60b7559bd(name) {\n    const isSubset = (0, $37ea67a5744539d1$export$2b09cdc61b8a3240)($5b22c3b78aa339bc$export$3988ae62b71be9a3(name).chroma);\n    return (0, $98c1e925844fb606$export$84bf76cd7afc7469)().filter((scale2)=>isSubset(scale2.chroma)).map((scale2)=>scale2.name);\n}\nfunction $5b22c3b78aa339bc$export$fe544ea4685fdc99(notes) {\n    const pcset = notes.map((n)=>(0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(n).pc).filter((x)=>x);\n    const tonic = pcset[0];\n    const scale2 = (0, $fb522e20fe91ebd8$export$65290542b01f7f88)(pcset);\n    return (0, $0d7cd0cdab616457$export$bb628a54ab399bc9)(scale2.indexOf(tonic), scale2);\n}\nfunction $5b22c3b78aa339bc$export$1107df4484a88f75(name) {\n    const s = $5b22c3b78aa339bc$export$3988ae62b71be9a3(name);\n    if (s.empty) return [];\n    const tonics = s.tonic ? s.notes : s.intervals;\n    return (0, $37ea67a5744539d1$export$4a6bdc0a840be00)(s.chroma).map((chroma2, i)=>{\n        const modeName = $5b22c3b78aa339bc$export$3988ae62b71be9a3(chroma2).name;\n        return modeName ? [\n            tonics[i],\n            modeName\n        ] : [\n            \"\",\n            \"\"\n        ];\n    }).filter((x)=>x[0]);\n}\nfunction $5b22c3b78aa339bc$var$getNoteNameOf(scale2) {\n    const names2 = Array.isArray(scale2) ? $5b22c3b78aa339bc$export$fe544ea4685fdc99(scale2) : $5b22c3b78aa339bc$export$3988ae62b71be9a3(scale2).notes;\n    const chromas = names2.map((name)=>(0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(name).chroma);\n    return (noteOrMidi)=>{\n        const currNote = typeof noteOrMidi === \"number\" ? (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)((0, $fb522e20fe91ebd8$export$b7b28d8262b5f469)(noteOrMidi)) : (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(noteOrMidi);\n        const height = currNote.height;\n        if (height === void 0) return void 0;\n        const chroma2 = height % 12;\n        const position = chromas.indexOf(chroma2);\n        if (position === -1) return void 0;\n        return (0, $fb522e20fe91ebd8$export$25596f5ac1eb56e4)(currNote.name, names2[position]);\n    };\n}\nfunction $5b22c3b78aa339bc$export$382f6fb00c4220(scale2) {\n    const getName = $5b22c3b78aa339bc$var$getNoteNameOf(scale2);\n    return (fromNote, toNote)=>{\n        const from = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(fromNote).height;\n        const to = (0, $b16aee3da08f05ac$export$a92e4c44d367d0af)(toNote).height;\n        if (from === void 0 || to === void 0) return [];\n        return (0, $0d7cd0cdab616457$export$d02631cccf789723)(from, to).map(getName).filter((x)=>x);\n    };\n}\nfunction $5b22c3b78aa339bc$export$41fc368e1a942b97(scaleName) {\n    const { intervals: intervals, tonic: tonic } = $5b22c3b78aa339bc$export$3988ae62b71be9a3(scaleName);\n    const transpose2 = (0, $498eab776f7de6b3$export$96bb437d3e6675d)(intervals, tonic);\n    return (degree)=>degree ? transpose2(degree > 0 ? degree - 1 : degree) : \"\";\n}\nfunction $5b22c3b78aa339bc$export$be3f796aed065412(scaleName) {\n    const { intervals: intervals, tonic: tonic } = $5b22c3b78aa339bc$export$3988ae62b71be9a3(scaleName);\n    return (0, $498eab776f7de6b3$export$96bb437d3e6675d)(intervals, tonic);\n}\nvar $5b22c3b78aa339bc$export$2e2bcd8739ae039 = {\n    degrees: $5b22c3b78aa339bc$export$41fc368e1a942b97,\n    detect: $5b22c3b78aa339bc$export$17b446b869dad473,\n    extended: $5b22c3b78aa339bc$export$44d74886d11a5ca2,\n    get: $5b22c3b78aa339bc$export$3988ae62b71be9a3,\n    modeNames: $5b22c3b78aa339bc$export$1107df4484a88f75,\n    names: $5b22c3b78aa339bc$export$e4b2ac9215619f8d,\n    rangeOf: $5b22c3b78aa339bc$export$382f6fb00c4220,\n    reduced: $5b22c3b78aa339bc$export$447808b60b7559bd,\n    scaleChords: $5b22c3b78aa339bc$export$80b44fd4031a15fe,\n    scaleNotes: $5b22c3b78aa339bc$export$fe544ea4685fdc99,\n    steps: $5b22c3b78aa339bc$export$be3f796aed065412,\n    tokenize: $5b22c3b78aa339bc$export$660b2ee2d4fb4eff,\n    scale: // deprecated\n    $5b22c3b78aa339bc$export$dcdf75081b88279d\n};\n\n\n\n// index.ts\nvar $9318bebc4814fd71$var$NONE = {\n    empty: true,\n    name: \"\",\n    upper: void 0,\n    lower: void 0,\n    type: void 0,\n    additive: []\n};\nvar $9318bebc4814fd71$var$NAMES = [\n    \"4/4\",\n    \"3/4\",\n    \"2/4\",\n    \"2/2\",\n    \"12/8\",\n    \"9/8\",\n    \"6/8\",\n    \"3/8\"\n];\nfunction $9318bebc4814fd71$export$e4b2ac9215619f8d() {\n    return $9318bebc4814fd71$var$NAMES.slice();\n}\nvar $9318bebc4814fd71$var$REGEX = /^(\\d*\\d(?:\\+\\d)*)\\/(\\d+)$/;\nvar $9318bebc4814fd71$var$CACHE = /* @__PURE__ */ new Map();\nfunction $9318bebc4814fd71$export$3988ae62b71be9a3(literal) {\n    const stringifiedLiteral = JSON.stringify(literal);\n    const cached = $9318bebc4814fd71$var$CACHE.get(stringifiedLiteral);\n    if (cached) return cached;\n    const ts = $9318bebc4814fd71$var$build($9318bebc4814fd71$export$98e6a39c04603d36(literal));\n    $9318bebc4814fd71$var$CACHE.set(stringifiedLiteral, ts);\n    return ts;\n}\nfunction $9318bebc4814fd71$export$98e6a39c04603d36(literal) {\n    if (typeof literal === \"string\") {\n        const [_, up2, low] = $9318bebc4814fd71$var$REGEX.exec(literal) || [];\n        return $9318bebc4814fd71$export$98e6a39c04603d36([\n            up2,\n            low\n        ]);\n    }\n    const [up, down] = literal;\n    const denominator = +down;\n    if (typeof up === \"number\") return [\n        up,\n        denominator\n    ];\n    const list = up.split(\"+\").map((n)=>+n);\n    return list.length === 1 ? [\n        list[0],\n        denominator\n    ] : [\n        list,\n        denominator\n    ];\n}\nvar $9318bebc4814fd71$export$2e2bcd8739ae039 = {\n    names: $9318bebc4814fd71$export$e4b2ac9215619f8d,\n    parse: $9318bebc4814fd71$export$98e6a39c04603d36,\n    get: $9318bebc4814fd71$export$3988ae62b71be9a3\n};\nvar $9318bebc4814fd71$var$isPowerOfTwo = (x)=>Math.log(x) / Math.log(2) % 1 === 0;\nfunction $9318bebc4814fd71$var$build([up, down]) {\n    const upper = Array.isArray(up) ? up.reduce((a, b)=>a + b, 0) : up;\n    const lower = down;\n    if (upper === 0 || lower === 0) return $9318bebc4814fd71$var$NONE;\n    const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\n    const additive = Array.isArray(up) ? up : [];\n    const type = lower === 4 || lower === 2 ? \"simple\" : lower === 8 && upper % 3 === 0 ? \"compound\" : $9318bebc4814fd71$var$isPowerOfTwo(lower) ? \"irregular\" : \"irrational\";\n    return {\n        empty: false,\n        name: name,\n        type: type,\n        upper: upper,\n        lower: lower,\n        additive: additive\n    };\n}\n\n\n// index.ts\n\nvar $0a8cf9a0d1591433$export$f08a353a636305c4 = (voicings, lastVoicing)=>{\n    if (!lastVoicing || !lastVoicing.length) return voicings[0];\n    const topNoteMidi = (voicing)=>(0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).midi(voicing[voicing.length - 1]) || 0;\n    const diff = (voicing)=>Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n    return voicings.sort((a, b)=>diff(a) - diff(b))[0];\n};\nvar $0a8cf9a0d1591433$export$2e2bcd8739ae039 = {\n    topNoteDiff: $0a8cf9a0d1591433$export$f08a353a636305c4\n};\n\n\n// index.ts\n\n\n\n\n// index.ts\n\n// data.ts\nvar $0150a483b8e07b03$var$triads = {\n    M: [\n        \"1P 3M 5P\",\n        \"3M 5P 8P\",\n        \"5P 8P 10M\"\n    ],\n    m: [\n        \"1P 3m 5P\",\n        \"3m 5P 8P\",\n        \"5P 8P 10m\"\n    ],\n    o: [\n        \"1P 3m 5d\",\n        \"3m 5d 8P\",\n        \"5d 8P 10m\"\n    ],\n    aug: [\n        \"1P 3m 5A\",\n        \"3m 5A 8P\",\n        \"5A 8P 10m\"\n    ]\n};\nvar $0150a483b8e07b03$var$lefthand = {\n    m7: [\n        \"3m 5P 7m 9M\",\n        \"7m 9M 10m 12P\"\n    ],\n    \"7\": [\n        \"3M 6M 7m 9M\",\n        \"7m 9M 10M 13M\"\n    ],\n    \"^7\": [\n        \"3M 5P 7M 9M\",\n        \"7M 9M 10M 12P\"\n    ],\n    \"69\": [\n        \"3M 5P 6A 9M\"\n    ],\n    m7b5: [\n        \"3m 5d 7m 8P\",\n        \"7m 8P 10m 12d\"\n    ],\n    \"7b9\": [\n        \"3M 6m 7m 9m\",\n        \"7m 9m 10M 13m\"\n    ],\n    // b9 / b13\n    \"7b13\": [\n        \"3M 6m 7m 9m\",\n        \"7m 9m 10M 13m\"\n    ],\n    // b9 / b13\n    o7: [\n        \"1P 3m 5d 6M\",\n        \"5d 6M 8P 10m\"\n    ],\n    \"7#11\": [\n        \"7m 9M 11A 13A\"\n    ],\n    \"7#9\": [\n        \"3M 7m 9A\"\n    ],\n    mM7: [\n        \"3m 5P 7M 9M\",\n        \"7M 9M 10m 12P\"\n    ],\n    m6: [\n        \"3m 5P 6M 9M\",\n        \"6M 9M 10m 12P\"\n    ]\n};\nvar $0150a483b8e07b03$var$all = {\n    M: [\n        \"1P 3M 5P\",\n        \"3M 5P 8P\",\n        \"5P 8P 10M\"\n    ],\n    m: [\n        \"1P 3m 5P\",\n        \"3m 5P 8P\",\n        \"5P 8P 10m\"\n    ],\n    o: [\n        \"1P 3m 5d\",\n        \"3m 5d 8P\",\n        \"5d 8P 10m\"\n    ],\n    aug: [\n        \"1P 3m 5A\",\n        \"3m 5A 8P\",\n        \"5A 8P 10m\"\n    ],\n    m7: [\n        \"3m 5P 7m 9M\",\n        \"7m 9M 10m 12P\"\n    ],\n    \"7\": [\n        \"3M 6M 7m 9M\",\n        \"7m 9M 10M 13M\"\n    ],\n    \"^7\": [\n        \"3M 5P 7M 9M\",\n        \"7M 9M 10M 12P\"\n    ],\n    \"69\": [\n        \"3M 5P 6A 9M\"\n    ],\n    m7b5: [\n        \"3m 5d 7m 8P\",\n        \"7m 8P 10m 12d\"\n    ],\n    \"7b9\": [\n        \"3M 6m 7m 9m\",\n        \"7m 9m 10M 13m\"\n    ],\n    // b9 / b13\n    \"7b13\": [\n        \"3M 6m 7m 9m\",\n        \"7m 9m 10M 13m\"\n    ],\n    // b9 / b13\n    o7: [\n        \"1P 3m 5d 6M\",\n        \"5d 6M 8P 10m\"\n    ],\n    \"7#11\": [\n        \"7m 9M 11A 13A\"\n    ],\n    \"7#9\": [\n        \"3M 7m 9A\"\n    ],\n    mM7: [\n        \"3m 5P 7M 9M\",\n        \"7M 9M 10m 12P\"\n    ],\n    m6: [\n        \"3m 5P 6M 9M\",\n        \"6M 9M 10m 12P\"\n    ]\n};\n// index.ts\nvar $0150a483b8e07b03$var$defaultDictionary = $0150a483b8e07b03$var$lefthand;\nfunction $0150a483b8e07b03$var$lookup(symbol, dictionary = $0150a483b8e07b03$var$defaultDictionary) {\n    if (dictionary[symbol]) return dictionary[symbol];\n    const { aliases: aliases } = (0, $f81c1a5b3e66f6db$export$2e2bcd8739ae039).get(\"C\" + symbol);\n    const match = Object.keys(dictionary).find((_symbol)=>aliases.includes(_symbol)) || \"\";\n    if (match !== void 0) return dictionary[match];\n    return void 0;\n}\nvar $0150a483b8e07b03$export$2e2bcd8739ae039 = {\n    lookup: $0150a483b8e07b03$var$lookup,\n    lefthand: $0150a483b8e07b03$var$lefthand,\n    triads: $0150a483b8e07b03$var$triads,\n    all: $0150a483b8e07b03$var$all,\n    defaultDictionary: $0150a483b8e07b03$var$defaultDictionary\n};\n\n\n\nvar $bae4f30deda00c86$var$defaultRange = [\n    \"C3\",\n    \"C5\"\n];\nvar $bae4f30deda00c86$var$defaultDictionary = (0, $0150a483b8e07b03$export$2e2bcd8739ae039).all;\nvar $bae4f30deda00c86$var$defaultVoiceLeading = (0, $0a8cf9a0d1591433$export$2e2bcd8739ae039).topNoteDiff;\nfunction $bae4f30deda00c86$var$get(chord, range = $bae4f30deda00c86$var$defaultRange, dictionary = $bae4f30deda00c86$var$defaultDictionary, voiceLeading = $bae4f30deda00c86$var$defaultVoiceLeading, lastVoicing) {\n    const voicings = $bae4f30deda00c86$var$search(chord, range, dictionary);\n    if (!lastVoicing || !lastVoicing.length) return voicings[0];\n    else return voiceLeading(voicings, lastVoicing);\n}\nfunction $bae4f30deda00c86$var$search(chord, range = $bae4f30deda00c86$var$defaultRange, dictionary = (0, $0150a483b8e07b03$export$2e2bcd8739ae039).triads) {\n    const [tonic, symbol] = (0, $f81c1a5b3e66f6db$export$2e2bcd8739ae039).tokenize(chord);\n    const sets = (0, $0150a483b8e07b03$export$2e2bcd8739ae039).lookup(symbol, dictionary);\n    if (!sets) return [];\n    const voicings = sets.map((intervals)=>intervals.split(\" \"));\n    const notesInRange = (0, $eaf30445c003b2c4$export$2e2bcd8739ae039).chromatic(range);\n    return voicings.reduce((voiced, voicing)=>{\n        const relativeIntervals = voicing.map((interval)=>(0, $4b0d2415abde5810$export$2e2bcd8739ae039).substract(interval, voicing[0]) || \"\");\n        const bottomPitchClass = (0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).transpose(tonic, voicing[0]);\n        const starts = notesInRange.filter((note)=>(0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).chroma(note) === (0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).chroma(bottomPitchClass)).filter((note)=>((0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).midi((0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).transpose(note, relativeIntervals[relativeIntervals.length - 1])) || 0) <= ((0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).midi(range[1]) || 0)).map((note)=>(0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).enharmonic(note, bottomPitchClass));\n        const notes = starts.map((start)=>relativeIntervals.map((interval)=>(0, $fb522e20fe91ebd8$export$2e2bcd8739ae039).transpose(start, interval)));\n        return voiced.concat(notes);\n    }, []);\n}\nfunction $bae4f30deda00c86$var$sequence(chords, range = $bae4f30deda00c86$var$defaultRange, dictionary = $bae4f30deda00c86$var$defaultDictionary, voiceLeading = $bae4f30deda00c86$var$defaultVoiceLeading, lastVoicing) {\n    const { voicings: voicings } = chords.reduce(({ voicings: voicings2, lastVoicing: lastVoicing2 }, chord)=>{\n        const voicing = $bae4f30deda00c86$var$get(chord, range, dictionary, voiceLeading, lastVoicing2);\n        lastVoicing2 = voicing;\n        voicings2.push(voicing);\n        return {\n            voicings: voicings2,\n            lastVoicing: lastVoicing2\n        };\n    }, {\n        voicings: [],\n        lastVoicing: lastVoicing\n    });\n    return voicings;\n}\nvar $bae4f30deda00c86$export$2e2bcd8739ae039 = {\n    get: $bae4f30deda00c86$var$get,\n    search: $bae4f30deda00c86$var$search,\n    sequence: $bae4f30deda00c86$var$sequence\n};\n\n\n\nvar $2ec1c585bb9dbcaa$export$8bd3c1da18917525 = $2ec1c585bb9dbcaa$import$39f8f2ba4979f6a9;\nvar $2ec1c585bb9dbcaa$export$42f810c80f8f428b = (0, $37ea67a5744539d1$export$2e2bcd8739ae039);\nvar $2ec1c585bb9dbcaa$export$e4f270e169feeaf2 = (0, $5facd99e7fcea85e$export$2e2bcd8739ae039);\nvar $2ec1c585bb9dbcaa$export$fb9da13258e71889 = (0, $98c1e925844fb606$export$2e2bcd8739ae039);\n\n\nvar $35da740d59af89ba$require$Chord = $f81c1a5b3e66f6db$export$2e2bcd8739ae039;\nconst $35da740d59af89ba$var$notas = [\n    \"C\",\n    \"C#\",\n    \"D\",\n    \"D#\",\n    \"E\",\n    \"F\",\n    \"F#\",\n    \"G\",\n    \"G#\",\n    \"A\",\n    \"A#\",\n    \"B\"\n];\nconst $35da740d59af89ba$var$afinacao = [\n    \"E\",\n    \"A\",\n    \"D\",\n    \"G\",\n    \"B\",\n    \"E\"\n];\nconst $35da740d59af89ba$var$braco = document.querySelector(\".braco\");\nconst $35da740d59af89ba$var$openNoteContainer = document.querySelector(\".openNote-container\");\nconst $35da740d59af89ba$var$rangeHTML = document.querySelectorAll(\".range-container > span\")[1];\nconst $35da740d59af89ba$var$rangeDiminui = document.querySelectorAll(\".range-container > span\")[0];\nconst $35da740d59af89ba$var$rangeAumenta = document.querySelectorAll(\".range-container > span\")[2];\nconst $35da740d59af89ba$var$acordeResultadoHTML = document.querySelector(\".acordeResultado\");\nconst $35da740d59af89ba$var$acordeBTN = document.querySelector(\".acordeBTN\");\nconst $35da740d59af89ba$var$infoBTN = document.querySelector(\".btn-info\");\nconst $35da740d59af89ba$var$construtorBTN = document.querySelector(\".btn-construtor\");\nconst $35da740d59af89ba$var$acordesBTN = document.querySelector(\".btn-acordes\");\nconst $35da740d59af89ba$var$nomeInput = document.getElementsByName(\"nomeAcorde\")[0];\nconst $35da740d59af89ba$var$btnInputNome = document.querySelector(\".btn-inputNome\");\nconst $35da740d59af89ba$var$btnSalva = document.querySelector(\".btn-salvaAcorde\");\nlet $35da740d59af89ba$var$arrayNotas = [\n    [],\n    [],\n    [],\n    [],\n    [],\n    []\n];\nlet $35da740d59af89ba$var$notasSelecionadas = [\n    {},\n    {},\n    {},\n    {},\n    {},\n    {}\n];\nlet $35da740d59af89ba$var$cache;\nlet $35da740d59af89ba$var$btnAtual = $35da740d59af89ba$var$construtorBTN;\nlet $35da740d59af89ba$var$range = 1;\nfunction $35da740d59af89ba$var$defineNota(cordaAtual, casaAtual) {\n    let notaInicial = $35da740d59af89ba$var$afinacao[cordaAtual - 1];\n    if ($35da740d59af89ba$var$range > 1) {\n        let notaAfinacao = notaInicial;\n        notaInicial = $35da740d59af89ba$var$notas[$35da740d59af89ba$var$notas.findIndex((el)=>el == notaAfinacao) + $35da740d59af89ba$var$range - 1 < $35da740d59af89ba$var$notas.length ? $35da740d59af89ba$var$notas.findIndex((el)=>el == notaAfinacao) + $35da740d59af89ba$var$range - 1 : $35da740d59af89ba$var$notas.findIndex((el)=>el == notaAfinacao) + $35da740d59af89ba$var$range - 1 - $35da740d59af89ba$var$notas.length];\n    }\n    const nota = $35da740d59af89ba$var$notas[$35da740d59af89ba$var$notas.findIndex((el)=>el == notaInicial) + casaAtual < $35da740d59af89ba$var$notas.length ? $35da740d59af89ba$var$notas.findIndex((el)=>el == notaInicial) + casaAtual : $35da740d59af89ba$var$notas.findIndex((el)=>el == notaInicial) + casaAtual - $35da740d59af89ba$var$notas.length];\n    return nota;\n}\nfunction $35da740d59af89ba$var$atualizaNotas() {\n    for(let i = 1; i < 6; i++)for(let j = 1; j < 6; j++){\n        $35da740d59af89ba$var$arrayNotas[i - 1][j - 1].replaceChild(document.createTextNode($35da740d59af89ba$var$defineNota(i, j)), $35da740d59af89ba$var$arrayNotas[i - 1][j - 1].childNodes[0]);\n        if (i === 5) $35da740d59af89ba$var$arrayNotas[5][j - 1].replaceChild(document.createTextNode($35da740d59af89ba$var$defineNota(6, j)), $35da740d59af89ba$var$arrayNotas[5][j - 1].childNodes[0]);\n    }\n}\nfunction $35da740d59af89ba$var$atualizaCasas() {\n    [\n        ...document.querySelectorAll(\".numeroCasas-container > span\")\n    ].forEach((el, i)=>{\n        el.textContent = i + $35da740d59af89ba$var$range;\n    });\n}\nfunction $35da740d59af89ba$var$atualizaSelecao() {\n    $35da740d59af89ba$var$notasSelecionadas.forEach((el, i)=>{\n        if (el.nota != undefined && el.casa != 6) el.nota = el.elemento.textContent;\n    });\n    $35da740d59af89ba$var$displayNotasSelecionadas();\n}\nfunction $35da740d59af89ba$var$desativarNotaVelha(coluna) {\n    if ($35da740d59af89ba$var$notasSelecionadas[coluna].casa != 6) $35da740d59af89ba$var$notasSelecionadas[coluna].elemento.classList.toggle(\"hidden\");\n    else {\n        $35da740d59af89ba$var$notasSelecionadas[coluna].elemento.childNodes[1].classList.remove(\"dis-block\");\n        $35da740d59af89ba$var$notasSelecionadas[coluna].elemento.childNodes[1].classList.add(\"dis-none\");\n    }\n}\nfunction $35da740d59af89ba$var$displayNotasSelecionadas() {\n    let holder = document.querySelector(\".notasSelecionadas-holder\");\n    $35da740d59af89ba$var$notasSelecionadas.forEach((el, i)=>{\n        let span = holder.children.length < 6 ? document.createElement(\"span\") : holder.children[i];\n        let txt = `Corda ${i + 1}: ` + (el.nota != undefined ? el.nota : \"Sem nota\");\n        if (span.childNodes.length < 1) {\n            span.append(txt);\n            holder.append(span);\n        } else span.replaceChild(document.createTextNode(txt), span.childNodes[0]);\n    });\n}\nfunction $35da740d59af89ba$var$selecionaOpenNote(coluna, nota, elemento) {\n    if (elemento.childNodes[0].classList.contains(\"dis-none\") && elemento.childNodes[1].classList.contains(\"dis-none\") || elemento.childNodes[1].classList.contains(\"dis-none\")) {\n        if ($35da740d59af89ba$var$notasSelecionadas[coluna].nota != undefined) $35da740d59af89ba$var$desativarNotaVelha(coluna);\n        elemento.childNodes[0].classList.add(\"dis-none\");\n        elemento.childNodes[1].classList.add(\"dis-block\");\n        elemento.childNodes[1].classList.remove(\"dis-none\");\n        let obj = $35da740d59af89ba$var$notasSelecionadas[coluna];\n        obj[\"nota\"] = nota;\n        obj[\"casa\"] = 6;\n        obj[\"elemento\"] = elemento;\n    } else {\n        elemento.childNodes[0].classList.remove(\"dis-none\");\n        elemento.childNodes[1].classList.remove(\"dis-block\");\n        elemento.childNodes[1].classList.add(\"dis-none\");\n        $35da740d59af89ba$var$notasSelecionadas[coluna] = {};\n    }\n    $35da740d59af89ba$var$displayNotasSelecionadas();\n}\nfunction $35da740d59af89ba$var$selecionaNota(coluna, casa, elementoNovo) {\n    if (elementoNovo.classList.contains(\"hidden\")) {\n        elementoNovo.classList.toggle(\"hidden\");\n        if ($35da740d59af89ba$var$notasSelecionadas[coluna].nota != undefined) $35da740d59af89ba$var$desativarNotaVelha(coluna);\n        else document.querySelector(`.openNote-holder:nth-child(${coluna + 1}) .openNote-span`).classList.add(\"dis-none\");\n        let obj = $35da740d59af89ba$var$notasSelecionadas[coluna];\n        obj[\"nota\"] = elementoNovo.innerText;\n        obj[\"casa\"] = casa;\n        obj[\"elemento\"] = elementoNovo;\n    } else {\n        elementoNovo.classList.toggle(\"hidden\");\n        document.querySelector(`.openNote-holder:nth-child(${coluna + 1}) .openNote-span`).classList.remove(\"dis-none\");\n        $35da740d59af89ba$var$notasSelecionadas[coluna] = {};\n    }\n    $35da740d59af89ba$var$displayNotasSelecionadas();\n}\nfunction $35da740d59af89ba$var$displayOpenNotes() {\n    $35da740d59af89ba$var$afinacao.forEach((el, i)=>{\n        let div = document.createElement(\"div\");\n        let sp = document.createElement(\"span\");\n        let spBola = document.createElement(\"span\");\n        let hidden = document.createElement(\"p\");\n        hidden.append(el);\n        sp.append(\"X\");\n        sp.classList.add(\"openNote-span\");\n        hidden.classList.add(\"dis-none\");\n        sp.append(hidden);\n        div.append(sp);\n        div.classList.add(\"openNote-holder\");\n        spBola.classList.add(\"openNote-bola\");\n        spBola.classList.add(\"dis-none\");\n        div.append(spBola);\n        $35da740d59af89ba$var$openNoteContainer.append(div);\n        div.addEventListener(\"click\", ()=>{\n            $35da740d59af89ba$var$selecionaOpenNote(i, el, div);\n        });\n    });\n}\nfunction $35da740d59af89ba$export$3b0f3781aa3ef7a4(pai, ehVisualizador, notas) {\n    for(let i = 1; i < 6; i++){\n        let col = document.createElement(\"div\");\n        col.classList.add(\"coluna\");\n        for(let j = 1; j < 6; j++){\n            let casa = document.createElement(\"div\");\n            casa.classList.add(\"casa\");\n            let notaContainer = document.createElement(\"span\");\n            let nota = document.createElement(\"span\");\n            let notaTxt = $35da740d59af89ba$var$defineNota(i, j);\n            nota.append(notaTxt);\n            $35da740d59af89ba$var$arrayNotas[i - 1].push(nota);\n            notaContainer.appendChild(nota);\n            casa.appendChild(notaContainer);\n            if (!ehVisualizador) {\n                notaContainer.classList.add(\"nota-container\");\n                notaContainer.addEventListener(\"click\", ()=>{\n                    $35da740d59af89ba$var$selecionaNota(i - 1, j, nota);\n                });\n                nota.classList.add(\"nota\", \"hidden\");\n            } else {\n                notaContainer.classList.add(\"nota-container-B\");\n                if (notas[i - 1].casa != undefined && j === notas[i - 1].casa) nota.classList.add(\"nota\");\n                else nota.classList.add(\"nota\", \"hidden\");\n            }\n            if (i === 5) {\n                let notaContainerD = document.createElement(\"span\");\n                let notaD = document.createElement(\"span\");\n                let notaDTxt = $35da740d59af89ba$var$defineNota(6, j);\n                notaD.append(notaDTxt);\n                $35da740d59af89ba$var$arrayNotas[5].push(notaD);\n                notaContainerD.appendChild(notaD);\n                casa.appendChild(notaContainerD);\n                if (!ehVisualizador) {\n                    notaContainerD.classList.add(\"nota-container-direita\");\n                    notaD.classList.add(\"nota\", \"hidden\");\n                    notaContainerD.addEventListener(\"click\", ()=>{\n                        $35da740d59af89ba$var$selecionaNota(i, j, notaD);\n                    });\n                } else {\n                    notaContainerD.classList.add(\"nota-container-direita-B\");\n                    if (notas[5].casa != undefined && j === notas[5].casa) notaD.classList.add(\"nota\");\n                    else notaD.classList.add(\"nota\", \"hidden\");\n                }\n            }\n            col.appendChild(casa);\n        }\n        pai.appendChild(col);\n    }\n}\nfunction $35da740d59af89ba$var$achaAcorde() {\n    let notas = $35da740d59af89ba$var$notasSelecionadas.map((obj)=>{\n        if (obj.nota != undefined) return obj.nota;\n    });\n    let acordes = $35da740d59af89ba$require$Chord.detect(notas);\n    let txt;\n    if (acordes.length != 0) {\n        txt = \"Acordes detectados: \" + acordes.join(\", \");\n        $35da740d59af89ba$var$nomeInput.value = acordes[0];\n        if (document.querySelector(\".listaInput\") === null) {\n            let ul = document.createElement(\"ul\");\n            ul.classList.add(\"listaInput\", \"dis-none\");\n            let holder = document.querySelector(\".inputNome-holder\");\n            holder.append(ul);\n            acordes.forEach((el)=>{\n                let li = document.createElement(\"li\");\n                li.append(el);\n                ul.append(li);\n                li.addEventListener(\"click\", ()=>{\n                    $35da740d59af89ba$var$nomeInput.value = li.textContent;\n                });\n            });\n        } else {\n            let ul = document.querySelector(\".listaInput\");\n            ul.replaceChildren(...acordes.map((el)=>{\n                let li = document.createElement(\"li\");\n                li.append(el);\n                li.addEventListener(\"click\", ()=>{\n                    $35da740d59af89ba$var$nomeInput.value = li.textContent;\n                });\n                return li;\n            }));\n        }\n    } else txt = \"Nenhum acorde foi detectado\";\n    $35da740d59af89ba$var$acordeResultadoHTML.replaceChildren(txt);\n}\nfunction $35da740d59af89ba$var$salvaAcorde() {\n    let novoAcorde = {};\n    let p = document.querySelector(\".textoSave\");\n    if ($35da740d59af89ba$var$nomeInput.value.length <= 0) {\n        p.replaceChildren(\"O acorde precisa ter um nome de no m\\xednimo um caractere\");\n        return 0;\n    }\n    console.log($35da740d59af89ba$var$notasSelecionadas);\n    if ($35da740d59af89ba$var$notasSelecionadas.length < 2) {\n        p.replaceChildren(\"Forme um acorde com pelo menos duas notas\");\n        return 0;\n    }\n    novoAcorde[\"nome\"] = $35da740d59af89ba$var$nomeInput.value;\n    novoAcorde[\"notas\"] = $35da740d59af89ba$var$notasSelecionadas;\n    novoAcorde[\"range\"] = $35da740d59af89ba$var$range;\n    if (!localStorage.getItem(\"acordes\")) {\n        localStorage.setItem(\"acordes\", JSON.stringify([\n            novoAcorde\n        ]));\n        p.replaceChildren(\"O acorde \" + $35da740d59af89ba$var$nomeInput.value + \" foi salvo!\");\n    } else {\n        let arr = JSON.parse(localStorage.getItem(\"acordes\"));\n        if (!$35da740d59af89ba$var$achaDupli(novoAcorde.nome)) {\n            arr.push(novoAcorde);\n            localStorage.setItem(\"acordes\", JSON.stringify(arr));\n            p.replaceChildren(\"O acorde \" + $35da740d59af89ba$var$nomeInput.value + \" foi salvo!\");\n        } else p.replaceChildren(\"J\\xe1 existe um acorde com o mesmo nome.\");\n    }\n}\nfunction $35da740d59af89ba$var$achaDupli(nome) {\n    let arrayAcordes = JSON.parse(localStorage.getItem(\"acordes\"));\n    for(let i = 0; i < arrayAcordes.length; i++){\n        if (arrayAcordes[i].nome === nome) return true;\n    }\n    return false;\n}\nfunction $35da740d59af89ba$var$salvaCache() {\n    const ehPaginaConstrutor = document.querySelector(\".builder-container\").children[0].classList.contains(\"range-container\");\n    if (ehPaginaConstrutor) {\n        const c = document.querySelector(\".builder-container\").childNodes;\n        $35da740d59af89ba$var$cache = Array.from(c);\n    }\n}\nfunction $35da740d59af89ba$var$alteraAtual(targetBTN) {\n    if (targetBTN !== $35da740d59af89ba$var$btnAtual) {\n        $35da740d59af89ba$var$btnAtual.classList.toggle(\"atual\");\n        targetBTN.classList.toggle(\"atual\");\n        $35da740d59af89ba$var$btnAtual = targetBTN;\n    }\n}\nwindow.onload = ()=>{\n    $35da740d59af89ba$export$3b0f3781aa3ef7a4($35da740d59af89ba$var$braco);\n    $35da740d59af89ba$var$displayOpenNotes();\n    $35da740d59af89ba$var$displayNotasSelecionadas();\n    $35da740d59af89ba$var$rangeHTML.append($35da740d59af89ba$var$range);\n};\n$35da740d59af89ba$var$acordeBTN.addEventListener(\"click\", ()=>{\n    $35da740d59af89ba$var$achaAcorde();\n});\n$35da740d59af89ba$var$rangeDiminui.addEventListener(\"click\", (event)=>{\n    if ($35da740d59af89ba$var$range > 1) {\n        $35da740d59af89ba$var$range = $35da740d59af89ba$var$range - 1;\n        $35da740d59af89ba$var$rangeHTML.replaceChild(document.createTextNode($35da740d59af89ba$var$range), $35da740d59af89ba$var$rangeHTML.childNodes[0]);\n        $35da740d59af89ba$var$atualizaCasas();\n        $35da740d59af89ba$var$atualizaNotas();\n        $35da740d59af89ba$var$atualizaSelecao();\n    }\n});\n$35da740d59af89ba$var$rangeAumenta.addEventListener(\"click\", (event)=>{\n    if ($35da740d59af89ba$var$range < 20) {\n        $35da740d59af89ba$var$range = $35da740d59af89ba$var$range + 1;\n        $35da740d59af89ba$var$rangeHTML.replaceChild(document.createTextNode($35da740d59af89ba$var$range), $35da740d59af89ba$var$rangeHTML.childNodes[0]);\n        $35da740d59af89ba$var$atualizaCasas();\n        $35da740d59af89ba$var$atualizaNotas();\n        $35da740d59af89ba$var$atualizaSelecao();\n    }\n});\n$35da740d59af89ba$var$infoBTN.addEventListener(\"click\", (event)=>{\n    $35da740d59af89ba$var$salvaCache();\n    (0, $31fcbff186f504bd$export$7b1762f2253f172b)();\n    $35da740d59af89ba$var$alteraAtual(event.target);\n});\n$35da740d59af89ba$var$construtorBTN.addEventListener(\"click\", (event)=>{\n    if ($35da740d59af89ba$var$cache) {\n        let c = document.querySelector(\".builder-container\");\n        c.replaceChildren(...$35da740d59af89ba$var$cache);\n    }\n    $35da740d59af89ba$var$alteraAtual(event.target);\n});\n$35da740d59af89ba$var$acordesBTN.addEventListener(\"click\", (event)=>{\n    $35da740d59af89ba$var$salvaCache();\n    (0, $536c869b7829f0c2$export$11cdf119b9ba7752)();\n    $35da740d59af89ba$var$alteraAtual(event.target);\n});\n$35da740d59af89ba$var$btnInputNome.addEventListener(\"click\", ()=>{\n    let li = document.querySelector(\".listaInput\");\n    if (document.querySelector(\".listaInput\") != null) {\n        li.classList.toggle(\"dis-block\");\n        li.classList.toggle(\"dis-none\");\n    }\n});\n$35da740d59af89ba$var$btnSalva.addEventListener(\"click\", ()=>{\n    $35da740d59af89ba$var$salvaAcorde();\n});\n\n\n//# sourceMappingURL=index.30351e5f.js.map\n","    import { displayInfo } from './info.js'\r\n    import { displayAcordes } from './acordes.js'\r\n    export {displayTrastes};\r\n\r\n    const { Chord } = require(\"tonal\");\r\n    const notas = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\r\n    const afinacao = [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"];\r\n    const braco = document.querySelector(\".braco\");\r\n    const openNoteContainer = document.querySelector(\".openNote-container\")\r\n    const rangeHTML = document.querySelectorAll(\".range-container > span\")[1]\r\n    const rangeDiminui = document.querySelectorAll(\".range-container > span\")[0]\r\n    const rangeAumenta = document.querySelectorAll(\".range-container > span\")[2]\r\n    const acordeResultadoHTML = document.querySelector(\".acordeResultado\");\r\n    const acordeBTN = document.querySelector(\".acordeBTN\");\r\n    const infoBTN = document.querySelector(\".btn-info\")\r\n    const construtorBTN = document.querySelector(\".btn-construtor\")\r\n    const acordesBTN = document.querySelector(\".btn-acordes\")\r\n    const nomeInput = document.getElementsByName(\"nomeAcorde\")[0]\r\n    const btnInputNome = document.querySelector(\".btn-inputNome\")\r\n    const btnSalva = document.querySelector(\".btn-salvaAcorde\")\r\n\r\n    let arrayNotas = [[], [], [], [], [], []];\r\n    let notasSelecionadas = [{}, {}, {}, {}, {}, {}];\r\n    let cache;\r\n    let btnAtual = construtorBTN;\r\n    let range = 1;\r\n\r\n\r\n\r\nfunction defineNota(cordaAtual, casaAtual) {\r\n    let notaInicial = afinacao[cordaAtual - 1];\r\n\r\n    if (range > 1) {\r\n        let notaAfinacao = notaInicial;\r\n        notaInicial = notas[notas.findIndex(el => el == notaAfinacao) + range - 1 < notas.length ? notas.findIndex(el => el == notaAfinacao) + range - 1 :\r\n            notas.findIndex(el => el == notaAfinacao) + range - 1 - notas.length]\r\n    }\r\n    const nota = notas[notas.findIndex(el => el == notaInicial) + casaAtual < notas.length ? notas.findIndex(el => el == notaInicial) + casaAtual :\r\n        notas.findIndex(el => el == notaInicial) + casaAtual - notas.length];\r\n\r\n    return nota;\r\n}\r\n\r\n\r\nfunction atualizaNotas() {\r\n    for (let i = 1; i < 6; i++) {\r\n        for (let j = 1; j < 6; j++) {\r\n            arrayNotas[i - 1][j - 1].replaceChild(document.createTextNode(defineNota(i, j)), arrayNotas[i - 1][j - 1].childNodes[0]);\r\n            if (i === 5) {\r\n                arrayNotas[5][j - 1].replaceChild(document.createTextNode(defineNota(6, j)), arrayNotas[5][j - 1].childNodes[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction atualizaCasas() {\r\n    [...document.querySelectorAll(\".numeroCasas-container > span\")].forEach((el, i) => {\r\n        el.textContent = i + range\r\n    })\r\n\r\n}\r\n\r\nfunction atualizaSelecao() {\r\n    notasSelecionadas.forEach((el, i) => {\r\n        if (el.nota != undefined && el.casa != 6) {\r\n            el.nota = el.elemento.textContent;\r\n        }\r\n    })\r\n    displayNotasSelecionadas()\r\n}\r\n\r\nfunction desativarNotaVelha(coluna) {\r\n    if (notasSelecionadas[coluna].casa != 6) {\r\n        notasSelecionadas[coluna].elemento.classList.toggle(\"hidden\");\r\n    } else {\r\n        notasSelecionadas[coluna].elemento.childNodes[1].classList.remove(\"dis-block\");\r\n        notasSelecionadas[coluna].elemento.childNodes[1].classList.add(\"dis-none\");\r\n\r\n    }\r\n}\r\n\r\nfunction displayNotasSelecionadas() {\r\n    let holder = document.querySelector(\".notasSelecionadas-holder\")\r\n\r\n    notasSelecionadas.forEach((el, i) => {\r\n        let span = holder.children.length < 6 ? document.createElement(\"span\") : holder.children[i];\r\n        let txt = `Corda ${i + 1}: ` + (el.nota != undefined ? el.nota : \"Sem nota\");\r\n        if (span.childNodes.length < 1) {\r\n            span.append(txt);\r\n            holder.append(span)\r\n        } else {\r\n            span.replaceChild(document.createTextNode(txt), span.childNodes[0]);\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfunction selecionaOpenNote(coluna, nota, elemento) {\r\n\r\n    if (elemento.childNodes[0].classList.contains(\"dis-none\") && elemento.childNodes[1].classList.contains(\"dis-none\")\r\n        || elemento.childNodes[1].classList.contains(\"dis-none\")) {\r\n        if (notasSelecionadas[coluna].nota != undefined) {\r\n            desativarNotaVelha(coluna);\r\n        }\r\n\r\n        elemento.childNodes[0].classList.add(\"dis-none\")\r\n        elemento.childNodes[1].classList.add(\"dis-block\")\r\n        elemento.childNodes[1].classList.remove(\"dis-none\")\r\n        let obj = notasSelecionadas[coluna];\r\n        obj[\"nota\"] = nota;\r\n        obj[\"casa\"] = 6;\r\n        obj[\"elemento\"] = elemento;\r\n    } else {\r\n        elemento.childNodes[0].classList.remove(\"dis-none\")\r\n        elemento.childNodes[1].classList.remove(\"dis-block\")\r\n        elemento.childNodes[1].classList.add(\"dis-none\")\r\n        notasSelecionadas[coluna] = {};\r\n    }\r\n\r\n    displayNotasSelecionadas();\r\n}\r\n\r\nfunction selecionaNota(coluna, casa, elementoNovo) {\r\n    if (elementoNovo.classList.contains(\"hidden\")) {\r\n        elementoNovo.classList.toggle(\"hidden\")\r\n\r\n        if (notasSelecionadas[coluna].nota != undefined) {\r\n            desativarNotaVelha(coluna);\r\n        } else {\r\n            document.querySelector(`.openNote-holder:nth-child(${coluna + 1}) .openNote-span`).classList.add(\"dis-none\")\r\n        }\r\n\r\n        let obj = notasSelecionadas[coluna];\r\n        obj[\"nota\"] = elementoNovo.innerText;\r\n        obj[\"casa\"] = casa;\r\n        obj[\"elemento\"] = elementoNovo;\r\n\r\n\r\n\r\n    } else {\r\n        elementoNovo.classList.toggle(\"hidden\");\r\n        document.querySelector(`.openNote-holder:nth-child(${coluna + 1}) .openNote-span`).classList.remove(\"dis-none\")\r\n        notasSelecionadas[coluna] = {};\r\n    }\r\n\r\n    displayNotasSelecionadas();\r\n}\r\n\r\n\r\n\r\n\r\nfunction displayOpenNotes() {\r\n    afinacao.forEach((el, i) => {\r\n        let div = document.createElement(\"div\")\r\n        let sp = document.createElement(\"span\")\r\n        let spBola = document.createElement(\"span\")\r\n        let hidden = document.createElement(\"p\")\r\n        hidden.append(el);\r\n        sp.append(\"X\")\r\n        sp.classList.add(\"openNote-span\")\r\n        hidden.classList.add(\"dis-none\")\r\n        sp.append(hidden)\r\n        div.append(sp)\r\n        div.classList.add(\"openNote-holder\")\r\n        spBola.classList.add(\"openNote-bola\")\r\n        spBola.classList.add(\"dis-none\");\r\n        div.append(spBola)\r\n        openNoteContainer.append(div);\r\n\r\n\r\n\r\n        div.addEventListener(\"click\", () => {\r\n            selecionaOpenNote(i, el, div);\r\n        })\r\n\r\n\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\nfunction displayTrastes(pai,ehVisualizador,notas) {\r\n    for (let i = 1; i < 6; i++) {\r\n        let col = document.createElement(\"div\")\r\n        col.classList.add(\"coluna\");\r\n\r\n        for (let j = 1; j < 6; j++) {\r\n\r\n            let casa = document.createElement(\"div\");\r\n            casa.classList.add(\"casa\");\r\n\r\n            let notaContainer = document.createElement(\"span\");\r\n\r\n            let nota = document.createElement(\"span\");\r\n\r\n            let notaTxt = defineNota(i, j);\r\n            nota.append(notaTxt)\r\n\r\n            arrayNotas[i - 1].push(nota);\r\n\r\n            notaContainer.appendChild(nota);\r\n            casa.appendChild(notaContainer);\r\n\r\n            if(!ehVisualizador){\r\n                notaContainer.classList.add(\"nota-container\")\r\n                notaContainer.addEventListener(\"click\", () => {\r\n                    selecionaNota(i - 1, j, nota)\r\n                })\r\n                nota.classList.add(\"nota\", \"hidden\");\r\n            }else{\r\n                notaContainer.classList.add(\"nota-container-B\")\r\n\r\n                if(notas[i-1].casa != undefined && j === notas[i-1].casa){\r\n                    nota.classList.add(\"nota\");\r\n                }else{\r\n                    nota.classList.add(\"nota\", \"hidden\");\r\n                }\r\n            }\r\n\r\n\r\n            if (i === 5) {\r\n                let notaContainerD = document.createElement(\"span\");\r\n                \r\n                let notaD = document.createElement(\"span\");\r\n                let notaDTxt = defineNota(6, j);\r\n                notaD.append(notaDTxt)\r\n                \r\n                arrayNotas[5].push(notaD);\r\n                \r\n                \r\n                notaContainerD.appendChild(notaD);\r\n                casa.appendChild(notaContainerD);\r\n                \r\n                if(!ehVisualizador){\r\n                    notaContainerD.classList.add(\"nota-container-direita\");\r\n                    notaD.classList.add(\"nota\", \"hidden\");\r\n                    notaContainerD.addEventListener(\"click\", () => {\r\n                        selecionaNota(i, j, notaD)\r\n                    })\r\n                }else{\r\n                    notaContainerD.classList.add(\"nota-container-direita-B\")\r\n    \r\n                    if(notas[5].casa != undefined && j === notas[5].casa){\r\n                        notaD.classList.add(\"nota\");\r\n                    }else{\r\n                        notaD.classList.add(\"nota\", \"hidden\");\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            col.appendChild(casa);\r\n        }\r\n\r\n\r\n        pai.appendChild(col);\r\n    }\r\n}\r\n\r\n\r\nfunction achaAcorde() {\r\n    let notas = notasSelecionadas.map((obj) => {\r\n        if (obj.nota != undefined) {\r\n            return obj.nota\r\n        }\r\n    });\r\n\r\n    let acordes = Chord.detect(notas)\r\n    let txt;\r\n    if (acordes.length != 0) {\r\n        txt = \"Acordes detectados: \" + acordes.join(\", \")\r\n        nomeInput.value = acordes[0]\r\n\r\n        if (document.querySelector(\".listaInput\") === null) {\r\n            let ul = document.createElement(\"ul\")\r\n            ul.classList.add(\"listaInput\", \"dis-none\")\r\n            let holder = document.querySelector(\".inputNome-holder\")\r\n            holder.append(ul)\r\n            acordes.forEach((el) => {\r\n                let li = document.createElement(\"li\")\r\n                li.append(el)\r\n                ul.append(li)\r\n\r\n                li.addEventListener(\"click\", () => {\r\n                    nomeInput.value = li.textContent\r\n                })\r\n\r\n\r\n            })\r\n        }else{\r\n            let ul = document.querySelector(\".listaInput\");\r\n            ul.replaceChildren(...acordes.map((el)=>{\r\n                let li = document.createElement(\"li\")\r\n                li.append(el)\r\n\r\n                li.addEventListener(\"click\", () => {\r\n                    nomeInput.value = li.textContent\r\n                })\r\n\r\n                return li;\r\n            }))\r\n        }\r\n\r\n\r\n    } else {\r\n        txt = \"Nenhum acorde foi detectado\"\r\n    }\r\n    acordeResultadoHTML.replaceChildren(txt)\r\n\r\n\r\n}\r\n\r\nfunction salvaAcorde(){\r\n\r\n    let novoAcorde = {};\r\n    let p = document.querySelector(\".textoSave\")\r\n    \r\n    if(nomeInput.value.length <= 0){\r\n        p.replaceChildren(\"O acorde precisa ter um nome de no mínimo um caractere\")\r\n        return 0;\r\n    }\r\n\r\n    console.log(notasSelecionadas)\r\n\r\n    if(notasSelecionadas.length < 2){\r\n        p.replaceChildren('Forme um acorde com pelo menos duas notas')\r\n        return 0;\r\n    }\r\n\r\n\r\n    novoAcorde[\"nome\"] = nomeInput.value;\r\n    novoAcorde[\"notas\"] = notasSelecionadas;\r\n    novoAcorde[\"range\"] = range;\r\n\r\n\r\n    if(!localStorage.getItem(\"acordes\")){\r\n        localStorage.setItem(\"acordes\",JSON.stringify([novoAcorde]))\r\n        p.replaceChildren(\"O acorde \"+nomeInput.value+\" foi salvo!\")\r\n    }else{\r\n        let arr = JSON.parse(localStorage.getItem(\"acordes\"));\r\n        if(!achaDupli(novoAcorde.nome)){\r\n            arr.push(novoAcorde);\r\n            localStorage.setItem(\"acordes\",JSON.stringify(arr));\r\n            p.replaceChildren(\"O acorde \"+nomeInput.value+\" foi salvo!\")\r\n        }else{\r\n            p.replaceChildren(\"Já existe um acorde com o mesmo nome.\")\r\n        \r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction achaDupli(nome){\r\n    let arrayAcordes = JSON.parse(localStorage.getItem(\"acordes\"));\r\n    for(let i = 0; i < arrayAcordes.length; i++){\r\n        if(arrayAcordes[i].nome === nome)\r\n            return true\r\n    }\r\n    return false\r\n}\r\n\r\nfunction salvaCache(){\r\n    const ehPaginaConstrutor = document.querySelector((\".builder-container\")).children[0].classList.contains(\"range-container\");\r\n\r\n    if(ehPaginaConstrutor){\r\n        const c = document.querySelector(\".builder-container\").childNodes\r\n        cache = Array.from(c);\r\n    }\r\n\r\n}\r\n\r\nfunction alteraAtual(targetBTN){\r\n    if(targetBTN !== btnAtual){\r\n        btnAtual.classList.toggle(\"atual\");\r\n        targetBTN.classList.toggle(\"atual\");\r\n        btnAtual = targetBTN;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nwindow.onload = () => {\r\n    displayTrastes(braco);\r\n    displayOpenNotes();\r\n    displayNotasSelecionadas();\r\n    rangeHTML.append(range)\r\n\r\n}\r\n\r\n\r\nacordeBTN.addEventListener(\"click\", () => {\r\n    achaAcorde();\r\n})\r\n\r\nrangeDiminui.addEventListener(\"click\", (event) => {\r\n    if (range > 1) {\r\n        range = range - 1;\r\n        rangeHTML.replaceChild(document.createTextNode(range), rangeHTML.childNodes[0]);\r\n        atualizaCasas();\r\n        atualizaNotas();\r\n        atualizaSelecao();\r\n    }\r\n})\r\n\r\nrangeAumenta.addEventListener(\"click\", (event) => {\r\n    if (range < 20) {\r\n        range = range + 1;\r\n        rangeHTML.replaceChild(document.createTextNode(range), rangeHTML.childNodes[0]);\r\n        atualizaCasas();\r\n        atualizaNotas();\r\n        atualizaSelecao();\r\n\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\ninfoBTN.addEventListener(\"click\", (event) => {\r\n    salvaCache();\r\n    displayInfo();\r\n    alteraAtual(event.target)\r\n})\r\n\r\nconstrutorBTN.addEventListener(\"click\", (event) => {\r\n    if(cache){\r\n        let c = document.querySelector(\".builder-container\")\r\n        c.replaceChildren(...cache)\r\n    }\r\n    alteraAtual(event.target)\r\n})\r\n\r\nacordesBTN.addEventListener(\"click\",(event)=>{\r\n    salvaCache();\r\n    displayAcordes();\r\n    alteraAtual(event.target)\r\n})\r\n\r\n\r\n\r\nbtnInputNome.addEventListener(\"click\", () => {\r\n    let li = document.querySelector(\".listaInput\")\r\n    if(document.querySelector(\".listaInput\") != null){\r\n        li.classList.toggle(\"dis-block\")\r\n        li.classList.toggle(\"dis-none\")\r\n    }\r\n})\r\n\r\nbtnSalva.addEventListener(\"click\",()=>{\r\n    salvaAcorde();\r\n});","\r\nexport {displayInfo};\r\n\r\n\r\nfunction displayInfo(){\r\n    let p = document.createElement(\"p\");\r\n    let p2 = document.createElement(\"p\");\r\n    let h2 = document.createElement('h2');\r\n    let h2_contato = document.createElement('h2');\r\n    let sec = document.createElement('section');\r\n    let linkedin = document.createElement('a');\r\n    let git = document.createElement('a')\r\n    let email = document.createElement('a')\r\n    let linkholder = document.createElement('div')\r\n    linkholder.classList.add('link-holder')\r\n    sec.classList.add('sec-info')\r\n    h2_contato.append('Informações de contato');\r\n    h2.append('Sobre o site')\r\n    p.append(\"Nesse projeto pessoal de minha autoria você pode escolher as posições das notas no braço do violão, em formato de cifra, e então achar o nome do acorde digitado.\")\r\n    p2.append(\"Foi utilizado o empacotador web Parcel junto com Javascript, CSS, HTML e a biblioteca javascript de teoria musical 'tonal'.\")\r\n    linkedin.append(\"Linkedin\")\r\n    git.append(\"Github\")\r\n    email.append(\"arthurlacerda206@gmail.com\")\r\n\r\n    linkedin.href = \"https://www.linkedin.com/in/arthurfl0\"\r\n    git.href = \"https://github.com/arthurFL0\"\r\n    email.href = \"mailto:arthurlacerda206@gmail.com\"\r\n    linkholder.append(linkedin,git,email)\r\n    sec.append(h2,p,p2,h2_contato,linkholder)\r\n        \r\n\r\n    document.querySelector(\".builder-container\").replaceChildren(sec)\r\n}","\r\nexport{displayAcordes};\r\nimport {displayTrastes} from './index.js';\r\n\r\n\r\n\r\nfunction displayAcordes(){\r\n    let divContainer = document.createElement(\"div\");\r\n    divContainer.classList.add(\"container-acordes\");\r\n    document.querySelector(\".builder-container\").replaceChildren(divContainer);\r\n\r\n    let arrAcordes = JSON.parse(localStorage.getItem(\"acordes\"));\r\n\r\n\r\n    if(arrAcordes.length > 0){\r\n        arrAcordes.forEach((acorde,index)=>{\r\n        let div = document.createElement(\"div\");\r\n        let btn = document.createElement(\"button\");\r\n        btn.append(acorde.nome);\r\n        btn.classList.add(\"btn-acorde\",\"pointer\");\r\n        div.classList.add(\"div-acorde\");\r\n        div.append(btn)\r\n        divContainer.append(div)\r\n        btn.addEventListener('click',()=>{\r\n            renderAcorde(acorde,index)\r\n        })\r\n    })\r\n\r\n    }else{\r\n        let div = document.createElement(\"div\");\r\n        div.classList.add('acordes-placeholder','c-default')\r\n        let span  = document.createElement(\"span\");\r\n        span.append('Crie acordes na tela do construtor e eles aparecerão aqui!');\r\n        div.append(span)\r\n        divContainer.append(div)\r\n    }\r\n}\r\n\r\n\r\nfunction renderAcorde(acorde,index){\r\n    let divAcorde = document.createElement(\"div\")\r\n    divAcorde.classList.add(\"acorde-container\");\r\n    let divInformation = document.createElement(\"div\")\r\n    divInformation.classList.add(\"div-info\")\r\n    let divDisplay = document.createElement(\"div\")\r\n    divDisplay.classList.add(\"div-display\")\r\n    let divInferior = document.createElement(\"div\")\r\n    divInferior.classList.add(\"infoAcorde-container\",\"c-default\")\r\n    divInferior.append(divInformation,divDisplay)\r\n\r\n    let divSuperior = document.createElement(\"div\");\r\n    divSuperior.classList.add(\"btnAcorde-container\")\r\n    let btnVoltar = document.createElement(\"button\")\r\n    btnVoltar.append(\"Voltar\")\r\n    \r\n    let btnRemover = document.createElement(\"button\")\r\n    btnRemover.append(\"Remover Acorde\")\r\n    btnRemover.classList.add('btnRemover')\r\n    btnRemover.addEventListener('click',()=>{\r\n        removerAcorde(index);\r\n        displayAcordes();\r\n    })\r\n\r\n    let divVoltar = document.createElement(\"div\")\r\n    let tagI = document.createElement(\"i\")\r\n    divVoltar.classList.add(\"voltar-container\",\"pointer\")\r\n    tagI.classList.add(\"fa-solid\",\"fa-right-long\",\"fa-rotate-180\")\r\n    divVoltar.append(tagI,btnVoltar)\r\n    divVoltar.addEventListener('click',()=>{\r\n        displayAcordes();\r\n    })\r\n\r\n\r\n    divSuperior.append(divVoltar,btnRemover)\r\n\r\n    divAcorde.append(divSuperior)\r\n    divAcorde.append(divInferior)\r\n\r\n    let nomeAcorde = document.createElement(\"h2\")\r\n    nomeAcorde.append(acorde.nome)\r\n    nomeAcorde.classList.add(\"white\")\r\n    divInformation.append(nomeAcorde)\r\n\r\n    let h3 = document.createElement(\"h3\")\r\n    h3.append(\"Notas:\")\r\n    h3.classList.add(\"white\")\r\n    divInformation.append(h3)\r\n\r\n    acorde.notas.forEach((el,i)=>{\r\n        let p = document.createElement(\"p\")\r\n        let txt = `Corda ${i + 1}: ` + (el.nota != undefined ? el.nota : \"Sem nota\");\r\n        p.classList.add(\"white\")\r\n        p.append(txt);\r\n        divInformation.append(p)\r\n    })\r\n\r\n    construirAcorde(divDisplay,acorde)\r\n\r\n\r\n    document.querySelector(\".builder-container\").replaceChildren(divAcorde)\r\n\r\n\r\n}\r\n\r\nfunction construirAcorde(pai,acorde){\r\n    let divCasas = document.createElement(\"div\")\r\n    divCasas.classList.add(\"numeroCasas-container\",\"c-default\",\"padding-t\")\r\n\r\n    let i = 0;\r\n    while(i < 5){\r\n        let span = document.createElement(\"span\")\r\n        span.append(acorde.range+i)\r\n        divCasas.append(span)\r\n        i = i + 1;\r\n    }\r\n\r\n    let div = document.createElement(\"div\")\r\n    let openNoteContainer = document.createElement(\"div\")\r\n    openNoteContainer.classList.add(\"openNote-container\")\r\n\r\n    let braco = document.createElement(\"div\")\r\n    braco.classList.add(\"braco\")\r\n\r\n    acorde.notas.forEach((nota,i)=>{\r\n        let divOpen = document.createElement(\"div\")\r\n        divOpen.classList.add(\"openNote-holder\")\r\n        let span = document.createElement(\"span\")\r\n\r\n        if(nota.casa === 6){\r\n            span.classList.add(\"openNote-bola\",\"dis-block\")\r\n        }else if (nota.casa === undefined){\r\n            span.classList.add(\"openNote-span\")\r\n            span.append(\"X\")\r\n        }\r\n\r\n        divOpen.append(span)\r\n        openNoteContainer.append(divOpen)\r\n    })\r\n\r\n    displayTrastes(braco,true,acorde.notas)\r\n    div.append(braco)\r\n    div.append(openNoteContainer)\r\n    pai.append(divCasas,div);\r\n    \r\n\r\n}\r\n\r\nfunction removerAcorde(index){\r\n    let arrNovo = JSON.parse(localStorage.getItem(\"acordes\"))\r\n    arrNovo.splice(index,1)\r\n    console.log(arrNovo,\" \",index)\r\n    localStorage.setItem(\"acordes\",JSON.stringify(arrNovo))\r\n}","// index.ts\r\nimport AbcNotation from \"@tonaljs/abc-notation\";\r\nimport * as Array from \"@tonaljs/array\";\r\nimport Chord from \"@tonaljs/chord\";\r\nimport ChordType from \"@tonaljs/chord-type\";\r\nimport Collection from \"@tonaljs/collection\";\r\nimport * as Core from \"@tonaljs/core\";\r\nimport DurationValue from \"@tonaljs/duration-value\";\r\nimport Interval from \"@tonaljs/interval\";\r\nimport Key from \"@tonaljs/key\";\r\nimport Midi from \"@tonaljs/midi\";\r\nimport Mode from \"@tonaljs/mode\";\r\nimport Note from \"@tonaljs/note\";\r\nimport Pcset from \"@tonaljs/pcset\";\r\nimport Progression from \"@tonaljs/progression\";\r\nimport Range from \"@tonaljs/range\";\r\nimport RomanNumeral from \"@tonaljs/roman-numeral\";\r\nimport Scale from \"@tonaljs/scale\";\r\nimport ScaleType from \"@tonaljs/scale-type\";\r\nimport TimeSignature from \"@tonaljs/time-signature\";\r\nimport VoiceLeading from \"@tonaljs/voice-leading\";\r\nimport Voicing from \"@tonaljs/voicing\";\r\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\r\nexport * from \"@tonaljs/core\";\r\nvar Tonal = Core;\r\nvar PcSet = Pcset;\r\nvar ChordDictionary = ChordType;\r\nvar ScaleDictionary = ScaleType;\r\nexport {\r\n  AbcNotation,\r\n  Array,\r\n  Chord,\r\n  ChordDictionary,\r\n  ChordType,\r\n  Collection,\r\n  Core,\r\n  DurationValue,\r\n  Interval,\r\n  Key,\r\n  Midi,\r\n  Mode,\r\n  Note,\r\n  PcSet,\r\n  Pcset,\r\n  Progression,\r\n  Range,\r\n  RomanNumeral,\r\n  Scale,\r\n  ScaleDictionary,\r\n  ScaleType,\r\n  TimeSignature,\r\n  Tonal,\r\n  VoiceLeading,\r\n  Voicing,\r\n  VoicingDictionary\r\n};\r\n//# sourceMappingURL=index.mjs.map","import AbcNotation from \"@tonaljs/abc-notation\";\nimport * as Array from \"@tonaljs/array\";\nimport Chord from \"@tonaljs/chord\";\nimport ChordType from \"@tonaljs/chord-type\";\nimport Collection from \"@tonaljs/collection\";\nimport * as Core from \"@tonaljs/core\";\nimport DurationValue from \"@tonaljs/duration-value\";\nimport Interval from \"@tonaljs/interval\";\nimport Key from \"@tonaljs/key\";\nimport Midi from \"@tonaljs/midi\";\nimport Mode from \"@tonaljs/mode\";\nimport Note from \"@tonaljs/note\";\nimport Pcset from \"@tonaljs/pcset\";\nimport Progression from \"@tonaljs/progression\";\nimport Range from \"@tonaljs/range\";\nimport RomanNumeral from \"@tonaljs/roman-numeral\";\nimport Scale from \"@tonaljs/scale\";\nimport ScaleType from \"@tonaljs/scale-type\";\nimport TimeSignature from \"@tonaljs/time-signature\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\nimport Voicing from \"@tonaljs/voicing\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\n\nexport * from \"@tonaljs/core\";\n\n// deprecated (backwards compatibility)\nconst Tonal = Core;\nconst PcSet = Pcset;\nconst ChordDictionary = ChordType;\nconst ScaleDictionary = ScaleType;\n\nexport {\n  AbcNotation,\n  Array,\n  Chord,\n  ChordDictionary,\n  ChordType,\n  Collection,\n  Core,\n  DurationValue,\n  Interval,\n  Key,\n  Midi,\n  Mode,\n  Note,\n  PcSet,\n  Pcset,\n  Progression,\n  Range,\n  RomanNumeral,\n  Scale,\n  ScaleDictionary,\n  ScaleType,\n  TimeSignature,\n  Tonal,\n  VoiceLeading,\n  Voicing,\n  VoicingDictionary,\n};\n","// index.ts\r\nimport { distance as dist, note, transpose as tr } from \"@tonaljs/core\";\r\nvar fillStr = (character, times) => Array(times + 1).join(character);\r\nvar REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\r\nfunction tokenize(str) {\r\n  const m = REGEX.exec(str);\r\n  if (!m) {\r\n    return [\"\", \"\", \"\"];\r\n  }\r\n  return [m[1], m[2], m[3]];\r\n}\r\nfunction abcToScientificNotation(str) {\r\n  const [acc, letter, oct] = tokenize(str);\r\n  if (letter === \"\") {\r\n    return \"\";\r\n  }\r\n  let o = 4;\r\n  for (let i = 0; i < oct.length; i++) {\r\n    o += oct.charAt(i) === \",\" ? -1 : 1;\r\n  }\r\n  const a = acc[0] === \"_\" ? acc.replace(/_/g, \"b\") : acc[0] === \"^\" ? acc.replace(/\\^/g, \"#\") : \"\";\r\n  return letter.charCodeAt(0) > 96 ? letter.toUpperCase() + a + (o + 1) : letter + a + o;\r\n}\r\nfunction scientificToAbcNotation(str) {\r\n  const n = note(str);\r\n  if (n.empty || !n.oct && n.oct !== 0) {\r\n    return \"\";\r\n  }\r\n  const { letter, acc, oct } = n;\r\n  const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\r\n  const l = oct > 4 ? letter.toLowerCase() : letter;\r\n  const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\r\n  return a + l + o;\r\n}\r\nfunction transpose(note2, interval) {\r\n  return scientificToAbcNotation(tr(abcToScientificNotation(note2), interval));\r\n}\r\nfunction distance(from, to) {\r\n  return dist(abcToScientificNotation(from), abcToScientificNotation(to));\r\n}\r\nvar abc_notation_default = {\r\n  abcToScientificNotation,\r\n  scientificToAbcNotation,\r\n  tokenize,\r\n  transpose,\r\n  distance\r\n};\r\nexport {\r\n  abcToScientificNotation,\r\n  abc_notation_default as default,\r\n  distance,\r\n  scientificToAbcNotation,\r\n  tokenize,\r\n  transpose\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { distance as dist, note, transpose as tr } from \"@tonaljs/core\";\n\nconst fillStr = (character: string, times: number) =>\n  Array(times + 1).join(character);\n\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\n\ntype AbcTokens = [string, string, string];\n\nexport function tokenize(str: string): AbcTokens {\n  const m = REGEX.exec(str);\n  if (!m) {\n    return [\"\", \"\", \"\"];\n  }\n  return [m[1], m[2], m[3]];\n}\n\n/**\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\n *\n * @example\n * abcToScientificNotation(\"c\") // => \"C5\"\n */\nexport function abcToScientificNotation(str: string): string {\n  const [acc, letter, oct] = tokenize(str);\n  if (letter === \"\") {\n    return \"\";\n  }\n  let o = 4;\n  for (let i = 0; i < oct.length; i++) {\n    o += oct.charAt(i) === \",\" ? -1 : 1;\n  }\n  const a =\n    acc[0] === \"_\"\n      ? acc.replace(/_/g, \"b\")\n      : acc[0] === \"^\"\n      ? acc.replace(/\\^/g, \"#\")\n      : \"\";\n  return letter.charCodeAt(0) > 96\n    ? letter.toUpperCase() + a + (o + 1)\n    : letter + a + o;\n}\n\n/**\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\n *\n * @example\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\n */\nexport function scientificToAbcNotation(str: string): string {\n  const n = note(str);\n  if (n.empty || (!n.oct && n.oct !== 0)) {\n    return \"\";\n  }\n  const { letter, acc, oct } = n;\n  const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\n  const l = oct > 4 ? letter.toLowerCase() : letter;\n  const o =\n    oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\n  return a + l + o;\n}\n\nexport function transpose(note: string, interval: string): string {\n  return scientificToAbcNotation(tr(abcToScientificNotation(note), interval));\n}\n\nexport function distance(from: string, to: string): string {\n  return dist(abcToScientificNotation(from), abcToScientificNotation(to));\n}\n\nexport default {\n  abcToScientificNotation,\n  scientificToAbcNotation,\n  tokenize,\n  transpose,\n  distance,\n};\n","// index.ts\r\nimport { isNamedPitch } from \"@tonaljs/pitch\";\r\nexport * from \"@tonaljs/pitch\";\r\nexport * from \"@tonaljs/pitch-distance\";\r\nexport * from \"@tonaljs/pitch-interval\";\r\nexport * from \"@tonaljs/pitch-note\";\r\nvar fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n  return function(...args) {\r\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n    return fn.apply(this, args);\r\n  };\r\n}\r\nvar isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\r\nexport {\r\n  deprecate,\r\n  fillStr,\r\n  isNamed\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n","// index.ts\r\nfunction isNamedPitch(src) {\r\n  return src !== null && typeof src === \"object\" && \"name\" in src && typeof src.name === \"string\" ? true : false;\r\n}\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar chroma = ({ step, alt }) => (SIZES[step] + alt + 120) % 12;\r\nvar height = ({ step, alt, oct, dir = 1 }) => dir * (SIZES[step] + alt + 12 * (oct === void 0 ? -100 : oct));\r\nvar midi = (pitch2) => {\r\n  const h = height(pitch2);\r\n  return pitch2.oct !== void 0 && h >= -12 && h <= 115 ? h + 12 : null;\r\n};\r\nfunction isPitch(pitch2) {\r\n  return pitch2 !== null && typeof pitch2 === \"object\" && \"step\" in pitch2 && typeof pitch2.step === \"number\" && \"alt\" in pitch2 && typeof pitch2.alt === \"number\" ? true : false;\r\n}\r\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\nvar STEPS_TO_OCTS = FIFTHS.map(\r\n  (fifths) => Math.floor(fifths * 7 / 12)\r\n);\r\nfunction coordinates(pitch2) {\r\n  const { step, alt, oct, dir = 1 } = pitch2;\r\n  const f = FIFTHS[step] + 7 * alt;\r\n  if (oct === void 0) {\r\n    return [dir * f];\r\n  }\r\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n  return [dir * f, dir * o];\r\n}\r\nvar FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction pitch(coord) {\r\n  const [f, o, dir] = coord;\r\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n  const alt = Math.floor((f + 1) / 7);\r\n  if (o === void 0) {\r\n    return { step, alt, dir };\r\n  }\r\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n  return { step, alt, oct, dir };\r\n}\r\nfunction unaltered(f) {\r\n  const i = (f + 1) % 7;\r\n  return i < 0 ? 7 + i : i;\r\n}\r\nexport {\r\n  chroma,\r\n  coordinates,\r\n  height,\r\n  isNamedPitch,\r\n  isPitch,\r\n  midi,\r\n  pitch\r\n};\r\n//# sourceMappingURL=index.mjs.map","export interface NamedPitch {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\"\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n","// index.ts\r\nimport {\r\n  interval as asInterval,\r\n  coordToInterval\r\n} from \"@tonaljs/pitch-interval\";\r\nimport {\r\n  note as asNote,\r\n  coordToNote\r\n} from \"@tonaljs/pitch-note\";\r\nfunction transpose(noteName, intervalName) {\r\n  const note = asNote(noteName);\r\n  const intervalCoord = Array.isArray(intervalName) ? intervalName : asInterval(intervalName).coord;\r\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\r\n    return \"\";\r\n  }\r\n  const noteCoord = note.coord;\r\n  const tr = noteCoord.length === 1 ? [noteCoord[0] + intervalCoord[0]] : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n  return coordToNote(tr).name;\r\n}\r\nfunction tonicIntervalsTransposer(intervals, tonic) {\r\n  const len = intervals.length;\r\n  return (normalized) => {\r\n    if (!tonic)\r\n      return \"\";\r\n    const index = normalized < 0 ? (len - -normalized % len) % len : normalized % len;\r\n    const octaves = Math.floor(normalized / len);\r\n    const root = transpose(tonic, [0, octaves]);\r\n    return transpose(root, intervals[index]);\r\n  };\r\n}\r\nfunction distance(fromNote, toNote) {\r\n  const from = asNote(fromNote);\r\n  const to = asNote(toNote);\r\n  if (from.empty || to.empty) {\r\n    return \"\";\r\n  }\r\n  const fcoord = from.coord;\r\n  const tcoord = to.coord;\r\n  const fifths = tcoord[0] - fcoord[0];\r\n  const octs = fcoord.length === 2 && tcoord.length === 2 ? tcoord[1] - fcoord[1] : -Math.floor(fifths * 7 / 12);\r\n  const forceDescending = to.height === from.height && to.midi !== null && from.midi !== null && from.step > to.step;\r\n  return coordToInterval([fifths, octs], forceDescending).name;\r\n}\r\nexport {\r\n  distance,\r\n  tonicIntervalsTransposer,\r\n  transpose\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n","// index.ts\r\nimport {\r\n  coordinates,\r\n  isNamedPitch,\r\n  isPitch,\r\n  pitch\r\n} from \"@tonaljs/pitch\";\r\nvar fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nvar NoInterval = { empty: true, name: \"\", acc: \"\" };\r\nvar INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\r\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\"\r\n);\r\nfunction tokenizeInterval(str) {\r\n  const m = REGEX.exec(`${str}`);\r\n  if (m === null) {\r\n    return [\"\", \"\"];\r\n  }\r\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nvar cache = {};\r\nfunction interval(src) {\r\n  return typeof src === \"string\" ? cache[src] || (cache[src] = parse(src)) : isPitch(src) ? interval(pitchName(src)) : isNamedPitch(src) ? interval(src.name) : NoInterval;\r\n}\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nfunction parse(str) {\r\n  const tokens = tokenizeInterval(str);\r\n  if (tokens[0] === \"\") {\r\n    return NoInterval;\r\n  }\r\n  const num = +tokens[0];\r\n  const q = tokens[1];\r\n  const step = (Math.abs(num) - 1) % 7;\r\n  const t = TYPES[step];\r\n  if (t === \"M\" && q === \"P\") {\r\n    return NoInterval;\r\n  }\r\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n  const name = \"\" + num + q;\r\n  const dir = num < 0 ? -1 : 1;\r\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n  const alt = qToAlt(type, q);\r\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n  const chroma = (dir * (SIZES[step] + alt) % 12 + 12) % 12;\r\n  const coord = coordinates({ step, alt, oct, dir });\r\n  return {\r\n    empty: false,\r\n    name,\r\n    num,\r\n    q,\r\n    step,\r\n    alt,\r\n    dir,\r\n    type,\r\n    simple,\r\n    semitones,\r\n    chroma,\r\n    coord,\r\n    oct\r\n  };\r\n}\r\nfunction coordToInterval(coord, forceDescending) {\r\n  const [f, o = 0] = coord;\r\n  const isDescending = f * 7 + o * 12 < 0;\r\n  const ivl = forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\r\n  return interval(pitch(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n  return q === \"M\" && type === \"majorable\" || q === \"P\" && type === \"perfectable\" ? 0 : q === \"m\" && type === \"majorable\" ? -1 : /^A+$/.test(q) ? q.length : /^d+$/.test(q) ? -1 * (type === \"perfectable\" ? q.length : q.length + 1) : 0;\r\n}\r\nfunction pitchName(props) {\r\n  const { step, alt, oct = 0, dir } = props;\r\n  if (!dir) {\r\n    return \"\";\r\n  }\r\n  const calcNum = step + 1 + 7 * oct;\r\n  const num = calcNum === 0 ? step + 1 : calcNum;\r\n  const d = dir < 0 ? \"-\" : \"\";\r\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n  const name = d + num + altToQ(type, alt);\r\n  return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n  if (alt === 0) {\r\n    return type === \"majorable\" ? \"M\" : \"P\";\r\n  } else if (alt === -1 && type === \"majorable\") {\r\n    return \"m\";\r\n  } else if (alt > 0) {\r\n    return fillStr(\"A\", alt);\r\n  } else {\r\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n  }\r\n}\r\nexport {\r\n  coordToInterval,\r\n  interval,\r\n  tokenizeInterval\r\n};\r\n//# sourceMappingURL=index.mjs.map","import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nexport interface NoInterval extends Partial<Interval> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly acc: \"\";\n}\n\nconst NoInterval: NoInterval = { empty: true, name: \"\", acc: \"\" };\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval | NoInterval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval | NoInterval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval | NoInterval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n","// index.ts\r\nimport {\r\n  coordinates,\r\n  isNamedPitch,\r\n  isPitch,\r\n  pitch\r\n} from \"@tonaljs/pitch\";\r\nvar fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nvar NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nvar cache = /* @__PURE__ */ new Map();\r\nvar stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nvar altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nvar accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\nfunction note(src) {\r\n  const stringSrc = JSON.stringify(src);\r\n  const cached = cache.get(stringSrc);\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  const value = typeof src === \"string\" ? parse(src) : isPitch(src) ? note(pitchName(src)) : isNamedPitch(src) ? note(src.name) : NoNote;\r\n  cache.set(stringSrc, value);\r\n  return value;\r\n}\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenizeNote(str) {\r\n  const m = REGEX.exec(str);\r\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nfunction coordToNote(noteCoord) {\r\n  return note(pitch(noteCoord));\r\n}\r\nvar mod = (n, m) => (n % m + m) % m;\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse(noteName) {\r\n  const tokens = tokenizeNote(noteName);\r\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n    return NoNote;\r\n  }\r\n  const letter = tokens[0];\r\n  const acc = tokens[1];\r\n  const octStr = tokens[2];\r\n  const step = (letter.charCodeAt(0) + 3) % 7;\r\n  const alt = accToAlt(acc);\r\n  const oct = octStr.length ? +octStr : void 0;\r\n  const coord = coordinates({ step, alt, oct });\r\n  const name = letter + acc + octStr;\r\n  const pc = letter + acc;\r\n  const chroma = (SEMI[step] + alt + 120) % 12;\r\n  const height = oct === void 0 ? mod(SEMI[step] + alt, 12) - 12 * 99 : SEMI[step] + alt + 12 * (oct + 1);\r\n  const midi = height >= 0 && height <= 127 ? height : null;\r\n  const freq = oct === void 0 ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n  return {\r\n    empty: false,\r\n    acc,\r\n    alt,\r\n    chroma,\r\n    coord,\r\n    freq,\r\n    height,\r\n    letter,\r\n    midi,\r\n    name,\r\n    oct,\r\n    pc,\r\n    step\r\n  };\r\n}\r\nfunction pitchName(props) {\r\n  const { step, alt, oct } = props;\r\n  const letter = stepToLetter(step);\r\n  if (!letter) {\r\n    return \"\";\r\n  }\r\n  const pc = letter + altToAcc(alt);\r\n  return oct || oct === 0 ? pc + oct : pc;\r\n}\r\nexport {\r\n  accToAlt,\r\n  altToAcc,\r\n  coordToNote,\r\n  note,\r\n  stepToLetter,\r\n  tokenizeNote\r\n};\r\n//# sourceMappingURL=index.mjs.map","import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nexport interface NoNote extends Partial<Note> {\n  empty: true;\n  name: \"\";\n  pc: \"\";\n  acc: \"\";\n}\nconst NoNote: NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\n\nconst cache: Map<NoteLiteral | undefined, Note | NoNote> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note | NoNote {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note | NoNote {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n","// index.ts\r\nimport { note } from \"@tonaljs/core\";\r\nvar isArray = Array.isArray;\r\nfunction ascR(b, n) {\r\n  const a = [];\r\n  for (; n--; a[n] = n + b)\r\n    ;\r\n  return a;\r\n}\r\nfunction descR(b, n) {\r\n  const a = [];\r\n  for (; n--; a[n] = b - n)\r\n    ;\r\n  return a;\r\n}\r\nfunction range(from, to) {\r\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\nfunction rotate(times, arr) {\r\n  const len = arr.length;\r\n  const n = (times % len + len) % len;\r\n  return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\nfunction compact(arr) {\r\n  return arr.filter((n) => n === 0 || n);\r\n}\r\nfunction sortedNoteNames(notes) {\r\n  const valid = notes.map((n) => note(n)).filter((n) => !n.empty);\r\n  return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\r\n}\r\nfunction sortedUniqNoteNames(arr) {\r\n  return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\nfunction shuffle(arr, rnd = Math.random) {\r\n  let i;\r\n  let t;\r\n  let m = arr.length;\r\n  while (m) {\r\n    i = Math.floor(rnd() * m--);\r\n    t = arr[m];\r\n    arr[m] = arr[i];\r\n    arr[i] = t;\r\n  }\r\n  return arr;\r\n}\r\nfunction permutations(arr) {\r\n  if (arr.length === 0) {\r\n    return [[]];\r\n  }\r\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n    return acc.concat(\r\n      arr.map((e, pos) => {\r\n        const newPerm = perm.slice();\r\n        newPerm.splice(pos, 0, arr[0]);\r\n        return newPerm;\r\n      })\r\n    );\r\n  }, []);\r\n}\r\nexport {\r\n  compact,\r\n  permutations,\r\n  range,\r\n  rotate,\r\n  shuffle,\r\n  sortedNoteNames,\r\n  sortedUniqNoteNames\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { note, Note } from \"@tonaljs/core\";\n\nconst isArray = Array.isArray;\n\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Sort an array of notes in ascending order. Pitch classes are listed\n * before notes. Any string that is not a note is removed.\n *\n * @param {string[]} notes\n * @return {string[]} sorted array of notes\n *\n * @example\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\n * // => ['C', 'F', 'G', 'A', 'B']\n */\nexport function sortedNoteNames(notes: string[]): string[] {\n  const valid = notes.map((n) => note(n)).filter((n) => !n.empty) as Note[];\n  return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\n}\n\n/**\n * Get sorted notes with duplicates removed. Pitch classes are listed\n * before notes.\n *\n * @function\n * @param {string[]} array\n * @return {string[]} unique sorted notes\n *\n * @example\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\n */\nexport function sortedUniqNoteNames(arr: string[]): string[] {\n  return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} array\n * @return {Array} the array shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an array\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n}\n","// index.ts\r\nimport { detect } from \"@tonaljs/chord-detect\";\r\nimport {\r\n  all as chordTypes,\r\n  get as getChordType\r\n} from \"@tonaljs/chord-type\";\r\nimport { tonicIntervalsTransposer } from \"@tonaljs/core\";\r\nimport {\r\n  deprecate,\r\n  distance,\r\n  note,\r\n  tokenizeNote,\r\n  transpose as transposeNote\r\n} from \"@tonaljs/core\";\r\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\r\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\r\nimport { detect as detect2 } from \"@tonaljs/chord-detect\";\r\nvar NoChord = {\r\n  empty: true,\r\n  name: \"\",\r\n  symbol: \"\",\r\n  root: \"\",\r\n  rootDegree: 0,\r\n  type: \"\",\r\n  tonic: null,\r\n  setNum: NaN,\r\n  quality: \"Unknown\",\r\n  chroma: \"\",\r\n  normalized: \"\",\r\n  aliases: [],\r\n  notes: [],\r\n  intervals: []\r\n};\r\nfunction tokenize(name) {\r\n  const [letter, acc, oct, type] = tokenizeNote(name);\r\n  if (letter === \"\") {\r\n    return [\"\", name];\r\n  }\r\n  if (letter === \"A\" && type === \"ug\") {\r\n    return [\"\", \"aug\"];\r\n  }\r\n  return [letter + acc, oct + type];\r\n}\r\nfunction get(src) {\r\n  if (src === \"\") {\r\n    return NoChord;\r\n  }\r\n  if (Array.isArray(src) && src.length === 2) {\r\n    return getChord(src[1], src[0]);\r\n  } else {\r\n    const [tonic, type] = tokenize(src);\r\n    const chord2 = getChord(type, tonic);\r\n    return chord2.empty ? getChord(src) : chord2;\r\n  }\r\n}\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n  const type = getChordType(typeName);\r\n  const tonic = note(optionalTonic || \"\");\r\n  const root = note(optionalRoot || \"\");\r\n  if (type.empty || optionalTonic && tonic.empty || optionalRoot && root.empty) {\r\n    return NoChord;\r\n  }\r\n  const rootInterval = distance(tonic.pc, root.pc);\r\n  const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n  if (!root.empty && !rootDegree) {\r\n    return NoChord;\r\n  }\r\n  const intervals = Array.from(type.intervals);\r\n  for (let i = 1; i < rootDegree; i++) {\r\n    const num = intervals[0][0];\r\n    const quality = intervals[0][1];\r\n    const newNum = parseInt(num, 10) + 7;\r\n    intervals.push(`${newNum}${quality}`);\r\n    intervals.shift();\r\n  }\r\n  const notes = tonic.empty ? [] : intervals.map((i) => transposeNote(tonic, i));\r\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc}`;\r\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n  return {\r\n    ...type,\r\n    name,\r\n    symbol,\r\n    type: type.name,\r\n    root: root.name,\r\n    intervals,\r\n    rootDegree,\r\n    tonic: tonic.name,\r\n    notes\r\n  };\r\n}\r\nvar chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\nfunction transpose(chordName, interval) {\r\n  const [tonic, type] = tokenize(chordName);\r\n  if (!tonic) {\r\n    return chordName;\r\n  }\r\n  return transposeNote(tonic, interval) + type;\r\n}\r\nfunction chordScales(name) {\r\n  const s = get(name);\r\n  const isChordIncluded = isSupersetOf(s.chroma);\r\n  return scaleTypes().filter((scale) => isChordIncluded(scale.chroma)).map((scale) => scale.name);\r\n}\r\nfunction extended(chordName) {\r\n  const s = get(chordName);\r\n  const isSuperset = isSupersetOf(s.chroma);\r\n  return chordTypes().filter((chord2) => isSuperset(chord2.chroma)).map((chord2) => s.tonic + chord2.aliases[0]);\r\n}\r\nfunction reduced(chordName) {\r\n  const s = get(chordName);\r\n  const isSubset = isSubsetOf(s.chroma);\r\n  return chordTypes().filter((chord2) => isSubset(chord2.chroma)).map((chord2) => s.tonic + chord2.aliases[0]);\r\n}\r\nfunction degrees(chordName) {\r\n  const { intervals, tonic } = get(chordName);\r\n  const transpose2 = tonicIntervalsTransposer(intervals, tonic);\r\n  return (degree) => degree ? transpose2(degree > 0 ? degree - 1 : degree) : \"\";\r\n}\r\nfunction steps(chordName) {\r\n  const { intervals, tonic } = get(chordName);\r\n  return tonicIntervalsTransposer(intervals, tonic);\r\n}\r\nvar chord_default = {\r\n  getChord,\r\n  get,\r\n  detect,\r\n  chordScales,\r\n  extended,\r\n  reduced,\r\n  tokenize,\r\n  transpose,\r\n  degrees,\r\n  steps,\r\n  // deprecate\r\n  chord\r\n};\r\nexport {\r\n  chord,\r\n  chordScales,\r\n  chord_default as default,\r\n  degrees,\r\n  detect2 as detect,\r\n  extended,\r\n  get,\r\n  getChord,\r\n  reduced,\r\n  steps,\r\n  tokenize,\r\n  transpose\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { tonicIntervalsTransposer } from \"@tonaljs/core\";\n\nimport {\n  deprecate,\n  distance,\n  note,\n  NoteName,\n  tokenizeNote,\n  transpose as transposeNote,\n} from \"@tonaljs/core\";\n\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\n\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordName = string;\ntype ChordNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return [\"\", name];\n  }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (letter === \"A\" && type === \"ug\") {\n    return [\"\", \"aug\"];\n  }\n  return [letter + acc, oct + type];\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordName | ChordNameTokens): Chord {\n  if (src === \"\") {\n    return NoChord;\n  }\n  if (Array.isArray(src) && src.length === 2) {\n    return getChord(src[1], src[0]);\n  } else {\n    const [tonic, type] = tokenize(src);\n    const chord = getChord(type, tonic);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalRoot?: string\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const root = note(optionalRoot || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalRoot && root.empty)\n  ) {\n    return NoChord;\n  }\n\n  const rootInterval = distance(tonic.pc, root.pc);\n  const rootDegree = type.intervals.indexOf(rootInterval) + 1;\n  if (!root.empty && !rootDegree) {\n    return NoChord;\n  }\n\n  const intervals = Array.from(type.intervals);\n\n  for (let i = 1; i < rootDegree; i++) {\n    const num = intervals[0][0];\n    const quality = intervals[0][1];\n    const newNum = parseInt(num, 10) + 7;\n    intervals.push(`${newNum}${quality}`);\n    intervals.shift();\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    type: type.name,\n    root: root.name,\n    intervals,\n    rootDegree,\n    tonic: tonic.name,\n    notes,\n  };\n}\n\nexport const chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  return transposeNote(tonic, interval) + type;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: string | ChordNameTokens) {\n  const { intervals, tonic } = get(chordName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: string | ChordNameTokens) {\n  const { intervals, tonic } = get(chordName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n\n  // deprecate\n  chord,\n};\n","// index.ts\r\nimport { all } from \"@tonaljs/chord-type\";\r\nimport { note } from \"@tonaljs/core\";\r\nimport { modes } from \"@tonaljs/pcset\";\r\nvar namedSet = (notes) => {\r\n  const pcToName = notes.reduce((record, n) => {\r\n    const chroma = note(n).chroma;\r\n    if (chroma !== void 0) {\r\n      record[chroma] = record[chroma] || note(n).name;\r\n    }\r\n    return record;\r\n  }, {});\r\n  return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source, options = {}) {\r\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n  if (note.length === 0) {\r\n    return [];\r\n  }\r\n  const found = findMatches(notes, 1, options);\r\n  return found.filter((chord) => chord.weight).sort((a, b) => b.weight - a.weight).map((chord) => chord.name);\r\n}\r\nvar BITMASK = {\r\n  // 3m 000100000000\r\n  // 3M 000010000000\r\n  anyThirds: 384,\r\n  // 5P 000000010000\r\n  perfectFifth: 16,\r\n  // 5d 000000100000\r\n  // 5A 000000001000\r\n  nonPerfectFifths: 40,\r\n  anySeventh: 3\r\n};\r\nvar testChromaNumber = (bitmask) => (chromaNumber) => Boolean(chromaNumber & bitmask);\r\nvar hasAnyThird = testChromaNumber(BITMASK.anyThirds);\r\nvar hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\r\nvar hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\r\nvar hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\r\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType) {\r\n  const chromaNumber = parseInt(chordType.chroma, 2);\r\n  return hasAnyThird(chromaNumber) && hasPerfectFifth(chromaNumber) && hasAnySeventh(chromaNumber);\r\n}\r\nfunction withPerfectFifth(chroma) {\r\n  const chromaNumber = parseInt(chroma, 2);\r\n  return hasNonPerfectFifth(chromaNumber) ? chroma : (chromaNumber | 16).toString(2);\r\n}\r\nfunction findMatches(notes, weight, options) {\r\n  const tonic = notes[0];\r\n  const tonicChroma = note(tonic).chroma;\r\n  const noteName = namedSet(notes);\r\n  const allModes = modes(notes, false);\r\n  const found = [];\r\n  allModes.forEach((mode, index) => {\r\n    const modeWithPerfectFifth = options.assumePerfectFifth && withPerfectFifth(mode);\r\n    const chordTypes = all().filter((chordType) => {\r\n      if (options.assumePerfectFifth && hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)) {\r\n        return chordType.chroma === modeWithPerfectFifth;\r\n      }\r\n      return chordType.chroma === mode;\r\n    });\r\n    chordTypes.forEach((chordType) => {\r\n      const chordName = chordType.aliases[0];\r\n      const baseNote = noteName(index);\r\n      const isInversion = index !== tonicChroma;\r\n      if (isInversion) {\r\n        found.push({\r\n          weight: 0.5 * weight,\r\n          name: `${baseNote}${chordName}/${tonic}`\r\n        });\r\n      } else {\r\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\r\n      }\r\n    });\r\n  });\r\n  return found;\r\n}\r\nvar chord_detect_default = { detect };\r\nexport {\r\n  chord_detect_default as default,\r\n  detect\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { note } from \"@tonaljs/core\";\nimport { modes } from \"@tonaljs/pcset\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean\n}\nexport function detect(source: string[], options: Partial<DetectOptions> = {}): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n}\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) => Boolean(chromaNumber & bitmask)\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds)\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth)\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh)\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths)\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2)\n  return hasAnyThird(chromaNumber) && hasPerfectFifth(chromaNumber) && hasAnySeventh(chromaNumber)\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2)\n  return hasNonPerfectFifth(chromaNumber)\n  ? chroma \n  : (chromaNumber | 16).toString(2)\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean\n}\nfunction findMatches(notes: string[], weight: number, options: Partial<FindMatchesOptions>): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth = options.assumePerfectFifth && withPerfectFifth(mode)\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if(options.assumePerfectFifth && hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)) {\n        return chordType.chroma === modeWithPerfectFifth\n      }\n      return chordType.chroma === mode\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\nexport default { detect };\n","// index.ts\r\nimport { deprecate } from \"@tonaljs/core\";\r\nimport {\r\n  EmptyPcset,\r\n  get as pcset\r\n} from \"@tonaljs/pcset\";\r\n\r\n// data.ts\r\nvar CHORDS = [\r\n  // ==Major==\r\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\r\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 \\u0394 ma7 M7 Maj7 ^7\"],\r\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 \\u03949 ^9\"],\r\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\r\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\r\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\r\n  [\r\n    \"1P 3M 5P 7M 11A\",\r\n    \"major seventh sharp eleventh\",\r\n    \"maj#4 \\u0394#4 \\u0394#11 M7#11 ^7#11 maj7#11\"\r\n  ],\r\n  // ==Minor==\r\n  // '''Normal'''\r\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n  [\r\n    \"1P 3m 5P 7M\",\r\n    \"minor/major seventh\",\r\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -\\u03947 m\\u0394 -^7 -maj7\"\r\n  ],\r\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\r\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\r\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\r\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\r\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\r\n  // '''Diminished'''\r\n  [\"1P 3m 5d\", \"diminished\", \"dim \\xB0 o\"],\r\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 \\xB07 o7\"],\r\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 \\xF8 -7b5 h7 h\"],\r\n  // ==Dominant/Seventh==\r\n  // '''Normal'''\r\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n  // '''Altered'''\r\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n  // '''Suspended'''\r\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\r\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\r\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n  [\r\n    \"1P 4P 5P 7m 9m\",\r\n    \"suspended fourth flat ninth\",\r\n    \"b9sus phryg 7b9sus 7b9sus4\"\r\n  ],\r\n  // ==Other==\r\n  [\"1P 5P\", \"fifth\", \"5\"],\r\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\r\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\r\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\r\n  [\r\n    \"1P 3M 5P 7M 9M 11A\",\r\n    \"major sharp eleventh (lydian)\",\r\n    \"maj9#11 \\u03949#11 ^9#11\"\r\n  ],\r\n  // ==Legacy==\r\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\r\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\r\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\r\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\r\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\r\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\r\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n  [\"1P 3M 7m\", \"\", \"7no5\"],\r\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\r\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"]\r\n];\r\nvar data_default = CHORDS;\r\n\r\n// index.ts\r\nvar NoChordType = {\r\n  ...EmptyPcset,\r\n  name: \"\",\r\n  quality: \"Unknown\",\r\n  intervals: [],\r\n  aliases: []\r\n};\r\nvar dictionary = [];\r\nvar index = {};\r\nfunction get(type) {\r\n  return index[type] || NoChordType;\r\n}\r\nvar chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\nfunction names() {\r\n  return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\nfunction symbols() {\r\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\nfunction keys() {\r\n  return Object.keys(index);\r\n}\r\nfunction all() {\r\n  return dictionary.slice();\r\n}\r\nvar entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\nfunction removeAll() {\r\n  dictionary = [];\r\n  index = {};\r\n}\r\nfunction add(intervals, aliases, fullName) {\r\n  const quality = getQuality(intervals);\r\n  const chord = {\r\n    ...pcset(intervals),\r\n    name: fullName || \"\",\r\n    quality,\r\n    intervals,\r\n    aliases\r\n  };\r\n  dictionary.push(chord);\r\n  if (chord.name) {\r\n    index[chord.name] = chord;\r\n  }\r\n  index[chord.setNum] = chord;\r\n  index[chord.chroma] = chord;\r\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n  index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n  const has = (interval) => intervals.indexOf(interval) !== -1;\r\n  return has(\"5A\") ? \"Augmented\" : has(\"3M\") ? \"Major\" : has(\"5d\") ? \"Diminished\" : has(\"3m\") ? \"Minor\" : \"Unknown\";\r\n}\r\ndata_default.forEach(\r\n  ([ivls, fullName, names2]) => add(ivls.split(\" \"), names2.split(\" \"), fullName)\r\n);\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar chord_type_default = {\r\n  names,\r\n  symbols,\r\n  get,\r\n  all,\r\n  add,\r\n  removeAll,\r\n  keys,\r\n  // deprecated\r\n  entries,\r\n  chordType\r\n};\r\nexport {\r\n  add,\r\n  addAlias,\r\n  all,\r\n  chordType,\r\n  chord_type_default as default,\r\n  entries,\r\n  get,\r\n  keys,\r\n  names,\r\n  removeAll,\r\n  symbols\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n","// index.ts\r\nimport { compact, range, rotate } from \"@tonaljs/collection\";\r\nimport {\r\n  deprecate,\r\n  interval,\r\n  note\r\n} from \"@tonaljs/core\";\r\nvar EmptyPcset = {\r\n  empty: true,\r\n  name: \"\",\r\n  setNum: 0,\r\n  chroma: \"000000000000\",\r\n  normalized: \"000000000000\",\r\n  intervals: []\r\n};\r\nvar setNumToChroma = (num2) => Number(num2).toString(2);\r\nvar chromaToNumber = (chroma2) => parseInt(chroma2, 2);\r\nvar REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n  return REGEX.test(set);\r\n}\r\nvar isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nvar isPcset = (set) => set && isChroma(set.chroma);\r\nvar cache = { [EmptyPcset.chroma]: EmptyPcset };\r\nfunction get(src) {\r\n  const chroma2 = isChroma(src) ? src : isPcsetNum(src) ? setNumToChroma(src) : Array.isArray(src) ? listToChroma(src) : isPcset(src) ? src.chroma : EmptyPcset.chroma;\r\n  return cache[chroma2] = cache[chroma2] || chromaToPcset(chroma2);\r\n}\r\nvar pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\nvar chroma = (set) => get(set).chroma;\r\nvar intervals = (set) => get(set).intervals;\r\nvar num = (set) => get(set).setNum;\r\nvar IVLS = [\r\n  \"1P\",\r\n  \"2m\",\r\n  \"2M\",\r\n  \"3m\",\r\n  \"3M\",\r\n  \"4P\",\r\n  \"5d\",\r\n  \"5P\",\r\n  \"6m\",\r\n  \"6M\",\r\n  \"7m\",\r\n  \"7M\"\r\n];\r\nfunction chromaToIntervals(chroma2) {\r\n  const intervals2 = [];\r\n  for (let i = 0; i < 12; i++) {\r\n    if (chroma2.charAt(i) === \"1\")\r\n      intervals2.push(IVLS[i]);\r\n  }\r\n  return intervals2;\r\n}\r\nfunction chromas() {\r\n  return range(2048, 4095).map(setNumToChroma);\r\n}\r\nfunction modes(set, normalize = true) {\r\n  const pcs = get(set);\r\n  const binary = pcs.chroma.split(\"\");\r\n  return compact(\r\n    binary.map((_, i) => {\r\n      const r = rotate(i, binary);\r\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    })\r\n  );\r\n}\r\nfunction isEqual(s1, s2) {\r\n  return get(s1).setNum === get(s2).setNum;\r\n}\r\nfunction isSubsetOf(set) {\r\n  const s = get(set).setNum;\r\n  return (notes) => {\r\n    const o = get(notes).setNum;\r\n    return s && s !== o && (o & s) === o;\r\n  };\r\n}\r\nfunction isSupersetOf(set) {\r\n  const s = get(set).setNum;\r\n  return (notes) => {\r\n    const o = get(notes).setNum;\r\n    return s && s !== o && (o | s) === o;\r\n  };\r\n}\r\nfunction isNoteIncludedIn(set) {\r\n  const s = get(set);\r\n  return (noteName) => {\r\n    const n = note(noteName);\r\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n  };\r\n}\r\nvar includes = isNoteIncludedIn;\r\nfunction filter(set) {\r\n  const isIncluded = isNoteIncludedIn(set);\r\n  return (notes) => {\r\n    return notes.filter(isIncluded);\r\n  };\r\n}\r\nvar pcset_default = {\r\n  get,\r\n  chroma,\r\n  num,\r\n  intervals,\r\n  chromas,\r\n  isSupersetOf,\r\n  isSubsetOf,\r\n  isNoteIncludedIn,\r\n  isEqual,\r\n  filter,\r\n  modes,\r\n  pcset\r\n};\r\nfunction chromaRotations(chroma2) {\r\n  const binary = chroma2.split(\"\");\r\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma2) {\r\n  const setNum = chromaToNumber(chroma2);\r\n  const normalizedNum = chromaRotations(chroma2).map(chromaToNumber).filter((n) => n >= 2048).sort()[0];\r\n  const normalized = setNumToChroma(normalizedNum);\r\n  const intervals2 = chromaToIntervals(chroma2);\r\n  return {\r\n    empty: false,\r\n    name: \"\",\r\n    setNum,\r\n    chroma: chroma2,\r\n    normalized,\r\n    intervals: intervals2\r\n  };\r\n}\r\nfunction listToChroma(set) {\r\n  if (set.length === 0) {\r\n    return EmptyPcset.chroma;\r\n  }\r\n  let pitch;\r\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  for (let i = 0; i < set.length; i++) {\r\n    pitch = note(set[i]);\r\n    if (pitch.empty)\r\n      pitch = interval(set[i]);\r\n    if (!pitch.empty)\r\n      binary[pitch.chroma] = 1;\r\n  }\r\n  return binary.join(\"\");\r\n}\r\nexport {\r\n  EmptyPcset,\r\n  chroma,\r\n  chromaToIntervals,\r\n  chromas,\r\n  pcset_default as default,\r\n  filter,\r\n  get,\r\n  includes,\r\n  isChroma,\r\n  isEqual,\r\n  isNoteIncludedIn,\r\n  isSubsetOf,\r\n  isSupersetOf,\r\n  modes,\r\n  pcset\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { compact, range, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  Interval,\n  interval,\n  IntervalName,\n  Named,\n  note,\n  Note,\n  NoteName,\n  NotFound,\n} from \"@tonaljs/core\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset extends Named {\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string => Number(num).toString(2);\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n    ? setNumToChroma(src)\n    : Array.isArray(src)\n    ? listToChroma(src)\n    : isPcset(src)\n    ? src.chroma\n    : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * Use Pcset.properties\n * @function\n * @deprecated\n */\nexport const pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nconst intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nconst num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * @private\n * Get the intervals of a pcset *starting from C*\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nexport function chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are numentical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n","// index.ts\r\nfunction ascR(b, n) {\r\n  const a = [];\r\n  for (; n--; a[n] = n + b)\r\n    ;\r\n  return a;\r\n}\r\nfunction descR(b, n) {\r\n  const a = [];\r\n  for (; n--; a[n] = b - n)\r\n    ;\r\n  return a;\r\n}\r\nfunction range(from, to) {\r\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\nfunction rotate(times, arr) {\r\n  const len = arr.length;\r\n  const n = (times % len + len) % len;\r\n  return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\nfunction compact(arr) {\r\n  return arr.filter((n) => n === 0 || n);\r\n}\r\nfunction shuffle(arr, rnd = Math.random) {\r\n  let i;\r\n  let t;\r\n  let m = arr.length;\r\n  while (m) {\r\n    i = Math.floor(rnd() * m--);\r\n    t = arr[m];\r\n    arr[m] = arr[i];\r\n    arr[i] = t;\r\n  }\r\n  return arr;\r\n}\r\nfunction permutations(arr) {\r\n  if (arr.length === 0) {\r\n    return [[]];\r\n  }\r\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n    return acc.concat(\r\n      arr.map((e, pos) => {\r\n        const newPerm = perm.slice();\r\n        newPerm.splice(pos, 0, arr[0]);\r\n        return newPerm;\r\n      })\r\n    );\r\n  }, []);\r\n}\r\nvar collection_default = {\r\n  compact,\r\n  permutations,\r\n  range,\r\n  rotate,\r\n  shuffle\r\n};\r\nexport {\r\n  compact,\r\n  collection_default as default,\r\n  permutations,\r\n  range,\r\n  rotate,\r\n  shuffle\r\n};\r\n//# sourceMappingURL=index.mjs.map","// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n}\n\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n","// index.ts\r\nimport { deprecate } from \"@tonaljs/core\";\r\nimport {\r\n  EmptyPcset,\r\n  get as pcset\r\n} from \"@tonaljs/pcset\";\r\n\r\n// data.ts\r\nvar SCALES = [\r\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\r\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\r\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n  [\r\n    \"1P 2m 2A 3M 4A 6m 7m\",\r\n    \"altered\",\r\n    \"super locrian\",\r\n    \"diminished whole tone\",\r\n    \"pomeroy\"\r\n  ],\r\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n  [\r\n    \"1P 2M 3M 4P 5P 6m 7m\",\r\n    \"mixolydian b6\",\r\n    \"melodic minor fifth mode\",\r\n    \"hindu\"\r\n  ],\r\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n  [\r\n    \"1P 2m 3m 4P 5P 6M 7m\",\r\n    \"dorian b2\",\r\n    \"phrygian #6\",\r\n    \"melodic minor second mode\"\r\n  ],\r\n  [\r\n    \"1P 2m 3m 4d 5d 6m 7d\",\r\n    \"ultralocrian\",\r\n    \"superlocrian bb7\",\r\n    \"superlocrian diminished\"\r\n  ],\r\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n  [\r\n    \"1P 2M 3m 4A 5P 6M 7m\",\r\n    \"dorian #4\",\r\n    \"ukrainian dorian\",\r\n    \"romanian minor\",\r\n    \"altered dorian\"\r\n  ],\r\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n  [\r\n    \"1P 2M 3M 4P 5A 6M 7M\",\r\n    \"major augmented\",\r\n    \"major #5\",\r\n    \"ionian augmented\",\r\n    \"ionian #5\"\r\n  ],\r\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n  [\r\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\r\n    \"half-whole diminished\",\r\n    \"dominant diminished\",\r\n    \"messiaen's mode #2\"\r\n  ],\r\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"]\r\n];\r\nvar data_default = SCALES;\r\n\r\n// index.ts\r\nvar NoScaleType = {\r\n  ...EmptyPcset,\r\n  intervals: [],\r\n  aliases: []\r\n};\r\nvar dictionary = [];\r\nvar index = {};\r\nfunction names() {\r\n  return dictionary.map((scale) => scale.name);\r\n}\r\nfunction get(type) {\r\n  return index[type] || NoScaleType;\r\n}\r\nvar scaleType = deprecate(\r\n  \"ScaleDictionary.scaleType\",\r\n  \"ScaleType.get\",\r\n  get\r\n);\r\nfunction all() {\r\n  return dictionary.slice();\r\n}\r\nvar entries = deprecate(\r\n  \"ScaleDictionary.entries\",\r\n  \"ScaleType.all\",\r\n  all\r\n);\r\nfunction keys() {\r\n  return Object.keys(index);\r\n}\r\nfunction removeAll() {\r\n  dictionary = [];\r\n  index = {};\r\n}\r\nfunction add(intervals, name, aliases = []) {\r\n  const scale = { ...pcset(intervals), name, intervals, aliases };\r\n  dictionary.push(scale);\r\n  index[scale.name] = scale;\r\n  index[scale.setNum] = scale;\r\n  index[scale.chroma] = scale;\r\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n  return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n  index[alias] = scale;\r\n}\r\ndata_default.forEach(\r\n  ([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases)\r\n);\r\nvar scale_type_default = {\r\n  names,\r\n  get,\r\n  all,\r\n  add,\r\n  removeAll,\r\n  keys,\r\n  entries,\r\n  scaleType\r\n};\r\nexport {\r\n  NoScaleType,\r\n  add,\r\n  addAlias,\r\n  all,\r\n  scale_type_default as default,\r\n  entries,\r\n  get,\r\n  keys,\r\n  names,\r\n  removeAll,\r\n  scaleType\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\nexport const scaleType = deprecate(\n  \"ScaleDictionary.scaleType\",\n  \"ScaleType.get\",\n  get\n);\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\n  \"ScaleDictionary.entries\",\n  \"ScaleType.all\",\n  all\n);\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = []\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases)\n);\n\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n","// data.ts\r\nvar DATA = [\r\n  [\r\n    0.125,\r\n    \"dl\",\r\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"]\r\n  ],\r\n  [0.25, \"l\", [\"long\", \"longa\"]],\r\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n  [1, \"w\", [\"whole\", \"semibreve\"]],\r\n  [2, \"h\", [\"half\", \"minim\"]],\r\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n  [8, \"e\", [\"eighth\", \"quaver\"]],\r\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n  [128, \"h\", [\"hundred twenty-eighth\"]],\r\n  [256, \"th\", [\"two hundred fifty-sixth\"]]\r\n];\r\nvar data_default = DATA;\r\n\r\n// index.ts\r\nvar VALUES = [];\r\ndata_default.forEach(\r\n  ([denominator, shorthand, names2]) => add(denominator, shorthand, names2)\r\n);\r\nvar NoDuration = {\r\n  empty: true,\r\n  name: \"\",\r\n  value: 0,\r\n  fraction: [0, 0],\r\n  shorthand: \"\",\r\n  dots: \"\",\r\n  names: []\r\n};\r\nfunction names() {\r\n  return VALUES.reduce((names2, duration) => {\r\n    duration.names.forEach((name) => names2.push(name));\r\n    return names2;\r\n  }, []);\r\n}\r\nfunction shorthands() {\r\n  return VALUES.map((dur) => dur.shorthand);\r\n}\r\nvar REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n  const [_, simple, dots] = REGEX.exec(name) || [];\r\n  const base = VALUES.find(\r\n    (dur) => dur.shorthand === simple || dur.names.includes(simple)\r\n  );\r\n  if (!base) {\r\n    return NoDuration;\r\n  }\r\n  const fraction2 = calcDots(base.fraction, dots.length);\r\n  const value2 = fraction2[0] / fraction2[1];\r\n  return { ...base, name, dots, value: value2, fraction: fraction2 };\r\n}\r\nvar value = (name) => get(name).value;\r\nvar fraction = (name) => get(name).fraction;\r\nvar duration_value_default = { names, shorthands, get, value, fraction };\r\nfunction add(denominator, shorthand, names2) {\r\n  VALUES.push({\r\n    empty: false,\r\n    dots: \"\",\r\n    name: \"\",\r\n    value: 1 / denominator,\r\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n    shorthand,\r\n    names: names2\r\n  });\r\n}\r\nfunction calcDots(fraction2, dots) {\r\n  const pow = Math.pow(2, dots);\r\n  let numerator = fraction2[0] * pow;\r\n  let denominator = fraction2[1] * pow;\r\n  const base = numerator;\r\n  for (let i = 0; i < dots; i++) {\r\n    numerator += base / Math.pow(2, i + 1);\r\n  }\r\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n    numerator /= 2;\r\n    denominator /= 2;\r\n  }\r\n  return [numerator, denominator];\r\n}\r\nexport {\r\n  duration_value_default as default,\r\n  fraction,\r\n  get,\r\n  names,\r\n  shorthands,\r\n  value\r\n};\r\n//# sourceMappingURL=index.mjs.map","// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA: [number, string, string[]][] = [\n  [\n    0.125,\n    \"dl\",\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\n  ],\n  [0.25, \"l\", [\"long\", \"longa\"]],\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\n  [1, \"w\", [\"whole\", \"semibreve\"]],\n  [2, \"h\", [\"half\", \"minim\"]],\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\n  [8, \"e\", [\"eighth\", \"quaver\"]],\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\n  [128, \"h\", [\"hundred twenty-eighth\"]],\n  [256, \"th\", [\"two hundred fifty-sixth\"]],\n];\n\nexport default DATA;\n","import DATA from \"./data\";\n\ntype Fraction = [number, number];\n\nconst VALUES: DurationValue[] = [];\n\nDATA.forEach(([denominator, shorthand, names]) =>\n  add(denominator, shorthand, names)\n);\n\nexport interface DurationValue {\n  empty: boolean;\n  value: number;\n  name: string;\n  fraction: Fraction;\n  shorthand: string;\n  dots: string;\n  names: string[];\n}\n\nconst NoDuration: DurationValue = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: [],\n};\n\nexport function names(): string[] {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach((name) => names.push(name));\n    return names;\n  }, [] as string[]);\n}\n\nexport function shorthands(): string[] {\n  return VALUES.map((dur) => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nexport function get(name: string): DurationValue {\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(\n    (dur) => dur.shorthand === simple || dur.names.includes(simple)\n  );\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n\n  return { ...base, name, dots, value, fraction };\n}\n\nexport const value = (name: string) => get(name).value;\nexport const fraction = (name: string) => get(name).fraction;\n\nexport default { names, shorthands, get, value, fraction };\n\n//// PRIVATE ////\n\nfunction add(denominator: number, shorthand: string, names: string[]) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names,\n  });\n}\n\nfunction calcDots(fraction: Fraction, dots: number): Fraction {\n  const pow = Math.pow(2, dots);\n\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator;\n\n  // add fractions\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  }\n\n  // simplify\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n  return [numerator, denominator];\n}\n","// index.ts\r\nimport {\r\n  coordToInterval,\r\n  distance as dist,\r\n  interval as props\r\n} from \"@tonaljs/core\";\r\nfunction names() {\r\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\nvar get = props;\r\nvar name = (name2) => props(name2).name;\r\nvar semitones = (name2) => props(name2).semitones;\r\nvar quality = (name2) => props(name2).q;\r\nvar num = (name2) => props(name2).num;\r\nfunction simplify(name2) {\r\n  const i = props(name2);\r\n  return i.empty ? \"\" : i.simple + i.q;\r\n}\r\nfunction invert(name2) {\r\n  const i = props(name2);\r\n  if (i.empty) {\r\n    return \"\";\r\n  }\r\n  const step = (7 - i.step) % 7;\r\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nfunction fromSemitones(semitones2) {\r\n  const d = semitones2 < 0 ? -1 : 1;\r\n  const n = Math.abs(semitones2);\r\n  const c = n % 12;\r\n  const o = Math.floor(n / 12);\r\n  return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\nvar distance = dist;\r\nvar add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\nvar addTo = (interval) => (other) => add(interval, other);\r\nvar substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nfunction transposeFifths(interval, fifths) {\r\n  const ivl = get(interval);\r\n  if (ivl.empty)\r\n    return \"\";\r\n  const [nFifths, nOcts, dir] = ivl.coord;\r\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\r\n}\r\nvar interval_default = {\r\n  names,\r\n  get,\r\n  name,\r\n  num,\r\n  semitones,\r\n  quality,\r\n  fromSemitones,\r\n  distance,\r\n  invert,\r\n  simplify,\r\n  add,\r\n  addTo,\r\n  substract,\r\n  transposeFifths\r\n};\r\nfunction combinator(fn) {\r\n  return (a, b) => {\r\n    const coordA = props(a).coord;\r\n    const coordB = props(b).coord;\r\n    if (coordA && coordB) {\r\n      const coord = fn(coordA, coordB);\r\n      return coordToInterval(coord).name;\r\n    }\r\n  };\r\n}\r\nexport {\r\n  add,\r\n  addTo,\r\n  interval_default as default,\r\n  distance,\r\n  fromSemitones,\r\n  get,\r\n  invert,\r\n  name,\r\n  names,\r\n  num,\r\n  quality,\r\n  semitones,\r\n  simplify,\r\n  substract,\r\n  transposeFifths\r\n};\r\n//# sourceMappingURL=index.mjs.map","import {\n  coordToInterval,\n  distance as dist,\n  interval as props,\n  IntervalCoordinates,\n  IntervalName,\n  NoteCoordinates,\n  tokenizeInterval as tokenize,\n} from \"@tonaljs/core\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the substracted interval name\n * @example\n * Interval.substract('5P', '3M') // => '3m'\n * Interval.substract('3M', '5P') // => '-3m'\n */\nexport const substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  substract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n","// index.ts\r\nimport { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\r\nimport { transposeFifths } from \"@tonaljs/note\";\r\nimport { get as roman } from \"@tonaljs/roman-numeral\";\r\nvar Empty = Object.freeze([]);\r\nvar NoKey = {\r\n  type: \"major\",\r\n  tonic: \"\",\r\n  alteration: 0,\r\n  keySignature: \"\"\r\n};\r\nvar NoKeyScale = {\r\n  tonic: \"\",\r\n  grades: Empty,\r\n  intervals: Empty,\r\n  scale: Empty,\r\n  triads: Empty,\r\n  chords: Empty,\r\n  chordsHarmonicFunction: Empty,\r\n  chordScales: Empty\r\n};\r\nvar NoMajorKey = {\r\n  ...NoKey,\r\n  ...NoKeyScale,\r\n  type: \"major\",\r\n  minorRelative: \"\",\r\n  scale: Empty,\r\n  secondaryDominants: Empty,\r\n  secondaryDominantsMinorRelative: Empty,\r\n  substituteDominants: Empty,\r\n  substituteDominantsMinorRelative: Empty\r\n};\r\nvar NoMinorKey = {\r\n  ...NoKey,\r\n  type: \"minor\",\r\n  relativeMajor: \"\",\r\n  natural: NoKeyScale,\r\n  harmonic: NoKeyScale,\r\n  melodic: NoKeyScale\r\n};\r\nvar mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, triads, chords, harmonicFunctions, chordScales) {\r\n  return (tonic) => {\r\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\r\n    const scale = intervals.map((interval) => transpose(tonic, interval));\r\n    return {\r\n      tonic,\r\n      grades,\r\n      intervals,\r\n      scale,\r\n      triads: mapScaleToType(scale, triads),\r\n      chords: mapScaleToType(scale, chords),\r\n      chordsHarmonicFunction: harmonicFunctions.slice(),\r\n      chordScales: mapScaleToType(scale, chordScales, \" \")\r\n    };\r\n  };\r\n}\r\nvar distInFifths = (from, to) => {\r\n  const f = note(from);\r\n  const t = note(to);\r\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nvar MajorScale = keyScale(\r\n  \"I II III IV V VI VII\".split(\" \"),\r\n  \" m m   m dim\".split(\" \"),\r\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\r\n  \"T SD T SD D T D\".split(\" \"),\r\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\")\r\n);\r\nvar NaturalScale = keyScale(\r\n  \"I II bIII IV V bVI bVII\".split(\" \"),\r\n  \"m dim  m m  \".split(\" \"),\r\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\r\n  \"T SD T SD D SD SD\".split(\" \"),\r\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\")\r\n);\r\nvar HarmonicScale = keyScale(\r\n  \"I II bIII IV V bVI VII\".split(\" \"),\r\n  \"m dim aug m   dim\".split(\" \"),\r\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\r\n  \"T SD T SD D SD D\".split(\" \"),\r\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\r\n    \",\"\r\n  )\r\n);\r\nvar MelodicScale = keyScale(\r\n  \"I II bIII IV V VI VII\".split(\" \"),\r\n  \"m m aug   dim dim\".split(\" \"),\r\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\r\n  \"T SD T SD D  \".split(\" \"),\r\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\r\n    \",\"\r\n  )\r\n);\r\nfunction majorKey(tonic) {\r\n  const pc = note(tonic).pc;\r\n  if (!pc)\r\n    return NoMajorKey;\r\n  const keyScale2 = MajorScale(pc);\r\n  const alteration = distInFifths(\"C\", pc);\r\n  const romanInTonic = (src) => {\r\n    const r = roman(src);\r\n    if (r.empty)\r\n      return \"\";\r\n    return transpose(tonic, r.interval) + r.chordType;\r\n  };\r\n  return {\r\n    ...keyScale2,\r\n    type: \"major\",\r\n    minorRelative: transpose(pc, \"-3m\"),\r\n    alteration,\r\n    keySignature: altToAcc(alteration),\r\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\".split(\" \").map(romanInTonic),\r\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\".split(\" \").map(romanInTonic),\r\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\".split(\" \").map(romanInTonic)\r\n  };\r\n}\r\nfunction minorKey(tnc) {\r\n  const pc = note(tnc).pc;\r\n  if (!pc)\r\n    return NoMinorKey;\r\n  const alteration = distInFifths(\"C\", pc) - 3;\r\n  return {\r\n    type: \"minor\",\r\n    tonic: pc,\r\n    relativeMajor: transpose(pc, \"3m\"),\r\n    alteration,\r\n    keySignature: altToAcc(alteration),\r\n    natural: NaturalScale(pc),\r\n    harmonic: HarmonicScale(pc),\r\n    melodic: MelodicScale(pc)\r\n  };\r\n}\r\nfunction majorTonicFromKeySignature(sig) {\r\n  if (typeof sig === \"number\") {\r\n    return transposeFifths(\"C\", sig);\r\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n    return transposeFifths(\"C\", accToAlt(sig));\r\n  }\r\n  return null;\r\n}\r\nvar key_default = { majorKey, majorTonicFromKeySignature, minorKey };\r\nexport {\r\n  key_default as default,\r\n  majorKey,\r\n  majorTonicFromKeySignature,\r\n  minorKey\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[]\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\")\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\")\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\"\n  )\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\"\n  )\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n","// index.ts\r\nimport {\r\n  note as props,\r\n  transpose as _tr\r\n} from \"@tonaljs/core\";\r\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\r\nvar NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nvar toName = (n) => n.name;\r\nvar onlyNotes = (array) => array.map(props).filter((n) => !n.empty);\r\nfunction names(array) {\r\n  if (array === void 0) {\r\n    return NAMES.slice();\r\n  } else if (!Array.isArray(array)) {\r\n    return [];\r\n  } else {\r\n    return onlyNotes(array).map(toName);\r\n  }\r\n}\r\nvar get = props;\r\nvar name = (note) => get(note).name;\r\nvar pitchClass = (note) => get(note).pc;\r\nvar accidentals = (note) => get(note).acc;\r\nvar octave = (note) => get(note).oct;\r\nvar midi = (note) => get(note).midi;\r\nvar freq = (note) => get(note).freq;\r\nvar chroma = (note) => get(note).chroma;\r\nfunction fromMidi(midi2) {\r\n  return midiToNoteName(midi2);\r\n}\r\nfunction fromFreq(freq2) {\r\n  return midiToNoteName(freqToMidi(freq2));\r\n}\r\nfunction fromFreqSharps(freq2) {\r\n  return midiToNoteName(freqToMidi(freq2), { sharps: true });\r\n}\r\nfunction fromMidiSharps(midi2) {\r\n  return midiToNoteName(midi2, { sharps: true });\r\n}\r\nvar transpose = _tr;\r\nvar tr = _tr;\r\nvar transposeBy = (interval) => (note) => transpose(note, interval);\r\nvar trBy = transposeBy;\r\nvar transposeFrom = (note) => (interval) => transpose(note, interval);\r\nvar trFrom = transposeFrom;\r\nfunction transposeFifths(noteName, fifths) {\r\n  return transpose(noteName, [fifths, 0]);\r\n}\r\nvar trFifths = transposeFifths;\r\nfunction transposeOctaves(noteName, octaves) {\r\n  return transpose(noteName, [0, octaves]);\r\n}\r\nvar ascending = (a, b) => a.height - b.height;\r\nvar descending = (a, b) => b.height - a.height;\r\nfunction sortedNames(notes, comparator) {\r\n  comparator = comparator || ascending;\r\n  return onlyNotes(notes).sort(comparator).map(toName);\r\n}\r\nfunction sortedUniqNames(notes) {\r\n  return sortedNames(notes, ascending).filter(\r\n    (n, i, a) => i === 0 || n !== a[i - 1]\r\n  );\r\n}\r\nvar simplify = (noteName) => {\r\n  const note = get(noteName);\r\n  if (note.empty) {\r\n    return \"\";\r\n  }\r\n  return midiToNoteName(note.midi || note.chroma, {\r\n    sharps: note.alt > 0,\r\n    pitchClass: note.midi === null\r\n  });\r\n};\r\nfunction enharmonic(noteName, destName) {\r\n  const src = get(noteName);\r\n  if (src.empty) {\r\n    return \"\";\r\n  }\r\n  const dest = get(\r\n    destName || midiToNoteName(src.midi || src.chroma, {\r\n      sharps: src.alt < 0,\r\n      pitchClass: true\r\n    })\r\n  );\r\n  if (dest.empty || dest.chroma !== src.chroma) {\r\n    return \"\";\r\n  }\r\n  if (src.oct === void 0) {\r\n    return dest.pc;\r\n  }\r\n  const srcChroma = src.chroma - src.alt;\r\n  const destChroma = dest.chroma - dest.alt;\r\n  const destOctOffset = srcChroma > 11 || destChroma < 0 ? -1 : srcChroma < 0 || destChroma > 11 ? 1 : 0;\r\n  const destOct = src.oct + destOctOffset;\r\n  return dest.pc + destOct;\r\n}\r\nvar note_default = {\r\n  names,\r\n  get,\r\n  name,\r\n  pitchClass,\r\n  accidentals,\r\n  octave,\r\n  midi,\r\n  ascending,\r\n  descending,\r\n  sortedNames,\r\n  sortedUniqNames,\r\n  fromMidi,\r\n  fromMidiSharps,\r\n  freq,\r\n  fromFreq,\r\n  fromFreqSharps,\r\n  chroma,\r\n  transpose,\r\n  tr,\r\n  transposeBy,\r\n  trBy,\r\n  transposeFrom,\r\n  trFrom,\r\n  transposeFifths,\r\n  transposeOctaves,\r\n  trFifths,\r\n  simplify,\r\n  enharmonic\r\n};\r\nexport {\r\n  accidentals,\r\n  ascending,\r\n  chroma,\r\n  note_default as default,\r\n  descending,\r\n  enharmonic,\r\n  freq,\r\n  fromFreq,\r\n  fromFreqSharps,\r\n  fromMidi,\r\n  fromMidiSharps,\r\n  get,\r\n  midi,\r\n  name,\r\n  names,\r\n  octave,\r\n  pitchClass,\r\n  simplify,\r\n  sortedNames,\r\n  sortedUniqNames,\r\n  tr,\r\n  trBy,\r\n  trFifths,\r\n  trFrom,\r\n  transpose,\r\n  transposeBy,\r\n  transposeFifths,\r\n  transposeFrom,\r\n  transposeOctaves\r\n};\r\n//# sourceMappingURL=index.mjs.map","import {\n  IntervalName,\n  Named,\n  Note,\n  note as props,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Named) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1]\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      })\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n      ? +1\n      : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n","// index.ts\r\nimport { note as props } from \"@tonaljs/core\";\r\nfunction isMidi(arg) {\r\n  return +arg >= 0 && +arg <= 127;\r\n}\r\nfunction toMidi(note) {\r\n  if (isMidi(note)) {\r\n    return +note;\r\n  }\r\n  const n = props(note);\r\n  return n.empty ? null : n.midi;\r\n}\r\nfunction midiToFreq(midi, tuning = 440) {\r\n  return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nfunction freqToMidi(freq) {\r\n  const v = 12 * (Math.log(freq) - L440) / L2 + 69;\r\n  return Math.round(v * 100) / 100;\r\n}\r\nvar SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nvar FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\nfunction midiToNoteName(midi, options = {}) {\r\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n    return \"\";\r\n  midi = Math.round(midi);\r\n  const pcs = options.sharps === true ? SHARPS : FLATS;\r\n  const pc = pcs[midi % 12];\r\n  if (options.pitchClass) {\r\n    return pc;\r\n  }\r\n  const o = Math.floor(midi / 12) - 1;\r\n  return pc + o;\r\n}\r\nfunction chroma(midi) {\r\n  return midi % 12;\r\n}\r\nfunction pcsetFromChroma(chroma2) {\r\n  return chroma2.split(\"\").reduce((pcset2, val, index) => {\r\n    if (index < 12 && val === \"1\")\r\n      pcset2.push(index);\r\n    return pcset2;\r\n  }, []);\r\n}\r\nfunction pcsetFromMidi(midi) {\r\n  return midi.map(chroma).sort((a, b) => a - b).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\nfunction pcset(notes) {\r\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\r\n}\r\nfunction pcsetNearest(notes) {\r\n  const set = pcset(notes);\r\n  return (midi) => {\r\n    const ch = chroma(midi);\r\n    for (let i = 0; i < 12; i++) {\r\n      if (set.includes(ch + i))\r\n        return midi + i;\r\n      if (set.includes(ch - i))\r\n        return midi - i;\r\n    }\r\n    return void 0;\r\n  };\r\n}\r\nfunction pcsetSteps(notes, tonic) {\r\n  const set = pcset(notes);\r\n  const len = set.length;\r\n  return (step) => {\r\n    const index = step < 0 ? (len - -step % len) % len : step % len;\r\n    const octaves = Math.floor(step / len);\r\n    return set[index] + octaves * 12 + tonic;\r\n  };\r\n}\r\nfunction pcsetDegrees(notes, tonic) {\r\n  const steps = pcsetSteps(notes, tonic);\r\n  return (degree) => {\r\n    if (degree === 0)\r\n      return void 0;\r\n    return steps(degree > 0 ? degree - 1 : degree);\r\n  };\r\n}\r\nvar midi_default = {\r\n  chroma,\r\n  freqToMidi,\r\n  isMidi,\r\n  midiToFreq,\r\n  midiToNoteName,\r\n  pcsetNearest,\r\n  pcset,\r\n  pcsetDegrees,\r\n  pcsetSteps,\r\n  toMidi\r\n};\r\nexport {\r\n  chroma,\r\n  midi_default as default,\r\n  freqToMidi,\r\n  isMidi,\r\n  midiToFreq,\r\n  midiToNoteName,\r\n  pcset,\r\n  pcsetDegrees,\r\n  pcsetNearest,\r\n  pcsetSteps,\r\n  toMidi\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { note as props, NoteName } from \"@tonaljs/core\";\n\ntype Midi = number;\n\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertzs from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n","// index.ts\r\nimport {\r\n  accToAlt,\r\n  altToAcc,\r\n  deprecate,\r\n  interval,\r\n  isNamed,\r\n  isPitch\r\n} from \"@tonaljs/core\";\r\nvar NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nvar cache = {};\r\nfunction get(src) {\r\n  return typeof src === \"string\" ? cache[src] || (cache[src] = parse(src)) : typeof src === \"number\" ? get(NAMES[src] || \"\") : isPitch(src) ? fromPitch(src) : isNamed(src) ? get(src.name) : NoRomanNumeral;\r\n}\r\nvar romanNumeral = deprecate(\r\n  \"RomanNumeral.romanNumeral\",\r\n  \"RomanNumeral.get\",\r\n  get\r\n);\r\nfunction names(major = true) {\r\n  return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nvar REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n  return REGEX.exec(str) || [\"\", \"\", \"\", \"\"];\r\n}\r\nvar ROMANS = \"I II III IV V VI VII\";\r\nvar NAMES = ROMANS.split(\" \");\r\nvar NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n  const [name, acc, roman, chordType] = tokenize(src);\r\n  if (!roman) {\r\n    return NoRomanNumeral;\r\n  }\r\n  const upperRoman = roman.toUpperCase();\r\n  const step = NAMES.indexOf(upperRoman);\r\n  const alt = accToAlt(acc);\r\n  const dir = 1;\r\n  return {\r\n    empty: false,\r\n    name,\r\n    roman,\r\n    interval: interval({ step, alt, dir }).name,\r\n    acc,\r\n    chordType,\r\n    alt,\r\n    step,\r\n    major: roman === upperRoman,\r\n    oct: 0,\r\n    dir\r\n  };\r\n}\r\nvar roman_numeral_default = {\r\n  names,\r\n  get,\r\n  romanNumeral\r\n};\r\nexport {\r\n  roman_numeral_default as default,\r\n  get,\r\n  names,\r\n  tokenize\r\n};\r\n//# sourceMappingURL=index.mjs.map","import {\n  accToAlt,\n  altToAcc,\n  deprecate,\n  interval,\n  isNamed,\n  isPitch,\n  Named,\n  Pitch,\n} from \"@tonaljs/core\";\n\nexport interface RomanNumeral extends Pitch, Named {\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n    ? get(NAMES[src] || \"\")\n    : isPitch(src)\n    ? fromPitch(src)\n    : isNamed(src)\n    ? get(src.name)\n    : NoRomanNumeral;\n}\n\nconst romanNumeral = deprecate(\n  \"RomanNumeral.romanNumeral\",\n  \"RomanNumeral.get\",\n  get\n);\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n","// index.ts\r\nimport { rotate } from \"@tonaljs/collection\";\r\nimport { deprecate, transpose } from \"@tonaljs/core\";\r\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\r\nimport { EmptyPcset } from \"@tonaljs/pcset\";\r\nimport { get as getType } from \"@tonaljs/scale-type\";\r\nvar MODES = [\r\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"]\r\n];\r\nvar NoMode = {\r\n  ...EmptyPcset,\r\n  name: \"\",\r\n  alt: 0,\r\n  modeNum: NaN,\r\n  triad: \"\",\r\n  seventh: \"\",\r\n  aliases: []\r\n};\r\nvar modes = MODES.map(toMode);\r\nvar index = {};\r\nmodes.forEach((mode2) => {\r\n  index[mode2.name] = mode2;\r\n  mode2.aliases.forEach((alias) => {\r\n    index[alias] = mode2;\r\n  });\r\n});\r\nfunction get(name) {\r\n  return typeof name === \"string\" ? index[name.toLowerCase()] || NoMode : name && name.name ? get(name.name) : NoMode;\r\n}\r\nvar mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\nfunction all() {\r\n  return modes.slice();\r\n}\r\nvar entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\nfunction names() {\r\n  return modes.map((mode2) => mode2.name);\r\n}\r\nfunction toMode(mode2) {\r\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode2;\r\n  const aliases = alias ? [alias] : [];\r\n  const chroma = Number(setNum).toString(2);\r\n  const intervals = getType(name).intervals;\r\n  return {\r\n    empty: false,\r\n    intervals,\r\n    modeNum,\r\n    chroma,\r\n    normalized: chroma,\r\n    name,\r\n    setNum,\r\n    alt,\r\n    triad,\r\n    seventh,\r\n    aliases\r\n  };\r\n}\r\nfunction notes(modeName, tonic) {\r\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\r\n}\r\nfunction chords(chords2) {\r\n  return (modeName, tonic) => {\r\n    const mode2 = get(modeName);\r\n    if (mode2.empty)\r\n      return [];\r\n    const triads2 = rotate(mode2.modeNum, chords2);\r\n    const tonics = mode2.intervals.map((i) => transpose(tonic, i));\r\n    return triads2.map((triad, i) => tonics[i] + triad);\r\n  };\r\n}\r\nvar triads = chords(MODES.map((x) => x[4]));\r\nvar seventhChords = chords(MODES.map((x) => x[5]));\r\nfunction distance(destination, source) {\r\n  const from = get(source);\r\n  const to = get(destination);\r\n  if (from.empty || to.empty)\r\n    return \"\";\r\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\r\n}\r\nfunction relativeTonic(destination, source, tonic) {\r\n  return transpose(tonic, distance(destination, source));\r\n}\r\nvar mode_default = {\r\n  get,\r\n  names,\r\n  all,\r\n  distance,\r\n  relativeTonic,\r\n  notes,\r\n  triads,\r\n  seventhChords,\r\n  entries,\r\n  mode\r\n};\r\nexport {\r\n  all,\r\n  mode_default as default,\r\n  distance,\r\n  entries,\r\n  get,\r\n  mode,\r\n  names,\r\n  notes,\r\n  relativeTonic,\r\n  seventhChords,\r\n  triads\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { rotate } from \"@tonaljs/collection\";\nimport { deprecate, Named, NoteName, transpose } from \"@tonaljs/core\";\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\nimport { EmptyPcset, Pcset } from \"@tonaljs/pcset\";\nimport { get as getType } from \"@tonaljs/scale-type\";\n\nconst MODES = [\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\n] as const;\n\ntype ModeDatum = typeof MODES[number];\n\nexport interface Mode extends Pcset {\n  readonly name: string;\n  readonly modeNum: number;\n  readonly alt: number; // number of alterations === number of fiths\n  readonly triad: string;\n  readonly seventh: string;\n  readonly aliases: string[];\n}\n\nconst NoMode: Mode = {\n  ...EmptyPcset,\n  name: \"\",\n  alt: 0,\n  modeNum: NaN,\n  triad: \"\",\n  seventh: \"\",\n  aliases: [],\n};\n\nconst modes: Mode[] = MODES.map(toMode);\nconst index: Record<string, Mode> = {};\nmodes.forEach((mode) => {\n  index[mode.name] = mode;\n  mode.aliases.forEach((alias) => {\n    index[alias] = mode;\n  });\n});\n\ntype ModeLiteral = string | Named;\n\n/**\n * Get a Mode by it's name\n *\n * @example\n * get('dorian')\n * // =>\n * // {\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\n * //   modeNum: 1,\n * //   chroma: '101101010110',\n * //   normalized: '101101010110',\n * //   name: 'dorian',\n * //   setNum: 2902,\n * //   alt: 2,\n * //   triad: 'm',\n * //   seventh: 'm7',\n * //   aliases: []\n * // }\n */\nexport function get(name: ModeLiteral): Mode {\n  return typeof name === \"string\"\n    ? index[name.toLowerCase()] || NoMode\n    : name && name.name\n    ? get(name.name)\n    : NoMode;\n}\n\nexport const mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\n\n/**\n * Get a list of all modes\n */\nexport function all() {\n  return modes.slice();\n}\nexport const entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\n\n/**\n * Get a list of all mode names\n */\nexport function names() {\n  return modes.map((mode) => mode.name);\n}\n\nfunction toMode(mode: ModeDatum): Mode {\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\n  const aliases = alias ? [alias] : [];\n  const chroma = Number(setNum).toString(2);\n  const intervals = getType(name).intervals;\n  return {\n    empty: false,\n    intervals,\n    modeNum,\n    chroma,\n    normalized: chroma,\n    name,\n    setNum,\n    alt,\n    triad,\n    seventh,\n    aliases,\n  };\n}\n\nexport function notes(modeName: ModeLiteral, tonic: NoteName) {\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\n}\n\nfunction chords(chords: string[]) {\n  return (modeName: ModeLiteral, tonic: NoteName) => {\n    const mode = get(modeName);\n    if (mode.empty) return [];\n    const triads = rotate(mode.modeNum, chords);\n    const tonics = mode.intervals.map((i) => transpose(tonic, i));\n    return triads.map((triad, i) => tonics[i] + triad);\n  };\n}\n\nexport const triads = chords(MODES.map((x) => x[4]));\nexport const seventhChords = chords(MODES.map((x) => x[5]));\n\nexport function distance(destination: ModeLiteral, source: ModeLiteral) {\n  const from = get(source);\n  const to = get(destination);\n  if (from.empty || to.empty) return \"\";\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\n}\n\nexport function relativeTonic(\n  destination: ModeLiteral,\n  source: ModeLiteral,\n  tonic: NoteName\n) {\n  return transpose(tonic, distance(destination, source));\n}\n\nexport default {\n  get,\n  names,\n  all,\n  distance,\n  relativeTonic,\n  notes,\n  triads,\n  seventhChords,\n  // deprecated\n  entries,\n  mode,\n};\n","// index.ts\r\nimport { tokenize } from \"@tonaljs/chord\";\r\nimport { distance, interval, transpose } from \"@tonaljs/core\";\r\nimport { get as romanNumeral } from \"@tonaljs/roman-numeral\";\r\nfunction fromRomanNumerals(tonic, chords) {\r\n  const romanNumerals = chords.map(romanNumeral);\r\n  return romanNumerals.map(\r\n    (rn) => transpose(tonic, interval(rn)) + rn.chordType\r\n  );\r\n}\r\nfunction toRomanNumerals(tonic, chords) {\r\n  return chords.map((chord) => {\r\n    const [note, chordType] = tokenize(chord);\r\n    const intervalName = distance(tonic, note);\r\n    const roman = romanNumeral(interval(intervalName));\r\n    return roman.name + chordType;\r\n  });\r\n}\r\nvar progression_default = { fromRomanNumerals, toRomanNumerals };\r\nexport {\r\n  progression_default as default,\r\n  fromRomanNumerals,\r\n  toRomanNumerals\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { tokenize } from \"@tonaljs/chord\";\nimport { distance, interval, NoteLiteral, transpose } from \"@tonaljs/core\";\nimport { get as romanNumeral } from \"@tonaljs/roman-numeral\";\n\n/**\n * Given a tonic and a chord list expressed with roman numeral notation\n * returns the progression expressed with leadsheet chords symbols notation\n * @example\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\n * // => [\"C\", \"Dm7\", \"G7\"]\n */\nexport function fromRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[]\n): string[] {\n  const romanNumerals = chords.map(romanNumeral);\n  return romanNumerals.map(\n    (rn) => transpose(tonic, interval(rn)) + rn.chordType\n  );\n}\n\n/**\n * Given a tonic and a chord list with leadsheet symbols notation,\n * return the chord list with roman numeral notation\n * @example\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\n */\nexport function toRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[]\n): string[] {\n  return chords.map((chord) => {\n    const [note, chordType] = tokenize(chord);\n    const intervalName = distance(tonic, note);\n    const roman = romanNumeral(interval(intervalName));\n    return roman.name + chordType;\n  });\n}\n\nexport default { fromRomanNumerals, toRomanNumerals };\n","// index.ts\r\nimport { compact, range } from \"@tonaljs/collection\";\r\nimport { midiToNoteName, toMidi } from \"@tonaljs/midi\";\r\nfunction numeric(notes) {\r\n  const midi = compact(\r\n    notes.map((note) => typeof note === \"number\" ? note : toMidi(note))\r\n  );\r\n  if (!notes.length || midi.length !== notes.length) {\r\n    return [];\r\n  }\r\n  return midi.reduce(\r\n    (result, note) => {\r\n      const last = result[result.length - 1];\r\n      return result.concat(range(last, note).slice(1));\r\n    },\r\n    [midi[0]]\r\n  );\r\n}\r\nfunction chromatic(notes, options) {\r\n  return numeric(notes).map((midi) => midiToNoteName(midi, options));\r\n}\r\nvar range_default = { numeric, chromatic };\r\nexport {\r\n  chromatic,\r\n  range_default as default,\r\n  numeric\r\n};\r\n//# sourceMappingURL=index.mjs.map","import { compact, range } from \"@tonaljs/collection\";\nimport { midiToNoteName, toMidi, ToNoteNameOptions } from \"@tonaljs/midi\";\n\n/**\n * Create a numeric range. You supply a list of notes or numbers and it will\n * be connected to create complex ranges.\n *\n * @param {Array} notes - the list of notes or midi numbers used\n * @return {Array} an array of numbers or empty array if not valid parameters\n *\n * @example\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\n * // it works midi notes\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\n * // complex range\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n */\nexport function numeric(notes: (string | number)[]): number[] {\n  const midi: number[] = compact(\n    notes.map((note) => (typeof note === \"number\" ? note : toMidi(note)))\n  );\n  if (!notes.length || midi.length !== notes.length) {\n    // there is no valid notes\n    return [];\n  }\n\n  return midi.reduce(\n    (result, note) => {\n      const last: number = result[result.length - 1];\n      return result.concat(range(last, note).slice(1));\n    },\n    [midi[0]]\n  );\n}\n\n/**\n * Create a range of chromatic notes. The altered notes will use flats.\n *\n * @function\n * @param {Array} notes - the list of notes or midi note numbers to create a range from\n * @param {Object} options - The same as `midiToNoteName` (`{ sharps: boolean, pitchClass: boolean }`)\n * @return {Array} an array of note names\n *\n * @example\n * Range.chromatic([\"C2, \"E2\", \"D2\"]) // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\n * // with sharps\n * Range.chromatic([\"C2\", \"C3\"], { sharps: true }) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\n */\nexport function chromatic(\n  notes: (string | number)[],\n  options?: ToNoteNameOptions\n): string[] {\n  return numeric(notes).map((midi) => midiToNoteName(midi, options));\n}\n\nexport default { numeric, chromatic };\n","// index.ts\r\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\r\nimport { range as nums, rotate } from \"@tonaljs/collection\";\r\nimport {\r\n  deprecate,\r\n  note,\r\n  tonicIntervalsTransposer,\r\n  transpose\r\n} from \"@tonaljs/core\";\r\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\r\nimport {\r\n  chroma,\r\n  isChroma,\r\n  isSubsetOf,\r\n  isSupersetOf,\r\n  modes\r\n} from \"@tonaljs/pcset\";\r\nimport {\r\n  all,\r\n  all as scaleTypes,\r\n  get as getScaleType,\r\n  names as scaleTypeNames\r\n} from \"@tonaljs/scale-type\";\r\nvar NoScale = {\r\n  empty: true,\r\n  name: \"\",\r\n  type: \"\",\r\n  tonic: null,\r\n  setNum: NaN,\r\n  chroma: \"\",\r\n  normalized: \"\",\r\n  aliases: [],\r\n  notes: [],\r\n  intervals: []\r\n};\r\nfunction tokenize(name) {\r\n  if (typeof name !== \"string\") {\r\n    return [\"\", \"\"];\r\n  }\r\n  const i = name.indexOf(\" \");\r\n  const tonic = note(name.substring(0, i));\r\n  if (tonic.empty) {\r\n    const n = note(name);\r\n    return n.empty ? [\"\", name] : [n.name, \"\"];\r\n  }\r\n  const type = name.substring(tonic.name.length + 1);\r\n  return [tonic.name, type.length ? type : \"\"];\r\n}\r\nvar names = scaleTypeNames;\r\nfunction get(src) {\r\n  const tokens = Array.isArray(src) ? src : tokenize(src);\r\n  const tonic = note(tokens[0]).name;\r\n  const st = getScaleType(tokens[1]);\r\n  if (st.empty) {\r\n    return NoScale;\r\n  }\r\n  const type = st.name;\r\n  const notes = tonic ? st.intervals.map((i) => transpose(tonic, i)) : [];\r\n  const name = tonic ? tonic + \" \" + type : type;\r\n  return { ...st, name, type, tonic, notes };\r\n}\r\nvar scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\nfunction detect(notes, options = {}) {\r\n  const notesChroma = chroma(notes);\r\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\r\n  const tonicChroma = tonic.chroma;\r\n  if (tonicChroma === void 0) {\r\n    return [];\r\n  }\r\n  const pitchClasses = notesChroma.split(\"\");\r\n  pitchClasses[tonicChroma] = \"1\";\r\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\r\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\r\n  const results = [];\r\n  if (match) {\r\n    results.push(tonic.name + \" \" + match.name);\r\n  }\r\n  if (options.match === \"exact\") {\r\n    return results;\r\n  }\r\n  extended(scaleChroma).forEach((scaleName) => {\r\n    results.push(tonic.name + \" \" + scaleName);\r\n  });\r\n  return results;\r\n}\r\nfunction scaleChords(name) {\r\n  const s = get(name);\r\n  const inScale = isSubsetOf(s.chroma);\r\n  return chordTypes().filter((chord) => inScale(chord.chroma)).map((chord) => chord.aliases[0]);\r\n}\r\nfunction extended(name) {\r\n  const chroma2 = isChroma(name) ? name : get(name).chroma;\r\n  const isSuperset = isSupersetOf(chroma2);\r\n  return scaleTypes().filter((scale2) => isSuperset(scale2.chroma)).map((scale2) => scale2.name);\r\n}\r\nfunction reduced(name) {\r\n  const isSubset = isSubsetOf(get(name).chroma);\r\n  return scaleTypes().filter((scale2) => isSubset(scale2.chroma)).map((scale2) => scale2.name);\r\n}\r\nfunction scaleNotes(notes) {\r\n  const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n  const tonic = pcset[0];\r\n  const scale2 = sortedUniqNames(pcset);\r\n  return rotate(scale2.indexOf(tonic), scale2);\r\n}\r\nfunction modeNames(name) {\r\n  const s = get(name);\r\n  if (s.empty) {\r\n    return [];\r\n  }\r\n  const tonics = s.tonic ? s.notes : s.intervals;\r\n  return modes(s.chroma).map((chroma2, i) => {\r\n    const modeName = get(chroma2).name;\r\n    return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n  }).filter((x) => x[0]);\r\n}\r\nfunction getNoteNameOf(scale2) {\r\n  const names2 = Array.isArray(scale2) ? scaleNotes(scale2) : get(scale2).notes;\r\n  const chromas = names2.map((name) => note(name).chroma);\r\n  return (noteOrMidi) => {\r\n    const currNote = typeof noteOrMidi === \"number\" ? note(fromMidi(noteOrMidi)) : note(noteOrMidi);\r\n    const height = currNote.height;\r\n    if (height === void 0)\r\n      return void 0;\r\n    const chroma2 = height % 12;\r\n    const position = chromas.indexOf(chroma2);\r\n    if (position === -1)\r\n      return void 0;\r\n    return enharmonic(currNote.name, names2[position]);\r\n  };\r\n}\r\nfunction rangeOf(scale2) {\r\n  const getName = getNoteNameOf(scale2);\r\n  return (fromNote, toNote) => {\r\n    const from = note(fromNote).height;\r\n    const to = note(toNote).height;\r\n    if (from === void 0 || to === void 0)\r\n      return [];\r\n    return nums(from, to).map(getName).filter((x) => x);\r\n  };\r\n}\r\nfunction degrees(scaleName) {\r\n  const { intervals, tonic } = get(scaleName);\r\n  const transpose2 = tonicIntervalsTransposer(intervals, tonic);\r\n  return (degree) => degree ? transpose2(degree > 0 ? degree - 1 : degree) : \"\";\r\n}\r\nfunction steps(scaleName) {\r\n  const { intervals, tonic } = get(scaleName);\r\n  return tonicIntervalsTransposer(intervals, tonic);\r\n}\r\nvar scale_default = {\r\n  degrees,\r\n  detect,\r\n  extended,\r\n  get,\r\n  modeNames,\r\n  names,\r\n  rangeOf,\r\n  reduced,\r\n  scaleChords,\r\n  scaleNotes,\r\n  steps,\r\n  tokenize,\r\n  // deprecated\r\n  scale\r\n};\r\nexport {\r\n  scale_default as default,\r\n  degrees,\r\n  detect,\r\n  extended,\r\n  get,\r\n  modeNames,\r\n  names,\r\n  rangeOf,\r\n  reduced,\r\n  scale,\r\n  scaleChords,\r\n  scaleNotes,\r\n  steps,\r\n  tokenize\r\n};\r\n//# sourceMappingURL=index.mjs.map","/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  note,\n  NoteName,\n  tonicIntervalsTransposer,\n  transpose,\n} from \"@tonaljs/core\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport {\n  all,\n  all as scaleTypes,\n  get as getScaleType,\n  names as scaleTypeNames,\n  ScaleType,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1);\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\nexport const scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {}\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n","// index.ts\r\nvar NONE = {\r\n  empty: true,\r\n  name: \"\",\r\n  upper: void 0,\r\n  lower: void 0,\r\n  type: void 0,\r\n  additive: []\r\n};\r\nvar NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\r\nfunction names() {\r\n  return NAMES.slice();\r\n}\r\nvar REGEX = /^(\\d*\\d(?:\\+\\d)*)\\/(\\d+)$/;\r\nvar CACHE = /* @__PURE__ */ new Map();\r\nfunction get(literal) {\r\n  const stringifiedLiteral = JSON.stringify(literal);\r\n  const cached = CACHE.get(stringifiedLiteral);\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  const ts = build(parse(literal));\r\n  CACHE.set(stringifiedLiteral, ts);\r\n  return ts;\r\n}\r\nfunction parse(literal) {\r\n  if (typeof literal === \"string\") {\r\n    const [_, up2, low] = REGEX.exec(literal) || [];\r\n    return parse([up2, low]);\r\n  }\r\n  const [up, down] = literal;\r\n  const denominator = +down;\r\n  if (typeof up === \"number\") {\r\n    return [up, denominator];\r\n  }\r\n  const list = up.split(\"+\").map((n) => +n);\r\n  return list.length === 1 ? [list[0], denominator] : [list, denominator];\r\n}\r\nvar time_signature_default = { names, parse, get };\r\nvar isPowerOfTwo = (x) => Math.log(x) / Math.log(2) % 1 === 0;\r\nfunction build([up, down]) {\r\n  const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\r\n  const lower = down;\r\n  if (upper === 0 || lower === 0) {\r\n    return NONE;\r\n  }\r\n  const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\r\n  const additive = Array.isArray(up) ? up : [];\r\n  const type = lower === 4 || lower === 2 ? \"simple\" : lower === 8 && upper % 3 === 0 ? \"compound\" : isPowerOfTwo(lower) ? \"irregular\" : \"irrational\";\r\n  return {\r\n    empty: false,\r\n    name,\r\n    type,\r\n    upper,\r\n    lower,\r\n    additive\r\n  };\r\n}\r\nexport {\r\n  time_signature_default as default,\r\n  get,\r\n  names,\r\n  parse\r\n};\r\n//# sourceMappingURL=index.mjs.map","// TYPES: PARSING\nexport type TimeSignatureLiteral = string | [number, number] | [string, string];\ntype ParsedTimeSignature = [number | number[], number];\n\n// TYPES: PROPERTIES\nexport type ValidTimeSignature = {\n  readonly empty: false;\n  readonly name: string;\n  readonly upper: number | number[];\n  readonly lower: number;\n  readonly type: \"simple\" | \"compound\" | \"irregular\" | \"irrational\";\n  readonly additive: number[];\n};\n\nexport type InvalidTimeSignature = {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly upper: undefined;\n  readonly lower: undefined;\n  readonly type: undefined;\n  readonly additive: [];\n};\n\nexport type TimeSignature = ValidTimeSignature | InvalidTimeSignature;\n\n// CONSTANTS\nconst NONE: InvalidTimeSignature = {\n  empty: true,\n  name: \"\",\n  upper: undefined,\n  lower: undefined,\n  type: undefined,\n  additive: [],\n};\n\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\n\n// PUBLIC API\n\nexport function names() {\n  return NAMES.slice();\n}\n\nconst REGEX = /^(\\d*\\d(?:\\+\\d)*)\\/(\\d+)$/;\nconst CACHE = new Map<TimeSignatureLiteral, TimeSignature>();\n\nexport function get(literal: TimeSignatureLiteral): TimeSignature {\n  const stringifiedLiteral = JSON.stringify(literal);\n  const cached = CACHE.get(stringifiedLiteral);\n  if (cached) {\n    return cached;\n  }\n\n  const ts = build(parse(literal));\n  CACHE.set(stringifiedLiteral, ts);\n  return ts;\n}\n\nexport function parse(literal: TimeSignatureLiteral): ParsedTimeSignature {\n  if (typeof literal === \"string\") {\n    const [_, up, low] = REGEX.exec(literal) || [];\n    return parse([up, low]);\n  }\n\n  const [up, down] = literal;\n  const denominator = +down;\n  if (typeof up === \"number\") {\n    return [up, denominator];\n  }\n\n  const list = up.split(\"+\").map((n) => +n);\n  return list.length === 1 ? [list[0], denominator] : [list, denominator];\n}\n\nexport default { names, parse, get };\n\n// PRIVATE\n\nconst isPowerOfTwo = (x: number) => (Math.log(x) / Math.log(2)) % 1 === 0;\n\nfunction build([up, down]: ParsedTimeSignature): TimeSignature {\n  const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\n  const lower = down;\n  if (upper === 0 || lower === 0) {\n    return NONE;\n  }\n\n  const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\n  const additive = Array.isArray(up) ? up : [];\n  const type =\n    lower === 4 || lower === 2\n      ? \"simple\"\n      : lower === 8 && upper % 3 === 0\n      ? \"compound\"\n      : isPowerOfTwo(lower)\n      ? \"irregular\"\n      : \"irrational\";\n\n  return {\n    empty: false,\n    name,\n    type,\n    upper,\n    lower,\n    additive,\n  };\n}\n","// index.ts\r\nimport Note from \"@tonaljs/note\";\r\nvar topNoteDiff = (voicings, lastVoicing) => {\r\n  if (!lastVoicing || !lastVoicing.length) {\r\n    return voicings[0];\r\n  }\r\n  const topNoteMidi = (voicing) => Note.midi(voicing[voicing.length - 1]) || 0;\r\n  const diff = (voicing) => Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\r\n  return voicings.sort((a, b) => diff(a) - diff(b))[0];\r\n};\r\nvar voice_leading_default = {\r\n  topNoteDiff\r\n};\r\nexport {\r\n  voice_leading_default as default,\r\n  topNoteDiff\r\n};\r\n//# sourceMappingURL=index.mjs.map","import Note from \"@tonaljs/note\";\n\n// A function that decides which of a set of voicings is picked as a follow up to lastVoicing.\nexport declare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[],\n) => string[];\n\nexport const topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0];\n};\n\nexport default {\n  topNoteDiff,\n};\n","// index.ts\r\nimport Chord from \"@tonaljs/chord\";\r\nimport Note from \"@tonaljs/note\";\r\nimport Range from \"@tonaljs/range\";\r\nimport Interval from \"@tonaljs/interval\";\r\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\r\nimport VoiceLeading from \"@tonaljs/voice-leading\";\r\nvar defaultRange = [\"C3\", \"C5\"];\r\nvar defaultDictionary = VoicingDictionary.all;\r\nvar defaultVoiceLeading = VoiceLeading.topNoteDiff;\r\nfunction get(chord, range = defaultRange, dictionary = defaultDictionary, voiceLeading = defaultVoiceLeading, lastVoicing) {\r\n  const voicings = search(chord, range, dictionary);\r\n  if (!lastVoicing || !lastVoicing.length) {\r\n    return voicings[0];\r\n  } else {\r\n    return voiceLeading(voicings, lastVoicing);\r\n  }\r\n}\r\nfunction search(chord, range = defaultRange, dictionary = VoicingDictionary.triads) {\r\n  const [tonic, symbol] = Chord.tokenize(chord);\r\n  const sets = VoicingDictionary.lookup(symbol, dictionary);\r\n  if (!sets) {\r\n    return [];\r\n  }\r\n  const voicings = sets.map((intervals) => intervals.split(\" \"));\r\n  const notesInRange = Range.chromatic(range);\r\n  return voicings.reduce((voiced, voicing) => {\r\n    const relativeIntervals = voicing.map(\r\n      (interval) => Interval.substract(interval, voicing[0]) || \"\"\r\n    );\r\n    const bottomPitchClass = Note.transpose(tonic, voicing[0]);\r\n    const starts = notesInRange.filter((note) => Note.chroma(note) === Note.chroma(bottomPitchClass)).filter(\r\n      (note) => (Note.midi(\r\n        Note.transpose(\r\n          note,\r\n          relativeIntervals[relativeIntervals.length - 1]\r\n        )\r\n      ) || 0) <= (Note.midi(range[1]) || 0)\r\n    ).map((note) => Note.enharmonic(note, bottomPitchClass));\r\n    const notes = starts.map(\r\n      (start) => relativeIntervals.map((interval) => Note.transpose(start, interval))\r\n    );\r\n    return voiced.concat(notes);\r\n  }, []);\r\n}\r\nfunction sequence(chords, range = defaultRange, dictionary = defaultDictionary, voiceLeading = defaultVoiceLeading, lastVoicing) {\r\n  const { voicings } = chords.reduce(\r\n    ({ voicings: voicings2, lastVoicing: lastVoicing2 }, chord) => {\r\n      const voicing = get(chord, range, dictionary, voiceLeading, lastVoicing2);\r\n      lastVoicing2 = voicing;\r\n      voicings2.push(voicing);\r\n      return { voicings: voicings2, lastVoicing: lastVoicing2 };\r\n    },\r\n    { voicings: [], lastVoicing }\r\n  );\r\n  return voicings;\r\n}\r\nvar voicing_default = {\r\n  get,\r\n  search,\r\n  sequence\r\n};\r\nexport {\r\n  voicing_default as default\r\n};\r\n//# sourceMappingURL=index.mjs.map","import Chord from \"@tonaljs/chord\";\nimport Note from \"@tonaljs/note\";\nimport Range from \"@tonaljs/range\";\nimport Interval from \"@tonaljs/interval\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\n\nconst defaultRange = [\"C3\", \"C5\"];\nconst defaultDictionary = VoicingDictionary.all;\nconst defaultVoiceLeading = VoiceLeading.topNoteDiff;\n\nfunction get(\n  chord: string,\n  range: string[] = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const voicings = search(chord, range, dictionary);\n  if (!lastVoicing || !lastVoicing.length) {\n    // notes = voicings[Math.ceil(voicings.length / 2)]; // pick middle voicing..\n    return voicings[0]; // pick lowest voicing..\n  } else {\n    // calculates the distance between the last note and the given voicings top note\n    // sort voicings with differ\n    return voiceLeading(voicings, lastVoicing);\n  }\n}\n\nfunction search(\n  chord: string,\n  range = defaultRange,\n  dictionary = VoicingDictionary.triads,\n): string[][] {\n  const [tonic, symbol] = Chord.tokenize(chord);\n  const sets = VoicingDictionary.lookup(symbol, dictionary);\n  // find equivalent symbol that is used as a key in dictionary:\n  if (!sets) {\n    return [];\n  }\n  // resolve array of interval arrays for the wanted symbol\n  const voicings = sets.map((intervals) => intervals.split(\" \"));\n  const notesInRange = Range.chromatic(range); // gives array of notes inside range\n  return voicings.reduce((voiced: string[][], voicing: string[]) => {\n    // transpose intervals relative to first interval (e.g. 3m 5P > 1P 3M)\n    const relativeIntervals = voicing.map(\n      (interval) => Interval.substract(interval, voicing[0]) || \"\",\n    );\n    // get enharmonic correct pitch class the bottom note\n    const bottomPitchClass = Note.transpose(tonic, voicing[0]);\n    // get all possible start notes for voicing\n    const starts = notesInRange\n      // only get the start notes:\n      .filter((note) => Note.chroma(note) === Note.chroma(bottomPitchClass))\n      // filter out start notes that will overshoot the top end of the range\n      .filter(\n        (note) =>\n          (Note.midi(\n            Note.transpose(\n              note,\n              relativeIntervals[relativeIntervals.length - 1],\n            ),\n          ) || 0) <= (Note.midi(range[1]) || 0),\n      )\n      // replace Range.chromatic notes with the correct enharmonic equivalents\n      .map((note) => Note.enharmonic(note, bottomPitchClass));\n    // render one voicing for each start note\n    const notes = starts.map((start) =>\n      relativeIntervals.map((interval) => Note.transpose(start, interval)),\n    );\n    return voiced.concat(notes);\n  }, []);\n}\n\nfunction sequence(\n  chords: string[],\n  range = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const { voicings } = chords.reduce<{\n    voicings: string[][];\n    lastVoicing: string[] | undefined;\n  }>(\n    ({ voicings, lastVoicing }, chord) => {\n      const voicing = get(chord, range, dictionary, voiceLeading, lastVoicing);\n      lastVoicing = voicing;\n      voicings.push(voicing);\n      return { voicings, lastVoicing };\n    },\n    { voicings: [], lastVoicing },\n  );\n  return voicings;\n}\n\nexport default {\n  get,\n  search,\n  sequence,\n};\n","// index.ts\r\nimport Chord from \"@tonaljs/chord\";\r\n\r\n// data.ts\r\nvar triads = {\r\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\r\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\r\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\r\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"]\r\n};\r\nvar lefthand = {\r\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\r\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\r\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\r\n  \"69\": [\"3M 5P 6A 9M\"],\r\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\r\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\r\n  // b9 / b13\r\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\r\n  // b9 / b13\r\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\r\n  \"7#11\": [\"7m 9M 11A 13A\"],\r\n  \"7#9\": [\"3M 7m 9A\"],\r\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\r\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"]\r\n};\r\nvar all = {\r\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\r\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\r\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\r\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\r\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\r\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\r\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\r\n  \"69\": [\"3M 5P 6A 9M\"],\r\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\r\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\r\n  // b9 / b13\r\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"],\r\n  // b9 / b13\r\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\r\n  \"7#11\": [\"7m 9M 11A 13A\"],\r\n  \"7#9\": [\"3M 7m 9A\"],\r\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\r\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"]\r\n};\r\n\r\n// index.ts\r\nvar defaultDictionary = lefthand;\r\nfunction lookup(symbol, dictionary = defaultDictionary) {\r\n  if (dictionary[symbol]) {\r\n    return dictionary[symbol];\r\n  }\r\n  const { aliases } = Chord.get(\"C\" + symbol);\r\n  const match = Object.keys(dictionary).find((_symbol) => aliases.includes(_symbol)) || \"\";\r\n  if (match !== void 0) {\r\n    return dictionary[match];\r\n  }\r\n  return void 0;\r\n}\r\nvar voicing_dictionary_default = {\r\n  lookup,\r\n  lefthand,\r\n  triads,\r\n  all,\r\n  defaultDictionary\r\n};\r\nexport {\r\n  voicing_dictionary_default as default\r\n};\r\n//# sourceMappingURL=index.mjs.map","import Chord from \"@tonaljs/chord\";\nimport { lefthand, VoicingDictionary, triads, all } from \"./data\";\n\nconst defaultDictionary: VoicingDictionary = lefthand;\n\nfunction lookup(\n  symbol: string,\n  dictionary = defaultDictionary,\n): string[] | undefined {\n  if (dictionary[symbol]) {\n    return dictionary[symbol];\n  }\n  const { aliases } = Chord.get(\"C\" + symbol);\n  // TODO: find other way to get aliases of symbol\n  const match =\n    Object.keys(dictionary).find((_symbol) => aliases.includes(_symbol)) || \"\";\n  if (match !== undefined) {\n    return dictionary[match];\n  }\n  return undefined;\n}\n\nexport default {\n  lookup,\n  lefthand,\n  triads,\n  all,\n  defaultDictionary,\n};\n","export type VoicingDictionary = { [symbol: string]: string[] };\n\nexport const triads: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n};\nexport const lefthand: VoicingDictionary = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\nexport const all: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\n"],"names":["$35da740d59af89ba$var$cache","$c1fc50133d2a8115$export$70ce4c42ed4560f3","src","name","$c1fc50133d2a8115$export$3a746b746d570840","pitch2","step","alt","$c1fc50133d2a8115$var$FIFTHS","$c1fc50133d2a8115$var$STEPS_TO_OCTS","map","fifths","Math","floor","$c1fc50133d2a8115$export$741858880c96b18c","oct","dir","f","$c1fc50133d2a8115$var$FIFTHS_TO_STEPS","$c1fc50133d2a8115$export$6c9e2d66dea2a302","coord","o","$c1fc50133d2a8115$var$unaltered","i","$4e01aabfc377cdb3$var$fillStr","s","n","Array","abs","join","$4e01aabfc377cdb3$var$NoInterval","empty","acc","$4e01aabfc377cdb3$var$REGEX","RegExp","$4e01aabfc377cdb3$var$cache","$4e01aabfc377cdb3$export$3174cdbf0a0cbc84","$4e01aabfc377cdb3$var$parse","str","tokens","$4e01aabfc377cdb3$export$4eeb042b94fbf5c0","m","exec","num","q","t","$4e01aabfc377cdb3$var$TYPES","type","simple","test","length","semitones","$4e01aabfc377cdb3$var$SIZES","chroma","$4e01aabfc377cdb3$var$pitchName","props","calcNum","d","$4e01aabfc377cdb3$export$41be0c142b835bde","forceDescending","$b16aee3da08f05ac$var$fillStr","$b16aee3da08f05ac$var$NoNote","pc","$b16aee3da08f05ac$var$cache","Map","$b16aee3da08f05ac$export$4fed1eaee6342c12","charAt","$b16aee3da08f05ac$export$fe2c2edbd7417985","$b16aee3da08f05ac$export$8f7077a2780017bf","$b16aee3da08f05ac$export$a92e4c44d367d0af","stringSrc","JSON","stringify","cached","get","value","$b16aee3da08f05ac$var$parse","noteName","$b16aee3da08f05ac$export$e13422ef2dcdcd5d","letter","octStr","charCodeAt","$b16aee3da08f05ac$var$SEMI","height","$b16aee3da08f05ac$var$mod","freq","pow","midi","$b16aee3da08f05ac$var$pitchName","set","$b16aee3da08f05ac$var$REGEX","toUpperCase","replace","$498eab776f7de6b3$export$9cb09a71b7d66923","intervalName","note","intervalCoord","isArray","noteCoord","$498eab776f7de6b3$export$96bb437d3e6675d","intervals","tonic","len","normalized","root","$6afb6a04609a1abf$export$b680e6b2c82f8c2f","original","alternative","fn","args","console","warn","apply","$6afb6a04609a1abf$export$745137f0b0c9a0b3","$0d7cd0cdab616457$export$bb628a54ab399bc9","times","arr","slice","concat","$37ea67a5744539d1$export$b31835771c1cc4b0","setNum","$37ea67a5744539d1$var$setNumToChroma","num2","Number","toString","$37ea67a5744539d1$var$chromaToNumber","chroma2","parseInt","$37ea67a5744539d1$var$REGEX","$37ea67a5744539d1$var$isPcsetNum","$37ea67a5744539d1$var$isPcset","$37ea67a5744539d1$var$cache","$37ea67a5744539d1$export$3988ae62b71be9a3","$37ea67a5744539d1$export$607555f22891e149","$37ea67a5744539d1$var$listToChroma","pitch","binary","$37ea67a5744539d1$var$chromaToPcset","$37ea67a5744539d1$var$chromaRotations","split","_","filter","sort","intervals2","$37ea67a5744539d1$export$d2c8ed5314ca8436","push","$37ea67a5744539d1$var$IVLS","$37ea67a5744539d1$export$22c04563e192ea02","notes","$5facd99e7fcea85e$var$NoChordType","quality","aliases","$5facd99e7fcea85e$var$dictionary","$5facd99e7fcea85e$var$index","$5facd99e7fcea85e$export$3988ae62b71be9a3","$5facd99e7fcea85e$export$84bf76cd7afc7469","$5facd99e7fcea85e$var$data_default","forEach","ivls","fullName","names2","$5facd99e7fcea85e$export$e16d8520af44a096","$5facd99e7fcea85e$var$getQuality","has","interval","indexOf","chord","alias","a","b","$c8ac599462e7da5f$var$namedSet","pcToName","reduce","record","$c8ac599462e7da5f$var$BITMASK","anyThirds","perfectFifth","nonPerfectFifths","anySeventh","$c8ac599462e7da5f$var$testChromaNumber","bitmask","chromaNumber","Boolean","$c8ac599462e7da5f$var$hasAnyThird","$c8ac599462e7da5f$var$hasPerfectFifth","$c8ac599462e7da5f$var$hasAnySeventh","$c8ac599462e7da5f$var$hasNonPerfectFifth","$98c1e925844fb606$export$799dbe5d40c297df","$98c1e925844fb606$var$dictionary","$98c1e925844fb606$var$index","$98c1e925844fb606$export$3988ae62b71be9a3","$98c1e925844fb606$export$84bf76cd7afc7469","$98c1e925844fb606$var$data_default","$98c1e925844fb606$export$e16d8520af44a096","scale","$f81c1a5b3e66f6db$var$NoChord","symbol","rootDegree","NaN","$f81c1a5b3e66f6db$export$660b2ee2d4fb4eff","$f81c1a5b3e66f6db$export$3988ae62b71be9a3","$f81c1a5b3e66f6db$export$300a0543e7b0d2ac","chord2","typeName","optionalTonic","optionalRoot","rootInterval","fromNote","toNote","from","to","fcoord","tcoord","octs","newNum","shift","$f81c1a5b3e66f6db$export$2f59edec6dc7ae8d","$f81c1a5b3e66f6db$export$2e2bcd8739ae039","getChord","detect","source","options","x","found","$c8ac599462e7da5f$var$findMatches","weight","tonicChroma","allModes","normalize","pcs","r","mode","index","modeWithPerfectFifth","assumePerfectFifth","$c8ac599462e7da5f$var$withPerfectFifth","chordTypes","chordType","$c8ac599462e7da5f$var$hasAnyThirdAndPerfectFifthAndAnySeventh","chordName","baseNote","chordScales","isChordIncluded","extended","isSuperset","reduced","isSubset","tokenize","transpose","degrees","transpose2","degree","steps","$7bd229a179f92add$var$VALUES","$4b0d2415abde5810$var$combinator","coordA","coordB","$7bd229a179f92add$var$data_default","denominator","shorthand","dots","fraction","names","$690087a1c13c7e3a$var$L2","log","$690087a1c13c7e3a$var$L440","$690087a1c13c7e3a$var$SHARPS","$690087a1c13c7e3a$var$FLATS","$fb522e20fe91ebd8$var$toName","$fb522e20fe91ebd8$var$onlyNotes","array","$fb522e20fe91ebd8$export$fcb633242ef15540","$e8ecee31aa3e3634$var$NoRomanNumeral","$e8ecee31aa3e3634$var$cache","$e8ecee31aa3e3634$export$3988ae62b71be9a3","$e8ecee31aa3e3634$var$parse","roman","$e8ecee31aa3e3634$var$REGEX","upperRoman","$e8ecee31aa3e3634$var$NAMES","major","$e8ecee31aa3e3634$var$ROMANS","toLowerCase","Object","freeze","$a1b4698f8fe59d53$var$mapScaleToType","list","sep","$a1b4698f8fe59d53$var$keyScale","grades","triads","chords","harmonicFunctions","gr","chordsHarmonicFunction","$5011c5099ae685ec$var$MODES","$5011c5099ae685ec$var$NoMode","modeNum","triad","seventh","$5011c5099ae685ec$var$modes","mode2","$5011c5099ae685ec$var$index","$5011c5099ae685ec$export$3988ae62b71be9a3","$5011c5099ae685ec$var$chords","chords2","modeName","triads2","tonics","$5b22c3b78aa339bc$var$NoScale","$5b22c3b78aa339bc$export$660b2ee2d4fb4eff","substring","st","$2ec1c585bb9dbcaa$import$39f8f2ba4979f6a9","$35da740d59af89ba$var$notas","$35da740d59af89ba$var$afinacao","$35da740d59af89ba$var$braco","document","querySelector","$35da740d59af89ba$var$openNoteContainer","$35da740d59af89ba$var$rangeHTML","querySelectorAll","$35da740d59af89ba$var$rangeDiminui","$35da740d59af89ba$var$rangeAumenta","$35da740d59af89ba$var$acordeResultadoHTML","$35da740d59af89ba$var$acordeBTN","$35da740d59af89ba$var$infoBTN","$35da740d59af89ba$var$construtorBTN","$35da740d59af89ba$var$acordesBTN","$35da740d59af89ba$var$nomeInput","getElementsByName","$35da740d59af89ba$var$btnInputNome","$35da740d59af89ba$var$btnSalva","$35da740d59af89ba$var$arrayNotas","$35da740d59af89ba$var$notasSelecionadas","$35da740d59af89ba$var$btnAtual","$35da740d59af89ba$var$range","$35da740d59af89ba$var$defineNota","cordaAtual","casaAtual","notaInicial","notaAfinacao","findIndex","el","$35da740d59af89ba$var$atualizaNotas","j","replaceChild","createTextNode","childNodes","$35da740d59af89ba$var$atualizaCasas","textContent","$35da740d59af89ba$var$atualizaSelecao","undefined","nota","casa","elemento","$35da740d59af89ba$var$displayNotasSelecionadas","$35da740d59af89ba$var$desativarNotaVelha","coluna","classList","toggle","remove","add","holder","span","children","createElement","txt","append","$35da740d59af89ba$var$selecionaNota","elementoNovo","contains","obj","innerText","$35da740d59af89ba$export$3b0f3781aa3ef7a4","pai","ehVisualizador","notas","col","notaContainer","notaTxt","appendChild","addEventListener","notaContainerD","notaD","notaDTxt","$35da740d59af89ba$var$salvaCache","$35da740d59af89ba$var$alteraAtual","targetBTN","window","onload","div","sp","spBola","hidden","$35da740d59af89ba$var$selecionaOpenNote","$35da740d59af89ba$var$achaAcorde","acordes","$35da740d59af89ba$require$Chord","ul","li","replaceChildren","event","p","p2","h2","h2_contato","sec","linkedin","git","email","linkholder","href","target","c","$536c869b7829f0c2$export$11cdf119b9ba7752","divContainer","arrAcordes","parse","localStorage","getItem","acorde","btn","nome","divAcorde","divInformation","divDisplay","divInferior","divSuperior","btnVoltar","btnRemover","divVoltar","tagI","nomeAcorde","h3","arrNovo","splice","setItem","$536c869b7829f0c2$var$construirAcorde","divCasas","range","openNoteContainer","braco","divOpen","$35da740d59af89ba$var$salvaAcorde","novoAcorde","$35da740d59af89ba$var$achaDupli","arrayAcordes","keyScale","pcset","up","voicings","lastVoicing"],"version":3,"file":"index.30351e5f.js.map"}