{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-3a0660f0e3b450ae.js","src/index.js","node_modules/tonal/dist/index.mjs","node_modules/tonal/index.ts","node_modules/@tonaljs/abc-notation/dist/index.mjs","node_modules/@tonaljs/abc-notation/index.ts","node_modules/@tonaljs/core/dist/index.mjs","node_modules/@tonaljs/core/index.ts","node_modules/@tonaljs/pitch/dist/index.mjs","node_modules/@tonaljs/pitch/index.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/@tonaljs/pitch-distance/dist/index.mjs","node_modules/@tonaljs/pitch-distance/index.ts","node_modules/@tonaljs/pitch-interval/dist/index.mjs","node_modules/@tonaljs/pitch-interval/index.ts","node_modules/@tonaljs/pitch-note/dist/index.mjs","node_modules/@tonaljs/pitch-note/index.ts","node_modules/@tonaljs/array/dist/index.mjs","node_modules/@tonaljs/array/index.ts","node_modules/@tonaljs/chord/dist/index.mjs","node_modules/@tonaljs/chord/index.ts","node_modules/@tonaljs/chord-detect/dist/index.mjs","node_modules/@tonaljs/chord-detect/index.ts","node_modules/@tonaljs/chord-type/dist/index.mjs","node_modules/@tonaljs/chord-type/index.ts","node_modules/@tonaljs/chord-type/data.ts","node_modules/@tonaljs/pcset/dist/index.mjs","node_modules/@tonaljs/pcset/index.ts","node_modules/@tonaljs/collection/dist/index.mjs","node_modules/@tonaljs/collection/index.ts","node_modules/@tonaljs/scale-type/dist/index.mjs","node_modules/@tonaljs/scale-type/index.ts","node_modules/@tonaljs/scale-type/data.ts","node_modules/@tonaljs/duration-value/dist/index.mjs","node_modules/@tonaljs/duration-value/data.ts","node_modules/@tonaljs/duration-value/index.ts","node_modules/@tonaljs/interval/dist/index.mjs","node_modules/@tonaljs/interval/index.ts","node_modules/@tonaljs/key/dist/index.mjs","node_modules/@tonaljs/key/index.ts","node_modules/@tonaljs/note/dist/index.mjs","node_modules/@tonaljs/note/index.ts","node_modules/@tonaljs/midi/dist/index.mjs","node_modules/@tonaljs/midi/index.ts","node_modules/@tonaljs/roman-numeral/dist/index.mjs","node_modules/@tonaljs/roman-numeral/index.ts","node_modules/@tonaljs/mode/dist/index.mjs","node_modules/@tonaljs/mode/index.ts","node_modules/@tonaljs/progression/dist/index.mjs","node_modules/@tonaljs/progression/index.ts","node_modules/@tonaljs/range/dist/index.mjs","node_modules/@tonaljs/range/index.ts","node_modules/@tonaljs/scale/dist/index.mjs","node_modules/@tonaljs/scale/index.ts","node_modules/@tonaljs/time-signature/dist/index.mjs","node_modules/@tonaljs/time-signature/index.ts","node_modules/@tonaljs/voice-leading/dist/index.mjs","node_modules/@tonaljs/voice-leading/index.ts","node_modules/@tonaljs/voicing/dist/index.mjs","node_modules/@tonaljs/voicing/index.ts","node_modules/@tonaljs/voicing-dictionary/dist/index.mjs","node_modules/@tonaljs/voicing-dictionary/index.ts","node_modules/@tonaljs/voicing-dictionary/data.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"890e741a975ef6c8\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws;\n  try {\n    ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n  } catch (err) {\n    if (err.message) {\n      console.error(err.message);\n    }\n    ws = {};\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    if (e.message) {\n      console.error(e.message);\n    }\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","const { Note, Scale } = require(\"tonal\");\r\nconst notas = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]\r\nconst afinacao = [\"E\",\"A\",\"D\",\"G\",\"B\",\"E\"];\r\nconst braco = document.querySelector(\".braco\");\r\nconst rangeHTML = document.querySelectorAll(\".range-container > span\")[1]\r\nconst rangeDiminui = document.querySelectorAll(\".range-container > span\")[0]\r\nconst rangeAumenta = document.querySelectorAll(\".range-container > span\")[2]\r\n\r\nlet arrayNotas = [[],[],[],[],[],[]];\r\nlet range = 1;\r\n\r\n\r\nfunction defineNota(cordaAtual, casaAtual){\r\n    let notaInicial = afinacao[cordaAtual-1];\r\n\r\n    if(range > 1){\r\n        let notaAfinacao = notaInicial;\r\n        notaInicial = notas[notas.findIndex(el => el == notaAfinacao) + range - 1 < notas.length ? notas.findIndex(el => el == notaAfinacao) + range - 1 :\r\n            notas.findIndex(el => el == notaAfinacao) + range - 1 - notas.length]\r\n    }\r\n    const nota = notas [ notas.findIndex(el => el == notaInicial) + casaAtual < notas.length ? notas.findIndex(el => el == notaInicial) + casaAtual : \r\n        notas.findIndex(el => el == notaInicial) + casaAtual - notas.length ];\r\n\r\n    return nota;\r\n}\r\n\r\n\r\nfunction atualizaNotas(){\r\n    for(let i = 1; i < 6;i++){\r\n        for(let j = 1; j <6; j++){\r\n            arrayNotas[i-1][j-1].replaceChild(document.createTextNode(defineNota(i,j)),arrayNotas[i-1][j-1].childNodes[0]);\r\n            if(i === 5){\r\n    \r\n                arrayNotas[5][j-1].replaceChild(document.createTextNode(defineNota(6,j)),arrayNotas[5][j-1].childNodes[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction atualizaCasas(){\r\n    [...document.querySelectorAll(\".numeroCasas-container > span\")].forEach((el,i)=>{\r\n        el.innerText = i + range })\r\n\r\n}\r\n\r\nconsole.log(arrayNotas)\r\n\r\n\r\n\r\nfunction displayTrastes(){\r\n    for(let i = 1; i < 6;i++){\r\n        let col = document.createElement(\"div\")\r\n        col.classList.add(\"coluna\");\r\n\r\n        for(let j = 1; j <6; j++){\r\n            \r\n            let casa = document.createElement(\"div\");\r\n            casa.classList.add(\"casa\");\r\n           \r\n            let notaContainer = document.createElement(\"span\");\r\n            notaContainer.classList.add(\"nota-container\")\r\n\r\n            let nota = document.createElement(\"span\");\r\n            nota.classList.add(\"nota\",\"hidden\");\r\n\r\n            nota.append(defineNota(i,j))\r\n\r\n            arrayNotas[i-1].push(nota);\r\n\r\n            notaContainer.appendChild(nota);\r\n            casa.appendChild(notaContainer);\r\n           \r\n            if(i === 5){\r\n            let notaContainerD = document.createElement(\"span\");\r\n            notaContainerD.classList.add(\"nota-container-direita\");\r\n\r\n            let notaD = document.createElement(\"span\");\r\n            notaD.classList.add(\"nota\",\"hidden\");\r\n            notaD.append(defineNota(6,j))\r\n\r\n            arrayNotas[5].push(notaD);\r\n\r\n           \r\n\r\n            notaContainerD.appendChild(notaD);  \r\n            casa.appendChild(notaContainerD);  \r\n            }\r\n\r\n            col.appendChild(casa);\r\n        }\r\n\r\n      \r\n        braco.appendChild(col);\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.onload = () => {\r\n    displayTrastes();\r\n    rangeHTML.append(range)\r\n}\r\n\r\n\r\n\r\nrangeDiminui.addEventListener(\"click\",(event)=>{\r\n    if(range > 1){\r\n        range = range - 1;\r\n        rangeHTML.replaceChild(document.createTextNode(range),rangeHTML.childNodes[0]);\r\n        atualizaCasas();\r\n        atualizaNotas();\r\n    }\r\n})\r\n\r\nrangeAumenta.addEventListener(\"click\",(event)=>{\r\n    if(range < 20){\r\n        range = range + 1;\r\n        rangeHTML.replaceChild(document.createTextNode(range),rangeHTML.childNodes[0]);\r\n        atualizaCasas();\r\n        atualizaNotas();\r\n    }\r\n})\r\n",null,"import AbcNotation from \"@tonaljs/abc-notation\";\nimport * as Array from \"@tonaljs/array\";\nimport Chord from \"@tonaljs/chord\";\nimport ChordType from \"@tonaljs/chord-type\";\nimport Collection from \"@tonaljs/collection\";\nimport * as Core from \"@tonaljs/core\";\nimport DurationValue from \"@tonaljs/duration-value\";\nimport Interval from \"@tonaljs/interval\";\nimport Key from \"@tonaljs/key\";\nimport Midi from \"@tonaljs/midi\";\nimport Mode from \"@tonaljs/mode\";\nimport Note from \"@tonaljs/note\";\nimport Pcset from \"@tonaljs/pcset\";\nimport Progression from \"@tonaljs/progression\";\nimport Range from \"@tonaljs/range\";\nimport RomanNumeral from \"@tonaljs/roman-numeral\";\nimport Scale from \"@tonaljs/scale\";\nimport ScaleType from \"@tonaljs/scale-type\";\nimport TimeSignature from \"@tonaljs/time-signature\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\nimport Voicing from \"@tonaljs/voicing\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\n\nexport * from \"@tonaljs/core\";\n\n// deprecated (backwards compatibility)\nconst Tonal = Core;\nconst PcSet = Pcset;\nconst ChordDictionary = ChordType;\nconst ScaleDictionary = ScaleType;\n\nexport {\n  AbcNotation,\n  Array,\n  Chord,\n  ChordDictionary,\n  ChordType,\n  Collection,\n  Core,\n  DurationValue,\n  Interval,\n  Key,\n  Midi,\n  Mode,\n  Note,\n  PcSet,\n  Pcset,\n  Progression,\n  Range,\n  RomanNumeral,\n  Scale,\n  ScaleDictionary,\n  ScaleType,\n  TimeSignature,\n  Tonal,\n  VoiceLeading,\n  Voicing,\n  VoicingDictionary,\n};\n",null,"import { distance as dist, note, transpose as tr } from \"@tonaljs/core\";\n\nconst fillStr = (character: string, times: number) =>\n  Array(times + 1).join(character);\n\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\n\ntype AbcTokens = [string, string, string];\n\nexport function tokenize(str: string): AbcTokens {\n  const m = REGEX.exec(str);\n  if (!m) {\n    return [\"\", \"\", \"\"];\n  }\n  return [m[1], m[2], m[3]];\n}\n\n/**\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\n *\n * @example\n * abcToScientificNotation(\"c\") // => \"C5\"\n */\nexport function abcToScientificNotation(str: string): string {\n  const [acc, letter, oct] = tokenize(str);\n  if (letter === \"\") {\n    return \"\";\n  }\n  let o = 4;\n  for (let i = 0; i < oct.length; i++) {\n    o += oct.charAt(i) === \",\" ? -1 : 1;\n  }\n  const a =\n    acc[0] === \"_\"\n      ? acc.replace(/_/g, \"b\")\n      : acc[0] === \"^\"\n      ? acc.replace(/\\^/g, \"#\")\n      : \"\";\n  return letter.charCodeAt(0) > 96\n    ? letter.toUpperCase() + a + (o + 1)\n    : letter + a + o;\n}\n\n/**\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\n *\n * @example\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\n */\nexport function scientificToAbcNotation(str: string): string {\n  const n = note(str);\n  if (n.empty || (!n.oct && n.oct !== 0)) {\n    return \"\";\n  }\n  const { letter, acc, oct } = n;\n  const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\n  const l = oct > 4 ? letter.toLowerCase() : letter;\n  const o =\n    oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\n  return a + l + o;\n}\n\nexport function transpose(note: string, interval: string): string {\n  return scientificToAbcNotation(tr(abcToScientificNotation(note), interval));\n}\n\nexport function distance(from: string, to: string): string {\n  return dist(abcToScientificNotation(from), abcToScientificNotation(to));\n}\n\nexport default {\n  abcToScientificNotation,\n  scientificToAbcNotation,\n  tokenize,\n  transpose,\n  distance,\n};\n",null,"import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n",null,"export interface NamedPitch {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\"\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",null,"import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n",null,"import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nexport interface NoInterval extends Partial<Interval> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly acc: \"\";\n}\n\nconst NoInterval: NoInterval = { empty: true, name: \"\", acc: \"\" };\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval | NoInterval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval | NoInterval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval | NoInterval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n",null,"import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nexport interface NoNote extends Partial<Note> {\n  empty: true;\n  name: \"\";\n  pc: \"\";\n  acc: \"\";\n}\nconst NoNote: NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\n\nconst cache: Map<NoteLiteral | undefined, Note | NoNote> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note | NoNote {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note | NoNote {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n",null,"import { note, Note } from \"@tonaljs/core\";\n\nconst isArray = Array.isArray;\n\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Sort an array of notes in ascending order. Pitch classes are listed\n * before notes. Any string that is not a note is removed.\n *\n * @param {string[]} notes\n * @return {string[]} sorted array of notes\n *\n * @example\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\n * // => ['C', 'F', 'G', 'A', 'B']\n */\nexport function sortedNoteNames(notes: string[]): string[] {\n  const valid = notes.map((n) => note(n)).filter((n) => !n.empty) as Note[];\n  return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\n}\n\n/**\n * Get sorted notes with duplicates removed. Pitch classes are listed\n * before notes.\n *\n * @function\n * @param {string[]} array\n * @return {string[]} unique sorted notes\n *\n * @example\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\n */\nexport function sortedUniqNoteNames(arr: string[]): string[] {\n  return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} array\n * @return {Array} the array shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an array\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n}\n",null,"import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { tonicIntervalsTransposer } from \"@tonaljs/core\";\n\nimport {\n  deprecate,\n  distance,\n  note,\n  NoteName,\n  tokenizeNote,\n  transpose as transposeNote,\n} from \"@tonaljs/core\";\n\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\n\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordName = string;\ntype ChordNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return [\"\", name];\n  }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (letter === \"A\" && type === \"ug\") {\n    return [\"\", \"aug\"];\n  }\n  return [letter + acc, oct + type];\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordName | ChordNameTokens): Chord {\n  if (src === \"\") {\n    return NoChord;\n  }\n  if (Array.isArray(src) && src.length === 2) {\n    return getChord(src[1], src[0]);\n  } else {\n    const [tonic, type] = tokenize(src);\n    const chord = getChord(type, tonic);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalRoot?: string\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const root = note(optionalRoot || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalRoot && root.empty)\n  ) {\n    return NoChord;\n  }\n\n  const rootInterval = distance(tonic.pc, root.pc);\n  const rootDegree = type.intervals.indexOf(rootInterval) + 1;\n  if (!root.empty && !rootDegree) {\n    return NoChord;\n  }\n\n  const intervals = Array.from(type.intervals);\n\n  for (let i = 1; i < rootDegree; i++) {\n    const num = intervals[0][0];\n    const quality = intervals[0][1];\n    const newNum = parseInt(num, 10) + 7;\n    intervals.push(`${newNum}${quality}`);\n    intervals.shift();\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    type: type.name,\n    root: root.name,\n    intervals,\n    rootDegree,\n    tonic: tonic.name,\n    notes,\n  };\n}\n\nexport const chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  return transposeNote(tonic, interval) + type;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: string | ChordNameTokens) {\n  const { intervals, tonic } = get(chordName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: string | ChordNameTokens) {\n  const { intervals, tonic } = get(chordName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n\n  // deprecate\n  chord,\n};\n",null,"import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { note } from \"@tonaljs/core\";\nimport { modes } from \"@tonaljs/pcset\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean\n}\nexport function detect(source: string[], options: Partial<DetectOptions> = {}): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n}\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) => Boolean(chromaNumber & bitmask)\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds)\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth)\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh)\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths)\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2)\n  return hasAnyThird(chromaNumber) && hasPerfectFifth(chromaNumber) && hasAnySeventh(chromaNumber)\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2)\n  return hasNonPerfectFifth(chromaNumber)\n  ? chroma \n  : (chromaNumber | 16).toString(2)\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean\n}\nfunction findMatches(notes: string[], weight: number, options: Partial<FindMatchesOptions>): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth = options.assumePerfectFifth && withPerfectFifth(mode)\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if(options.assumePerfectFifth && hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)) {\n        return chordType.chroma === modeWithPerfectFifth\n      }\n      return chordType.chroma === mode\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\nexport default { detect };\n",null,"import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n",null,"import { compact, range, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  Interval,\n  interval,\n  IntervalName,\n  Named,\n  note,\n  Note,\n  NoteName,\n  NotFound,\n} from \"@tonaljs/core\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset extends Named {\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string => Number(num).toString(2);\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n    ? setNumToChroma(src)\n    : Array.isArray(src)\n    ? listToChroma(src)\n    : isPcset(src)\n    ? src.chroma\n    : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * Use Pcset.properties\n * @function\n * @deprecated\n */\nexport const pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nconst intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nconst num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * @private\n * Get the intervals of a pcset *starting from C*\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nexport function chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are numentical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n",null,"// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n}\n\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n",null,"import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\nexport const scaleType = deprecate(\n  \"ScaleDictionary.scaleType\",\n  \"ScaleType.get\",\n  get\n);\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\n  \"ScaleDictionary.entries\",\n  \"ScaleType.all\",\n  all\n);\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = []\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases)\n);\n\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n",null,"// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA: [number, string, string[]][] = [\n  [\n    0.125,\n    \"dl\",\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\n  ],\n  [0.25, \"l\", [\"long\", \"longa\"]],\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\n  [1, \"w\", [\"whole\", \"semibreve\"]],\n  [2, \"h\", [\"half\", \"minim\"]],\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\n  [8, \"e\", [\"eighth\", \"quaver\"]],\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\n  [128, \"h\", [\"hundred twenty-eighth\"]],\n  [256, \"th\", [\"two hundred fifty-sixth\"]],\n];\n\nexport default DATA;\n","import DATA from \"./data\";\n\ntype Fraction = [number, number];\n\nconst VALUES: DurationValue[] = [];\n\nDATA.forEach(([denominator, shorthand, names]) =>\n  add(denominator, shorthand, names)\n);\n\nexport interface DurationValue {\n  empty: boolean;\n  value: number;\n  name: string;\n  fraction: Fraction;\n  shorthand: string;\n  dots: string;\n  names: string[];\n}\n\nconst NoDuration: DurationValue = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: [],\n};\n\nexport function names(): string[] {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach((name) => names.push(name));\n    return names;\n  }, [] as string[]);\n}\n\nexport function shorthands(): string[] {\n  return VALUES.map((dur) => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nexport function get(name: string): DurationValue {\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(\n    (dur) => dur.shorthand === simple || dur.names.includes(simple)\n  );\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n\n  return { ...base, name, dots, value, fraction };\n}\n\nexport const value = (name: string) => get(name).value;\nexport const fraction = (name: string) => get(name).fraction;\n\nexport default { names, shorthands, get, value, fraction };\n\n//// PRIVATE ////\n\nfunction add(denominator: number, shorthand: string, names: string[]) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names,\n  });\n}\n\nfunction calcDots(fraction: Fraction, dots: number): Fraction {\n  const pow = Math.pow(2, dots);\n\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator;\n\n  // add fractions\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  }\n\n  // simplify\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n  return [numerator, denominator];\n}\n",null,"import {\n  coordToInterval,\n  distance as dist,\n  interval as props,\n  IntervalCoordinates,\n  IntervalName,\n  NoteCoordinates,\n  tokenizeInterval as tokenize,\n} from \"@tonaljs/core\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the substracted interval name\n * @example\n * Interval.substract('5P', '3M') // => '3m'\n * Interval.substract('3M', '5P') // => '-3m'\n */\nexport const substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  substract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n",null,"import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[]\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\")\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\")\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\"\n  )\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\"\n  )\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n",null,"import {\n  IntervalName,\n  Named,\n  Note,\n  note as props,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Named) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1]\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      })\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n      ? +1\n      : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n",null,"import { note as props, NoteName } from \"@tonaljs/core\";\n\ntype Midi = number;\n\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertzs from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n",null,"import {\n  accToAlt,\n  altToAcc,\n  deprecate,\n  interval,\n  isNamed,\n  isPitch,\n  Named,\n  Pitch,\n} from \"@tonaljs/core\";\n\nexport interface RomanNumeral extends Pitch, Named {\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n    ? get(NAMES[src] || \"\")\n    : isPitch(src)\n    ? fromPitch(src)\n    : isNamed(src)\n    ? get(src.name)\n    : NoRomanNumeral;\n}\n\nconst romanNumeral = deprecate(\n  \"RomanNumeral.romanNumeral\",\n  \"RomanNumeral.get\",\n  get\n);\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n",null,"import { rotate } from \"@tonaljs/collection\";\nimport { deprecate, Named, NoteName, transpose } from \"@tonaljs/core\";\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\nimport { EmptyPcset, Pcset } from \"@tonaljs/pcset\";\nimport { get as getType } from \"@tonaljs/scale-type\";\n\nconst MODES = [\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\n] as const;\n\ntype ModeDatum = typeof MODES[number];\n\nexport interface Mode extends Pcset {\n  readonly name: string;\n  readonly modeNum: number;\n  readonly alt: number; // number of alterations === number of fiths\n  readonly triad: string;\n  readonly seventh: string;\n  readonly aliases: string[];\n}\n\nconst NoMode: Mode = {\n  ...EmptyPcset,\n  name: \"\",\n  alt: 0,\n  modeNum: NaN,\n  triad: \"\",\n  seventh: \"\",\n  aliases: [],\n};\n\nconst modes: Mode[] = MODES.map(toMode);\nconst index: Record<string, Mode> = {};\nmodes.forEach((mode) => {\n  index[mode.name] = mode;\n  mode.aliases.forEach((alias) => {\n    index[alias] = mode;\n  });\n});\n\ntype ModeLiteral = string | Named;\n\n/**\n * Get a Mode by it's name\n *\n * @example\n * get('dorian')\n * // =>\n * // {\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\n * //   modeNum: 1,\n * //   chroma: '101101010110',\n * //   normalized: '101101010110',\n * //   name: 'dorian',\n * //   setNum: 2902,\n * //   alt: 2,\n * //   triad: 'm',\n * //   seventh: 'm7',\n * //   aliases: []\n * // }\n */\nexport function get(name: ModeLiteral): Mode {\n  return typeof name === \"string\"\n    ? index[name.toLowerCase()] || NoMode\n    : name && name.name\n    ? get(name.name)\n    : NoMode;\n}\n\nexport const mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\n\n/**\n * Get a list of all modes\n */\nexport function all() {\n  return modes.slice();\n}\nexport const entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\n\n/**\n * Get a list of all mode names\n */\nexport function names() {\n  return modes.map((mode) => mode.name);\n}\n\nfunction toMode(mode: ModeDatum): Mode {\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\n  const aliases = alias ? [alias] : [];\n  const chroma = Number(setNum).toString(2);\n  const intervals = getType(name).intervals;\n  return {\n    empty: false,\n    intervals,\n    modeNum,\n    chroma,\n    normalized: chroma,\n    name,\n    setNum,\n    alt,\n    triad,\n    seventh,\n    aliases,\n  };\n}\n\nexport function notes(modeName: ModeLiteral, tonic: NoteName) {\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\n}\n\nfunction chords(chords: string[]) {\n  return (modeName: ModeLiteral, tonic: NoteName) => {\n    const mode = get(modeName);\n    if (mode.empty) return [];\n    const triads = rotate(mode.modeNum, chords);\n    const tonics = mode.intervals.map((i) => transpose(tonic, i));\n    return triads.map((triad, i) => tonics[i] + triad);\n  };\n}\n\nexport const triads = chords(MODES.map((x) => x[4]));\nexport const seventhChords = chords(MODES.map((x) => x[5]));\n\nexport function distance(destination: ModeLiteral, source: ModeLiteral) {\n  const from = get(source);\n  const to = get(destination);\n  if (from.empty || to.empty) return \"\";\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\n}\n\nexport function relativeTonic(\n  destination: ModeLiteral,\n  source: ModeLiteral,\n  tonic: NoteName\n) {\n  return transpose(tonic, distance(destination, source));\n}\n\nexport default {\n  get,\n  names,\n  all,\n  distance,\n  relativeTonic,\n  notes,\n  triads,\n  seventhChords,\n  // deprecated\n  entries,\n  mode,\n};\n",null,"import { tokenize } from \"@tonaljs/chord\";\nimport { distance, interval, NoteLiteral, transpose } from \"@tonaljs/core\";\nimport { get as romanNumeral } from \"@tonaljs/roman-numeral\";\n\n/**\n * Given a tonic and a chord list expressed with roman numeral notation\n * returns the progression expressed with leadsheet chords symbols notation\n * @example\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\n * // => [\"C\", \"Dm7\", \"G7\"]\n */\nexport function fromRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[]\n): string[] {\n  const romanNumerals = chords.map(romanNumeral);\n  return romanNumerals.map(\n    (rn) => transpose(tonic, interval(rn)) + rn.chordType\n  );\n}\n\n/**\n * Given a tonic and a chord list with leadsheet symbols notation,\n * return the chord list with roman numeral notation\n * @example\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\n */\nexport function toRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[]\n): string[] {\n  return chords.map((chord) => {\n    const [note, chordType] = tokenize(chord);\n    const intervalName = distance(tonic, note);\n    const roman = romanNumeral(interval(intervalName));\n    return roman.name + chordType;\n  });\n}\n\nexport default { fromRomanNumerals, toRomanNumerals };\n",null,"import { compact, range } from \"@tonaljs/collection\";\nimport { midiToNoteName, toMidi, ToNoteNameOptions } from \"@tonaljs/midi\";\n\n/**\n * Create a numeric range. You supply a list of notes or numbers and it will\n * be connected to create complex ranges.\n *\n * @param {Array} notes - the list of notes or midi numbers used\n * @return {Array} an array of numbers or empty array if not valid parameters\n *\n * @example\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\n * // it works midi notes\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\n * // complex range\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n */\nexport function numeric(notes: (string | number)[]): number[] {\n  const midi: number[] = compact(\n    notes.map((note) => (typeof note === \"number\" ? note : toMidi(note)))\n  );\n  if (!notes.length || midi.length !== notes.length) {\n    // there is no valid notes\n    return [];\n  }\n\n  return midi.reduce(\n    (result, note) => {\n      const last: number = result[result.length - 1];\n      return result.concat(range(last, note).slice(1));\n    },\n    [midi[0]]\n  );\n}\n\n/**\n * Create a range of chromatic notes. The altered notes will use flats.\n *\n * @function\n * @param {Array} notes - the list of notes or midi note numbers to create a range from\n * @param {Object} options - The same as `midiToNoteName` (`{ sharps: boolean, pitchClass: boolean }`)\n * @return {Array} an array of note names\n *\n * @example\n * Range.chromatic([\"C2, \"E2\", \"D2\"]) // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\n * // with sharps\n * Range.chromatic([\"C2\", \"C3\"], { sharps: true }) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\n */\nexport function chromatic(\n  notes: (string | number)[],\n  options?: ToNoteNameOptions\n): string[] {\n  return numeric(notes).map((midi) => midiToNoteName(midi, options));\n}\n\nexport default { numeric, chromatic };\n",null,"/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  note,\n  NoteName,\n  tonicIntervalsTransposer,\n  transpose,\n} from \"@tonaljs/core\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport {\n  all,\n  all as scaleTypes,\n  get as getScaleType,\n  names as scaleTypeNames,\n  ScaleType,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1);\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\nexport const scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {}\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n",null,"// TYPES: PARSING\nexport type TimeSignatureLiteral = string | [number, number] | [string, string];\ntype ParsedTimeSignature = [number | number[], number];\n\n// TYPES: PROPERTIES\nexport type ValidTimeSignature = {\n  readonly empty: false;\n  readonly name: string;\n  readonly upper: number | number[];\n  readonly lower: number;\n  readonly type: \"simple\" | \"compound\" | \"irregular\" | \"irrational\";\n  readonly additive: number[];\n};\n\nexport type InvalidTimeSignature = {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly upper: undefined;\n  readonly lower: undefined;\n  readonly type: undefined;\n  readonly additive: [];\n};\n\nexport type TimeSignature = ValidTimeSignature | InvalidTimeSignature;\n\n// CONSTANTS\nconst NONE: InvalidTimeSignature = {\n  empty: true,\n  name: \"\",\n  upper: undefined,\n  lower: undefined,\n  type: undefined,\n  additive: [],\n};\n\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\n\n// PUBLIC API\n\nexport function names() {\n  return NAMES.slice();\n}\n\nconst REGEX = /^(\\d*\\d(?:\\+\\d)*)\\/(\\d+)$/;\nconst CACHE = new Map<TimeSignatureLiteral, TimeSignature>();\n\nexport function get(literal: TimeSignatureLiteral): TimeSignature {\n  const stringifiedLiteral = JSON.stringify(literal);\n  const cached = CACHE.get(stringifiedLiteral);\n  if (cached) {\n    return cached;\n  }\n\n  const ts = build(parse(literal));\n  CACHE.set(stringifiedLiteral, ts);\n  return ts;\n}\n\nexport function parse(literal: TimeSignatureLiteral): ParsedTimeSignature {\n  if (typeof literal === \"string\") {\n    const [_, up, low] = REGEX.exec(literal) || [];\n    return parse([up, low]);\n  }\n\n  const [up, down] = literal;\n  const denominator = +down;\n  if (typeof up === \"number\") {\n    return [up, denominator];\n  }\n\n  const list = up.split(\"+\").map((n) => +n);\n  return list.length === 1 ? [list[0], denominator] : [list, denominator];\n}\n\nexport default { names, parse, get };\n\n// PRIVATE\n\nconst isPowerOfTwo = (x: number) => (Math.log(x) / Math.log(2)) % 1 === 0;\n\nfunction build([up, down]: ParsedTimeSignature): TimeSignature {\n  const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\n  const lower = down;\n  if (upper === 0 || lower === 0) {\n    return NONE;\n  }\n\n  const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\n  const additive = Array.isArray(up) ? up : [];\n  const type =\n    lower === 4 || lower === 2\n      ? \"simple\"\n      : lower === 8 && upper % 3 === 0\n      ? \"compound\"\n      : isPowerOfTwo(lower)\n      ? \"irregular\"\n      : \"irrational\";\n\n  return {\n    empty: false,\n    name,\n    type,\n    upper,\n    lower,\n    additive,\n  };\n}\n",null,"import Note from \"@tonaljs/note\";\n\n// A function that decides which of a set of voicings is picked as a follow up to lastVoicing.\nexport declare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[],\n) => string[];\n\nexport const topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0];\n};\n\nexport default {\n  topNoteDiff,\n};\n",null,"import Chord from \"@tonaljs/chord\";\nimport Note from \"@tonaljs/note\";\nimport Range from \"@tonaljs/range\";\nimport Interval from \"@tonaljs/interval\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\n\nconst defaultRange = [\"C3\", \"C5\"];\nconst defaultDictionary = VoicingDictionary.all;\nconst defaultVoiceLeading = VoiceLeading.topNoteDiff;\n\nfunction get(\n  chord: string,\n  range: string[] = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const voicings = search(chord, range, dictionary);\n  if (!lastVoicing || !lastVoicing.length) {\n    // notes = voicings[Math.ceil(voicings.length / 2)]; // pick middle voicing..\n    return voicings[0]; // pick lowest voicing..\n  } else {\n    // calculates the distance between the last note and the given voicings top note\n    // sort voicings with differ\n    return voiceLeading(voicings, lastVoicing);\n  }\n}\n\nfunction search(\n  chord: string,\n  range = defaultRange,\n  dictionary = VoicingDictionary.triads,\n): string[][] {\n  const [tonic, symbol] = Chord.tokenize(chord);\n  const sets = VoicingDictionary.lookup(symbol, dictionary);\n  // find equivalent symbol that is used as a key in dictionary:\n  if (!sets) {\n    return [];\n  }\n  // resolve array of interval arrays for the wanted symbol\n  const voicings = sets.map((intervals) => intervals.split(\" \"));\n  const notesInRange = Range.chromatic(range); // gives array of notes inside range\n  return voicings.reduce((voiced: string[][], voicing: string[]) => {\n    // transpose intervals relative to first interval (e.g. 3m 5P > 1P 3M)\n    const relativeIntervals = voicing.map(\n      (interval) => Interval.substract(interval, voicing[0]) || \"\",\n    );\n    // get enharmonic correct pitch class the bottom note\n    const bottomPitchClass = Note.transpose(tonic, voicing[0]);\n    // get all possible start notes for voicing\n    const starts = notesInRange\n      // only get the start notes:\n      .filter((note) => Note.chroma(note) === Note.chroma(bottomPitchClass))\n      // filter out start notes that will overshoot the top end of the range\n      .filter(\n        (note) =>\n          (Note.midi(\n            Note.transpose(\n              note,\n              relativeIntervals[relativeIntervals.length - 1],\n            ),\n          ) || 0) <= (Note.midi(range[1]) || 0),\n      )\n      // replace Range.chromatic notes with the correct enharmonic equivalents\n      .map((note) => Note.enharmonic(note, bottomPitchClass));\n    // render one voicing for each start note\n    const notes = starts.map((start) =>\n      relativeIntervals.map((interval) => Note.transpose(start, interval)),\n    );\n    return voiced.concat(notes);\n  }, []);\n}\n\nfunction sequence(\n  chords: string[],\n  range = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const { voicings } = chords.reduce<{\n    voicings: string[][];\n    lastVoicing: string[] | undefined;\n  }>(\n    ({ voicings, lastVoicing }, chord) => {\n      const voicing = get(chord, range, dictionary, voiceLeading, lastVoicing);\n      lastVoicing = voicing;\n      voicings.push(voicing);\n      return { voicings, lastVoicing };\n    },\n    { voicings: [], lastVoicing },\n  );\n  return voicings;\n}\n\nexport default {\n  get,\n  search,\n  sequence,\n};\n",null,"import Chord from \"@tonaljs/chord\";\nimport { lefthand, VoicingDictionary, triads, all } from \"./data\";\n\nconst defaultDictionary: VoicingDictionary = lefthand;\n\nfunction lookup(\n  symbol: string,\n  dictionary = defaultDictionary,\n): string[] | undefined {\n  if (dictionary[symbol]) {\n    return dictionary[symbol];\n  }\n  const { aliases } = Chord.get(\"C\" + symbol);\n  // TODO: find other way to get aliases of symbol\n  const match =\n    Object.keys(dictionary).find((_symbol) => aliases.includes(_symbol)) || \"\";\n  if (match !== undefined) {\n    return dictionary[match];\n  }\n  return undefined;\n}\n\nexport default {\n  lookup,\n  lefthand,\n  triads,\n  all,\n  defaultDictionary,\n};\n","export type VoicingDictionary = { [symbol: string]: string[] };\n\nexport const triads: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n};\nexport const lefthand: VoicingDictionary = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\nexport const all: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\n"],"names":["note","pitch","detect","chord","transpose","names","num","chroma","intervals","fraction","value","name","semitones","keyScale","midi","freq","pcset","mode","chords","triads","scale","up","voicings","lastVoicing"],"version":3,"file":"index.975ef6c8.js.map","sourceRoot":"/__parcel_source_root/"}